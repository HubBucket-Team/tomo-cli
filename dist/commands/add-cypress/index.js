"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.iterator"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.removeCypress=exports.addCypress=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_path=require("path"),_utils=require("../../utils"),_common=require("../../utils/common"),_Scaffolder=require("../../utils/Scaffolder"),_createJsonEditor=_interopRequireDefault(require("../../utils/createJsonEditor"));const ALWAYS=()=>!0,CYPRESS_DEPENDENCIES=["cypress","cypress-match-screenshot"],addCypress=[{text:"Create Cypress config file",task:function(){var a=(0,_asyncToGenerator2.default)(function*({port:a}){const b=(0,_createJsonEditor.default)("cypress.json",{baseUrl:`http://localhost:${a}`});yield new b().create().commit()});return function task(){return a.apply(this,arguments)}}(),condition:()=>(0,_common.allDoNotExist)("cypress.json")},{text:"Add Cypress test tasks to package.json",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){yield new _utils.PackageJsonEditor().extend({scripts:{cypress:"cypress open","test:e2e":"npm-run-all --parallel start cypress"}}).commit()});return function task(){return a.apply(this,arguments)}}(),condition:()=>(0,_common.allDoExist)("package.json")},{text:"Add Cypress global variable to .eslintrc.js",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){yield new _utils.EslintConfigModuleEditor().extend({globals:{cy:!0}}).commit()});return function task(){return a.apply(this,arguments)}}(),condition:()=>(0,_common.allDoExist)(".eslintrc.js")},{text:"Copy Cypress files",task:function(){var a=(0,_asyncToGenerator2.default)(function*({overwrite:a}){yield new _Scaffolder.Scaffolder((0,_path.join)(__dirname,"templates")).overwrite(a).target("cypress/support").copy("support/index.js","index.js").copy("support/commands.js","commands.js").target("cypress/integration").copy("visual-regression.test.js").commit()});return function task(){return a.apply(this,arguments)}}(),condition:ALWAYS},{text:"Install Cypress dependencies",task:({skipInstall:a})=>(0,_utils.install)([...CYPRESS_DEPENDENCIES,"npm-run-all"],{dev:!0,skipInstall:a}),condition:({isNotOffline:a})=>a&&(0,_common.allDoExist)("package.json")}];exports.addCypress=addCypress;const removeCypress=[{text:"Delete Cypress config file",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){const a=(0,_createJsonEditor.default)("cypress.json");yield new a().delete().commit()});return function task(){return a.apply(this,arguments)}}(),condition:()=>(0,_common.allDoExist)("cypress.json")},{text:"Remove Cypress test tasks from package.json",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){yield new _utils.PackageJsonEditor().extend({scripts:{cypress:void 0,"test:e2e":void 0}}).commit()});return function task(){return a.apply(this,arguments)}}(),condition:()=>(0,_common.allDoExist)("package.json")},{text:"Remove Cypress global variable from .eslintrc.js",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){yield new _utils.EslintConfigModuleEditor().extend({globals:{cy:!1}}).commit()});return function task(){return a.apply(this,arguments)}}(),condition:()=>(0,_common.allDoExist)(".eslintrc.js")},{text:"Uninstall Cypress dependencies",task:()=>(0,_utils.uninstall)(CYPRESS_DEPENDENCIES),condition:({skipInstall:a})=>!a&&(0,_common.allDoExist)("package.json")&&new _utils.PackageJsonEditor().hasAll(...CYPRESS_DEPENDENCIES),optional:({skipInstall:a})=>!a}];exports.removeCypress=removeCypress;var _default=addCypress;exports.default=_default;