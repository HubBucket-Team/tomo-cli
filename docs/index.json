[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/commands/add-a11y.js",
    "content": "import {\n    PackageJsonEditor,\n    install,\n    uninstall\n} from '../utils';\nimport {allDoExist} from '../utils/common';\n/**\n * @type {task[]}\n * @see http://pa11y.org/\n */\nexport const addA11y = [\n    {\n        text: 'Add pa11y tasks to package.json',\n        task: async ({outputDirectory}) => {\n            const scripts = {\n                'lint:a11y': `pa11y ${outputDirectory}/index.html`\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Install pa11y',\n        task: ({skipInstall}) => install(['pa11y'], {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && allDoExist('package.json')\n    }\n];\nexport const removeA11y = [\n    {\n        text: 'Remove pa11y tasks from package.json',\n        task: async () => {\n            const scripts = {\n                'lint:a11y': undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Uninstall pa11y',\n        task: () => uninstall(['pa11y']),\n        condition: ({skipInstall}) => !skipInstall && allDoExist('package.json') && (new PackageJsonEditor()).hasAll('pa11y'),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addA11y;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-a11y.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "addA11y",
    "memberof": "src/commands/add-a11y.js",
    "static": true,
    "longname": "src/commands/add-a11y.js~addA11y",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-a11y.js",
    "importStyle": "{addA11y}",
    "description": "",
    "see": [
      "http://pa11y.org/"
    ],
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "removeA11y",
    "memberof": "src/commands/add-a11y.js",
    "static": true,
    "longname": "src/commands/add-a11y.js~removeA11y",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-a11y.js",
    "importStyle": "{removeA11y}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/commands/add-babel.js",
    "content": "import {BabelConfigModuleEditor, PackageJsonEditor, install} from '../utils';\nimport {allDoNotExist, someDoExist} from '../utils/common';\n\nconst BABEL_CORE = [\n    '@babel/cli',\n    '@babel/core',\n    '@babel/runtime'\n];\nconst BABEL_PRESETS = [\n    '@babel/preset-env',\n    'babel-preset-minify'\n];\nconst BABEL_PLUGINS = [\n    '@babel/plugin-transform-runtime',\n    '@babel/plugin-proposal-class-properties',\n    '@babel/plugin-proposal-export-default-from',\n    '@babel/plugin-proposal-optional-chaining'\n];\nconst BABEL_REACT_PRESET = [\n    '@babel/preset-react'\n];\nconst BABEL_DEPENDENCIES = [\n    ...BABEL_CORE,\n    ...BABEL_PRESETS,\n    ...BABEL_PLUGINS\n];\n/**\n * @type {task[]}\n * @see https://babeljs.io/\n */\nexport const addBabel = [\n    {\n        text: 'Create Babel config file',\n        task: async () => {\n            await (new BabelConfigModuleEditor())\n                .create()\n                .commit();\n        },\n        condition: () => allDoNotExist('babel.config.js', '.babelrc', '.babelrc.js')\n    },\n    {\n        text: 'Add Babel build task to package.json',\n        task: async ({outputDirectory, sourceDirectory}) => {\n            const scripts = {\n                build: `babel ${sourceDirectory} --out-dir ${outputDirectory}`,\n                'build:watch': `watch 'npm run build' ${sourceDirectory}`\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install Babel core, CLI, presets, and plugins',\n        task: ({skipInstall}) => install(BABEL_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && (!(new PackageJsonEditor()).hasAll(...BABEL_DEPENDENCIES) && someDoExist('package.json'))\n    },\n    {\n        text: 'Install Babel React preset',\n        task: ({skipInstall}) => install(BABEL_REACT_PRESET, {dev: true, skipInstall}),\n        condition: ({useReact}) => (useReact && someDoExist('package.json')),\n        optional: ({isNotOffline, useReact}) => isNotOffline && useReact\n    },\n    {\n        text: 'Add React support to Babel configuration file',\n        task: async () => {\n            const presets = [...BABEL_PRESETS, ...BABEL_REACT_PRESET];\n            await (new BabelConfigModuleEditor())\n                .extend({presets})\n                .commit();\n        },\n        condition: ({useReact}) => useReact && someDoExist('babel.config.js'),\n        optional: ({useReact}) => useReact\n    }\n];\nexport default addBabel;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-babel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "BABEL_CORE",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~BABEL_CORE",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "BABEL_PRESETS",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~BABEL_PRESETS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "BABEL_PLUGINS",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~BABEL_PLUGINS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "BABEL_REACT_PRESET",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~BABEL_REACT_PRESET",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "BABEL_DEPENDENCIES",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~BABEL_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "addBabel",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~addBabel",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": "{addBabel}",
    "description": "",
    "see": [
      "https://babeljs.io/"
    ],
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/commands/add-browsersync.js",
    "content": "import {\n    PackageJsonEditor,\n    install,\n    uninstall\n} from '../utils';\nimport {allDoExist, someDoExist, someDoExistSync} from '../utils/common';\n\nconst BROWSERSYNC_DEPENDENCIES = [\n    'browser-sync',\n    'npm-run-all'\n];\n/**\n * @type {task[]}\n * @see https://www.browsersync.io/docs/command-line\n */\nexport const addBrowsersync = [\n    {\n        text: 'Add Browsersync tasks to package.json',\n        task: async ({outputDirectory}) => {\n            const scripts = {\n                prestart: 'npm run build',\n                start: 'npm-run-all --parallel build:watch build:css:watch serve',\n                serve: `browser-sync start --server ${outputDirectory} --files ${outputDirectory}`\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: ({useParcel}) => allDoExist('package.json', 'postcss.config.js') && (someDoExistSync('webpack.config.js', 'rollup.config.js') || useParcel) // eslint-disable-line max-len\n    },\n    {\n        text: 'Install Browsersync dependencies',\n        task: ({skipInstall}) => install(BROWSERSYNC_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && someDoExist('package.json')\n    }\n];\nexport const removeBrowsersync = [\n    {\n        text: 'Remove Browsersync tasks from package.json',\n        task: async () => {\n            const scripts = {\n                prestart: undefined,\n                start: undefined,\n                serve: undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Uninstall Browsersync dependencies',\n        task: () => uninstall(BROWSERSYNC_DEPENDENCIES),\n        condition: ({skipInstall}) => !skipInstall && someDoExist('package.json') && (new PackageJsonEditor()).hasAll(...BROWSERSYNC_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addBrowsersync;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-browsersync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "BROWSERSYNC_DEPENDENCIES",
    "memberof": "src/commands/add-browsersync.js",
    "static": true,
    "longname": "src/commands/add-browsersync.js~BROWSERSYNC_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-browsersync.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "addBrowsersync",
    "memberof": "src/commands/add-browsersync.js",
    "static": true,
    "longname": "src/commands/add-browsersync.js~addBrowsersync",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-browsersync.js",
    "importStyle": "{addBrowsersync}",
    "description": "",
    "see": [
      "https://www.browsersync.io/docs/command-line"
    ],
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "removeBrowsersync",
    "memberof": "src/commands/add-browsersync.js",
    "static": true,
    "longname": "src/commands/add-browsersync.js~removeBrowsersync",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-browsersync.js",
    "importStyle": "{removeBrowsersync}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/commands/add-electron/index.js",
    "content": "import {join} from 'path';\nimport {PackageJsonEditor, install} from '../../utils';\nimport {allDoExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst DEPENDENCIES = [\n    'electron',\n    'electron-context-menu',\n    'electron-debug',\n    'electron-is-dev'\n];\nconst DEV_DEPENDENCIES = [\n    'electron-reloader',\n    'npm-run-all',\n    'spectron'\n];\nconst ALWAYS = () => true;\n/**\n * @type {task[]}\n * @see https://electronjs.org/\n */\nexport const tasks = [\n    {\n        text: 'Copy electron application files',\n        task: async () => {\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .target('.')\n                .copy('index.js')\n                .target('bin')\n                .copy('preload.js')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Configure metadata and add tasks to package.json',\n        task: async ({useParcel}) => {\n            const description = `Native Desktop application built with Electron`;\n            const main = 'index.js';\n            const name = 'tomo-native-app';\n            const scripts = {\n                'electron:build': 'npm-run-all build build:css',\n                'preelectron:start': 'npm run electron:build',\n                'electron:start': 'electron index',\n                'electron:dev': 'npm run electron:start -- --enable-logging',\n                dev: `npm-run-all${useParcel ? '' : ' electron:build'} --parallel build:watch${useParcel ? '' : ' build:css:watch'} electron:dev`\n            };\n            await (new PackageJsonEditor())\n                .extend({description, main, name, scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Install electron dependencies',\n        task: async ({skipInstall}) => {\n            await install(DEPENDENCIES, {skipInstall});\n            await install(DEV_DEPENDENCIES, {dev: true, skipInstall});\n        },\n        condition: () => allDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-electron/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "DEPENDENCIES",
    "memberof": "src/commands/add-electron/index.js",
    "static": true,
    "longname": "src/commands/add-electron/index.js~DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "DEV_DEPENDENCIES",
    "memberof": "src/commands/add-electron/index.js",
    "static": true,
    "longname": "src/commands/add-electron/index.js~DEV_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/add-electron/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-electron/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-electron/index.js",
    "static": true,
    "longname": "src/commands/add-electron/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-electron/index.js",
    "importStyle": "{tasks}",
    "description": "",
    "see": [
      "https://electronjs.org/"
    ],
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/commands/add-electron/templates/index.js",
    "content": "/* eslint-env node */\nconst {join} = require('path');\nconst {app, BrowserWindow, Menu} = require('electron');\nconst contextMenu = require('electron-context-menu');\n//\n// electron-reloaoder - https://github.com/sindresorhus/electron-reloader\n// main process file change --> app restart\n// renderer file change --> page reload\n//\ntry {require('electron-reloader')(module);} catch (err) {/* intentionally left blank */ }\n//\n// Add debug features like hotkeys for triggering dev tools and reload\n//\nrequire('electron-debug')();\n\nlet mainWindow;\nconst preload = join(__dirname, 'bin', 'preload.js');\nconst menuItems = [\n    {\n        label: 'Application',\n        submenu: [{\n            label: 'Quit',\n            accelerator: `${(process.platform === 'darwin') ? 'Command' : 'Control'}+Q`,\n            click: () => app.quit()\n        }]\n    },\n    {\n        label: 'Debug',\n        submenu: [{\n            label: 'Toggle DevTools',\n            click: () => mainWindow.toggleDevTools()\n        }]\n    }\n];\nconst applicationMenu = Menu.buildFromTemplate(menuItems);\nconst createWindow = () => {\n    mainWindow = new BrowserWindow({\n        width: 800,\n        height: 600,\n        webPreferences: {preload}\n    });\n    Menu.setApplicationMenu(applicationMenu);\n    contextMenu({prepend: () => menuItems});\n    mainWindow.loadURL(`file://${__dirname}/dist/index.html`);\n    //\n    // Open dev console\n    //\n    mainWindow.webContents.openDevTools();\n    mainWindow.on('closed', () => {\n        mainWindow = null;\n    });\n    mainWindow.webContents.on('devtools-opened', () => {\n        mainWindow.focus();\n        setImmediate(() => {\n            mainWindow.focus();\n        });\n    });\n};\napp.on('ready', createWindow);\napp.on('window-all-closed', () => {\n    //\n    // On OS X it is common for applications and their menu bar to stay active until the user quits explicitly with Cmd + Q\n    //\n    if (process.platform !== 'darwin') {\n        app.quit();\n    }\n});\napp.on('activate', () => {\n    //\n    // On OS X it's common to re-create a window in the app when the dock icon is clicked and there are no other windows open.\n    //\n    if (mainWindow === null) {\n        createWindow();\n    }\n});\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-electron/templates/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "join",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~join",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "app",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~app",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "contextMenu",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~contextMenu",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "preload",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~preload",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "menuItems",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~menuItems",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "applicationMenu",
    "memberof": "src/commands/add-electron/templates/index.js",
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~applicationMenu",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "createWindow",
    "memberof": "src/commands/add-electron/templates/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-electron/templates/index.js~createWindow",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-electron/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/commands/add-electron/templates/preload.js",
    "content": "/* eslint-env browser, node */\nprocess.once('loaded', () => {\n    window.nodeRequire = require;\n    delete window.require;\n    delete window.exports;\n    delete window.module;\n    global.__devtron = {require, process};\n    if (process.env.NODE_ENV === 'test') {\n        global.electronRequire = require;\n    }\n});\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-electron/templates/preload.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/commands/add-esdoc.js",
    "content": "import {PackageJsonEditor, install} from '../utils';\nimport {allDoNotExist, someDoExist} from '../utils/common';\nimport createJsonEditor from '../utils/createJsonEditor';\n\nconst ESDOC_CONF = {\n    source: './src',\n    destination: './docs',\n    plugins: [\n        {\n            name: 'esdoc-standard-plugin'\n        },\n        {\n            name: 'esdoc-ecmascript-proposal-plugin',\n            option: {\n                all: true\n            }\n        }\n    ]\n};\nconst ESDOC_DEPENDENCIES = [\n    'esdoc',\n    'esdoc-ecmascript-proposal-plugin',\n    'esdoc-standard-plugin'\n];\nconst ESDOC_REACT_PLUGINS = [\n    'esdoc-jsx-plugin'\n];\nconst EsdocJsonEditor = createJsonEditor('esdoc.conf.json', ESDOC_CONF);\n/**\n * @type {task[]}\n * @see https://esdoc.org/\n */\nexport const addEsdoc = [\n    {\n        text: 'Create esdoc configuration file',\n        task: async () => {\n            const cfg = new EsdocJsonEditor();\n            await cfg.create().commit();\n        },\n        condition: () => allDoNotExist('esdoc.conf.json', '.esdoc.json')\n    },\n    {\n        text: 'Add documentation tasks to package.json',\n        task: async ({sourceDirectory}) => {\n            const scripts = {\n                'lint:docs': `eslint . --no-eslintrc --rule valid-jsdoc:error --parser babel-eslint`,\n                'build:docs': `jsdoc ${sourceDirectory} -r --destination ./docs`,\n                'open:docs': 'open-cli ./docs/index.html',\n                preesdoc: 'npm run lint:docs',\n                esdoc: 'npm run build:docs',\n                postesdoc: 'npm run open:docs'\n            };\n            const pkg = new PackageJsonEditor();\n            await pkg.extend({scripts}).commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install esdoc dependencies',\n        task: ({skipInstall}) => install([...ESDOC_DEPENDENCIES, 'open-cli'], {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && someDoExist('package.json')\n    },\n    {\n        text: 'Install esdoc React plugins',\n        task: ({skipInstall}) => install(ESDOC_REACT_PLUGINS, {dev: true, skipInstall}),\n        condition: ({isNotOffline, useReact}) => isNotOffline && useReact && someDoExist('package.json'),\n        optional: ({useReact}) => useReact\n    },\n    {\n        text: 'Add esdoc React plugin to configuration file',\n        task: async () => {\n            const {plugins} = ESDOC_CONF;\n            const cfg = new EsdocJsonEditor();\n            await cfg\n                .extend({\n                    plugins: [...plugins, {\n                        name: 'esdoc-jsx-plugin',\n                        options: {enable: true}\n                    }]\n                })\n                .commit();\n        },\n        condition: ({useReact}) => useReact && someDoExist('esdoc.conf.json'),\n        optional: ({useReact}) => useReact\n    }\n];\nexport default addEsdoc;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-esdoc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "ESDOC_CONF",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~ESDOC_CONF",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"source\": string, \"destination\": string, \"plugins\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "ESDOC_DEPENDENCIES",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~ESDOC_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "ESDOC_REACT_PLUGINS",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~ESDOC_REACT_PLUGINS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "EsdocJsonEditor",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~EsdocJsonEditor",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "addEsdoc",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~addEsdoc",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": "{addEsdoc}",
    "description": "",
    "see": [
      "https://esdoc.org/"
    ],
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/commands/add-eslint/index.js",
    "content": "import {join} from 'path';\nimport {EslintConfigModuleEditor, PackageJsonEditor, install} from '../../utils';\nimport {allDoNotExist, someDoExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst ESLINT_DEPENDENCIES = [\n    'eslint',\n    'babel-eslint',\n    'eslint-config-omaha-prime-grade',\n    'watch'\n];\nconst ESLINT_REACT_PLUGINS = [\n    'eslint-plugin-react'\n];\n/**\n * @type {task[]}\n * @see https://eslint.org/\n */\nexport const tasks = [\n    {\n        text: 'Create ESLint configuration and .eslintignore files',\n        task: async () => {\n            await (new EslintConfigModuleEditor())\n                .create()\n                .commit();\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .copy('.eslintignore')\n                .commit();\n        },\n        condition: () => allDoNotExist('.eslintrc.js', '.eslintrc', '.eslintrc.json', '.eslintrc.yml')\n    },\n    {\n        text: 'Add lint tasks to package.json',\n        task: async ({sourceDirectory}) => {\n            const scripts = {\n                lint: `eslint . -c ./.eslintrc.js --fix`,\n                'lint:watch': `watch 'npm run lint' ${sourceDirectory}`,\n                'lint:tests': 'eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore'\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install ESLint dependencies',\n        task: ({skipInstall}) => install(ESLINT_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && someDoExist('package.json')\n    },\n    {\n        text: 'Install ESLint React plugins',\n        task: ({skipInstall}) => install(ESLINT_REACT_PLUGINS, {dev: true, skipInstall}),\n        condition: ({useReact}) => (useReact && someDoExist('package.json')),\n        optional: ({isNotOffline, useReact}) => isNotOffline && useReact\n    },\n    {\n        text: 'Add React support to ESLint configuration file',\n        task: async ({reactVersion}) => {\n            const REACT_BABEL_SETTINGS = {\n                parserOptions: {\n                    ecmaFeatures: {\n                        jsx: true\n                    }\n                },\n                settings: {\n                    react: {\n                        version: `'${reactVersion}'`\n                    }\n                },\n                extends: ['omaha-prime-grade', 'plugin:react/recommended']\n            };\n            await (new EslintConfigModuleEditor())\n                .extend(REACT_BABEL_SETTINGS)\n                .commit();\n        },\n        condition: ({useReact}) => useReact && someDoExist('.eslintrc.js'),\n        optional: ({useReact}) => useReact\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-eslint/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "ESLINT_DEPENDENCIES",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~ESLINT_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "ESLINT_REACT_PLUGINS",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~ESLINT_REACT_PLUGINS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": "{tasks}",
    "description": "",
    "see": [
      "https://eslint.org/"
    ],
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/commands/add-jest/index.js",
    "content": "import {join} from 'path';\nimport {PackageJsonEditor, install} from '../../utils';\nimport {someDoExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst ALWAYS = () => true;\nconst JEST_DEPENDENCIES = [\n    'jest',\n    'babel-jest'\n];\n/**\n * @type {task[]}\n * @see https://jestjs.io/\n */\nexport const addJest = [\n    {\n        text: 'Add test tasks and Jest configuration to package.json',\n        task: async ({browser}) => {\n            const scripts = {\n                test: 'jest .*.test.js --coverage',\n                'test:watch': 'npm test -- --watchAll'\n            };\n            const jest = {\n                testMatch: ['**/__tests__/**/*.(e2e|test).[jt]s?(x)'],\n                setupFilesAfterEnv: browser ? ['<rootDir>/__tests__/setup.js'] : undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({jest, scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Copy Jest boilerplate',\n        task: async ({browser}) => {\n            const scaffolder = new Scaffolder(join(__dirname, 'templates'));\n            browser && await scaffolder\n                .target('__tests__')\n                .copy('setup.js');\n            await scaffolder\n                .target('__tests__')\n                .copy('example.test.js')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Install Jest dependencies',\n        task: ({skipInstall}) => install(JEST_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && someDoExist('package.json')\n    }\n];\nexport default addJest;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-jest/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/add-jest/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-jest/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-jest/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "JEST_DEPENDENCIES",
    "memberof": "src/commands/add-jest/index.js",
    "static": true,
    "longname": "src/commands/add-jest/index.js~JEST_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-jest/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "addJest",
    "memberof": "src/commands/add-jest/index.js",
    "static": true,
    "longname": "src/commands/add-jest/index.js~addJest",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-jest/index.js",
    "importStyle": "{addJest}",
    "description": "",
    "see": [
      "https://jestjs.io/"
    ],
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/commands/add-jest/templates/example.test.js",
    "content": "const delay = duration => new Promise(resolve => {\n    setTimeout(resolve, duration);\n});\n\ndescribe('Example', () => {\n    test('can pass', () => {\n        expect(1).toEqual(1);\n        expect(1).not.toEqual(0);\n    });\n    test('can pass asynchronously', async () => {\n        await delay(100);\n        expect(1).toEqual(1);\n    });\n});",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-jest/templates/example.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "delay",
    "memberof": "src/commands/add-jest/templates/example.test.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/add-jest/templates/example.test.js~delay",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-jest/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "duration",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/commands/add-jest/templates/setup.js",
    "content": "class LocalStorageMock {\n    constructor() {\n        this.store = {};\n    }\n    clear() {\n        this.store = {};\n    }\n    getItem(key) {\n        return this.store[key] || null;\n    }\n    setItem(key, value) {\n        this.store[key] = value.toString();\n    }\n    removeItem(key) {\n        delete this.store[key];\n    }\n}\nglobal.localStorage = new LocalStorageMock();\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-jest/templates/setup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "LocalStorageMock",
    "memberof": "src/commands/add-jest/templates/setup.js",
    "static": true,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-jest/templates/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "store",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#store",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "clear",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#clear",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getItem",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#getItem",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "setItem",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#setItem",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "removeItem",
    "memberof": "src/commands/add-jest/templates/setup.js~LocalStorageMock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/commands/add-jest/templates/setup.js~LocalStorageMock#removeItem",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/commands/add-makefile.js",
    "content": "import {\n    allDoExist,\n    allDoExistSync,\n    allDoNotExist\n} from '../utils/common';\nimport MakefileEditor from '../utils/MakefileEditor';\n/**\n * @type {task[]}\n * @see https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html#Simple-Makefile\n */\nexport const addMakefile = [\n    {\n        text: 'Create Makefile',\n        task: async () => {\n            await (new MakefileEditor())\n                .create()\n                .write('# Makefile built with tomo')\n                .commit();\n        },\n        condition: () => allDoNotExist('Makefile')\n    },\n    {\n        text: 'Import tasks from package.json scripts',\n        task: async () => {\n            await (new MakefileEditor())\n                .delete()\n                .create()\n                .importScripts()\n                .appendScripts()\n                .appendHelpTask()\n                .commit();\n        },\n        condition: () => allDoExist('Makefile', 'package.json'),\n        optional: () => allDoExistSync('Makefile', 'package.json')\n    }\n];\nexport default addMakefile;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-makefile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "addMakefile",
    "memberof": "src/commands/add-makefile.js",
    "static": true,
    "longname": "src/commands/add-makefile.js~addMakefile",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-makefile.js",
    "importStyle": "{addMakefile}",
    "description": "",
    "see": [
      "https://www.gnu.org/software/make/manual/html_node/Simple-Makefile.html#Simple-Makefile"
    ],
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/commands/add-marionette/index.js",
    "content": "import {join} from 'path';\nimport {PackageJsonEditor, install} from '../../utils';\nimport {someDoExist} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst MARIONETTE_DEPENDENCIES = [\n    'jquery',\n    'backbone',\n    'backbone.marionette',\n    'backbone.radio',\n    'marionette.approuter',\n    'morphdom',\n    'lodash-es',\n    'redux'\n];\nconst ALWAYS = async () => true;\n/**\n * @type {task[]}\n * @see https://marionettejs.com/\n */\nexport const tasks = [\n    {\n        text: 'Copy Marionette.js boilerplate and assets',\n        task: async ({assetsDirectory, overwrite, sourceDirectory, useParcel, usePika}) => {\n            const index = (useParcel || usePika) ? 'index-in-place.html' : 'index.html';\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .overwrite(overwrite)\n                .target(sourceDirectory)\n                .copy('main.js')\n                .target(`${sourceDirectory}/components`)\n                .copy('app.js')\n                .target(`${sourceDirectory}/shims`)\n                .copy('mn.renderer.shim.js')\n                .target(`${sourceDirectory}/plugins`)\n                .copy('mn.radio.logging.js')\n                .copy('mn.redux.state.js')\n                .target(`${assetsDirectory}/images`)\n                .copy('.gitkeep')\n                .target(`${assetsDirectory}/fonts`)\n                .copy('.gitkeep')\n                .target(`${assetsDirectory}/library`)\n                .copy('.gitkeep')\n                .target(`${assetsDirectory}/workers`)\n                .copy('.gitkeep')\n                .commit();\n            await (new Scaffolder(join(__dirname, '..', 'common', 'templates')))\n                .target(`${assetsDirectory}`)\n                .copy(index, 'index.html')\n                .target(`${assetsDirectory}/css`)\n                .copy('style.css')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Set package.json \"main\" attribute',\n        task: async ({sourceDirectory}) => {\n            const main = `${sourceDirectory}/main.js`;\n            await (new PackageJsonEditor())\n                .extend({main})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install Marionette.js dependencies',\n        task: ({skipInstall}) => install(MARIONETTE_DEPENDENCIES, {skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && someDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-marionette/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "MARIONETTE_DEPENDENCIES",
    "memberof": "src/commands/add-marionette/index.js",
    "static": true,
    "longname": "src/commands/add-marionette/index.js~MARIONETTE_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/add-marionette/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/commands/add-marionette/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-marionette/index.js",
    "static": true,
    "longname": "src/commands/add-marionette/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": "{tasks}",
    "description": "",
    "see": [
      "https://marionettejs.com/"
    ],
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/commands/add-parcel.js",
    "content": "import {\n    PackageJsonEditor,\n    PurgecssConfigEditor,\n    install,\n    uninstall\n} from '../utils';\nimport {allDoExist, allDoExistSync, allDoNotExist, someDoExist} from '../utils/common';\n\nconst BUILD_DEPENDENCIES = [\n    'del-cli'\n];\nconst PARCEL_DEPENDENCIES = [\n    'parcel-bundler',\n    'parcel-plugin-purgecss'\n];\n/**\n * @type {task[]}\n * @see https://parceljs.org/\n */\nexport const addParcel = [\n    {\n        text: 'Add Parcel build tasks to package.json',\n        task: async ({assetsDirectory, outputDirectory}) => {\n            const scripts = {\n                'clean:build': `del-cli ${outputDirectory}`,\n                prebuild: 'npm run clean:build',\n                build: `parcel build --out-dir ${outputDirectory} --public-url ./ ${assetsDirectory}/index.html`,\n                'prebuild:watch': 'npm run clean:build',\n                'build:watch': `parcel watch --out-dir ${outputDirectory} --public-url ./ ${assetsDirectory}/index.html`,\n                start: `parcel ${assetsDirectory}/index.html --out-dir ${outputDirectory} --open`\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install development dependencies and add dev task to package.json',\n        task: async ({skipInstall}) => {\n            const scripts = {\n                dev: 'stmux [ \\\"npm run build:watch\\\" : \\\"npm run lint:watch\\\" ]'\n            };\n            await install(['stmux'], {dev: true, skipInstall});\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json', '.eslintrc.js'),\n        optional: () => allDoExistSync('package.json', '.eslintrc.js')\n    },\n    {\n        text: 'Create PurgeCSS config file',\n        task: async ({assetsDirectory}) => {\n            const content = [`'${assetsDirectory}/index.html'`];\n            await (new PurgecssConfigEditor())\n                .create()\n                .extend({content})\n                .commit();\n        },\n        condition: () => allDoNotExist('purgecss.config.js')\n    },\n    {\n        text: 'Install Parcel development dependencies',\n        task: ({skipInstall}) => install([...BUILD_DEPENDENCIES, ...PARCEL_DEPENDENCIES], {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && someDoExist('package.json')\n    }\n];\nexport const removeParcel = [\n    {\n        text: 'Remove Parcel build tasks from package.json',\n        task: async () => {\n            const scripts = {\n                'clean:build': undefined,\n                dev: undefined,\n                prebuild: undefined,\n                build: undefined,\n                'prebuild:watch': undefined,\n                'build:watch': undefined,\n                start: undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Delete PurgeCSS config file',\n        task: async () => {\n            await (new PurgecssConfigEditor())\n                .delete()\n                .commit();\n        },\n        condition: () => someDoExist('purgecss.config.js')\n    },\n    {\n        text: 'Uninstall Parcel dependencies',\n        task: () => uninstall([...BUILD_DEPENDENCIES, ...PARCEL_DEPENDENCIES, 'stmux']),\n        condition: ({skipInstall}) => !skipInstall && someDoExist('package.json') && (new PackageJsonEditor()).hasAll(...PARCEL_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addParcel;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-parcel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "BUILD_DEPENDENCIES",
    "memberof": "src/commands/add-parcel.js",
    "static": true,
    "longname": "src/commands/add-parcel.js~BUILD_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "PARCEL_DEPENDENCIES",
    "memberof": "src/commands/add-parcel.js",
    "static": true,
    "longname": "src/commands/add-parcel.js~PARCEL_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "addParcel",
    "memberof": "src/commands/add-parcel.js",
    "static": true,
    "longname": "src/commands/add-parcel.js~addParcel",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": "{addParcel}",
    "description": "",
    "see": [
      "https://parceljs.org/"
    ],
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "removeParcel",
    "memberof": "src/commands/add-parcel.js",
    "static": true,
    "longname": "src/commands/add-parcel.js~removeParcel",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-parcel.js",
    "importStyle": "{removeParcel}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/commands/add-postcss.js",
    "content": "import {\n    PackageJsonEditor,\n    PostcssConfigEditor,\n    install,\n    uninstall\n} from '../utils';\nimport {allDoNotExist, someDoExist} from '../utils/common';\n\nconst POSTCSS_DEPENDENCIES = [\n    'cssnano',\n    'postcss-cli',\n    'postcss-normalize',\n    'postcss-reporter',\n    'postcss-safe-parser',\n    'postcss-import',\n    'postcss-preset-env',\n    'stylelint',\n    'stylelint-config-recommended',\n    'uncss'\n];\n/**\n * @type {task[]}\n * @see https://github.com/postcss/postcss\n */\nexport const addPostcss = [\n    {\n        text: 'Create PostCSS config file',\n        task: async ({outputDirectory, useParcel}) => {\n            const plugins = [\n                `require('stylelint')({config: {extends: 'stylelint-config-recommended'}})`,\n                ...(useParcel ? [] : [`require('uncss').postcssPlugin({html: ['${outputDirectory}/index.html']})`]),\n                `require('postcss-import')()`,\n                `require('postcss-preset-env')({stage: 0})`,\n                `require('postcss-normalize')({browsers: 'last 2 versions'})`,\n                `require('cssnano')()`,\n                `require('postcss-reporter')({clearReportedMessages: true})`\n            ];\n            await (new PostcssConfigEditor())\n                .create()\n                .extend({plugins})\n                .commit();\n        },\n        condition: () => allDoNotExist('postcss.config.js')\n    },\n    {\n        text: 'Add PostCSS tasks to package.json',\n        task: async ({assetsDirectory, outputDirectory}) => {\n            const scripts = {\n                'build:css': `postcss ${assetsDirectory}/css/style.css --dir ${outputDirectory}`,\n                'build:css:watch': 'npm run build:css -- --watch'\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install PostCSS dependencies',\n        task: ({skipInstall}) => install(POSTCSS_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && someDoExist('package.json')\n    }\n];\nexport const removePostcss = [\n    {\n        text: 'Delete PostCSS config file',\n        task: async () => {\n            await (new PostcssConfigEditor())\n                .delete()\n                .commit();\n        },\n        condition: () => someDoExist('postcss.config.js')\n    },\n    {\n        text: 'Remove PostCSS build task from package.json',\n        task: async () => {\n            const scripts = {\n                'build:css': undefined,\n                'build:css:watch': undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Uninstall PostCSS dependencies',\n        task: () => uninstall(POSTCSS_DEPENDENCIES),\n        condition: ({skipInstall}) => !skipInstall && someDoExist('package.json') && (new PackageJsonEditor()).hasAll(...POSTCSS_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addPostcss;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-postcss.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "POSTCSS_DEPENDENCIES",
    "memberof": "src/commands/add-postcss.js",
    "static": true,
    "longname": "src/commands/add-postcss.js~POSTCSS_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-postcss.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "addPostcss",
    "memberof": "src/commands/add-postcss.js",
    "static": true,
    "longname": "src/commands/add-postcss.js~addPostcss",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-postcss.js",
    "importStyle": "{addPostcss}",
    "description": "",
    "see": [
      "https://github.com/postcss/postcss"
    ],
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "removePostcss",
    "memberof": "src/commands/add-postcss.js",
    "static": true,
    "longname": "src/commands/add-postcss.js~removePostcss",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-postcss.js",
    "importStyle": "{removePostcss}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/commands/add-rollup.js",
    "content": "import {join} from 'path';\nimport {\n    PackageJsonEditor,\n    RollupConfigEditor,\n    install,\n    uninstall\n} from '../utils';\nimport {allDoExist, allDoExistSync, allDoNotExist, someDoExist} from '../utils/common';\n\nconst BUILD_DEPENDENCIES = [\n    'cpy-cli',\n    'del-cli',\n    'npm-run-all'\n];\nconst ROLLUP_DEPENDENCIES = [\n    'rollup',\n    'rollup-plugin-babel',\n    'rollup-plugin-commonjs',\n    'rollup-plugin-node-resolve',\n    'rollup-plugin-replace'\n];\n/**\n * @type {task[]}\n * @see https://rollupjs.org/guide/en/\n */\nexport const addRollup = [\n    {\n        text: 'Create Rollup configuration file',\n        task: async ({outputDirectory, sourceDirectory}) => {\n            const input =  `'${sourceDirectory}/main.js'`;\n            const output = {\n                file: `'${outputDirectory}/bundle.min.js'`\n            };\n            await (new RollupConfigEditor())\n                .create()\n                .prepend(`import replace from 'rollup-plugin-replace'`)\n                .prepend(`import resolve from 'rollup-plugin-node-resolve'`)\n                .prepend(`import commonjs from 'rollup-plugin-commonjs'`)\n                .prepend(`import babel from 'rollup-plugin-babel'`)\n                .prepend(`/* eslint-disable max-len */`)\n                .extend({input, output})\n                .commit();\n        },\n        condition: () => allDoNotExist('webpack.config.js')\n    },\n    {\n        text: 'Add Rollup build tasks to package.json',\n        task: async ({assetsDirectory, outputDirectory, sourceDirectory}) => {\n            const scripts = {\n                copy: 'npm-run-all --parallel copy:assets copy:index',\n                'copy:assets': `cpy '${assetsDirectory}/!(css)/**/*.*' '${assetsDirectory}/**/[.]*' ${outputDirectory} --parents --recursive`,\n                'copy:index': `cpy '${assetsDirectory}/index.html' ${outputDirectory}`,\n                prebuild: `del-cli ${join(outputDirectory, assetsDirectory)}`,\n                build: 'rollup -c',\n                postbuild: 'npm run copy',\n                'build:watch': `watch 'npm run build' ${sourceDirectory}`\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install development dependencies and add dev task to package.json',\n        task: async ({skipInstall}) => {\n            const scripts = {\n                dev: 'stmux [ \\\"npm run build:watch\\\" : \\\"npm run lint:watch\\\" ]'\n            };\n            await install(['stmux'], {dev: true, skipInstall});\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json', '.eslintrc.js'),\n        optional: () => allDoExistSync('package.json', '.eslintrc.js')\n    },\n    {\n        text: 'Install Rollup dependencies',\n        task: ({skipInstall}) => install([...BUILD_DEPENDENCIES, ...ROLLUP_DEPENDENCIES], {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && someDoExist('package.json')\n    }\n];\nexport const removeRollup = [\n    {\n        text: 'Delete Rollup configuration file',\n        task: async () => {\n            await (new RollupConfigEditor())\n                .delete()\n                .commit();\n        },\n        condition: () => someDoExist('rollup.config.js')\n    },\n    {\n        text: 'Remove Rollup build tasks from package.json',\n        task: async () => {\n            const scripts = {\n                copy: undefined,\n                'copy:assets': undefined,\n                'copy:index': undefined,\n                dev: undefined,\n                prebuild: undefined,\n                build: undefined,\n                postbuild: undefined,\n                'build:watch': undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Uninstall Rollup dependencies',\n        task: () => uninstall([...BUILD_DEPENDENCIES, ...ROLLUP_DEPENDENCIES, 'stmux']),\n        condition: ({skipInstall}) => !skipInstall && someDoExist('package.json') && (new PackageJsonEditor()).hasAll(...ROLLUP_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addRollup;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-rollup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "BUILD_DEPENDENCIES",
    "memberof": "src/commands/add-rollup.js",
    "static": true,
    "longname": "src/commands/add-rollup.js~BUILD_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-rollup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "ROLLUP_DEPENDENCIES",
    "memberof": "src/commands/add-rollup.js",
    "static": true,
    "longname": "src/commands/add-rollup.js~ROLLUP_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-rollup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "addRollup",
    "memberof": "src/commands/add-rollup.js",
    "static": true,
    "longname": "src/commands/add-rollup.js~addRollup",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-rollup.js",
    "importStyle": "{addRollup}",
    "description": "",
    "see": [
      "https://rollupjs.org/guide/en/"
    ],
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "removeRollup",
    "memberof": "src/commands/add-rollup.js",
    "static": true,
    "longname": "src/commands/add-rollup.js~removeRollup",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-rollup.js",
    "importStyle": "{removeRollup}",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "src/commands/add-rust.js",
    "content": "/* eslint-disable max-len */\nimport {arrowRight} from 'figures';\nimport {PackageJsonEditor} from '../utils';\nimport {someDoExist} from '../utils/common';\n/**\n * @type {task[]}\n * @see https://webpack.js.org/\n */\nexport const rustTasks = [\n    {\n        text: `Add Rust ${arrowRight} WASM build tasks to package.json`,\n        task: async ({assetsDirectory}) => {\n            const scripts = {\n                'build:wasm': `rustc +nightly --target wasm32-unknown-unknown -O --crate-type=cdylib ${assetsDirectory}/rust/main.rs -o ./${assetsDirectory}/rust/main.wasm`,\n                'postbuild:wasm': `wasm-gc ${assetsDirectory}/rust/main.wasm ${assetsDirectory}/rust/main.min.wasm`\n            };\n            const pkg = new PackageJsonEditor();\n            await pkg.extend({scripts}).commit();\n        },\n        condition: () => someDoExist('package.json')\n    }\n];\nexport default rustTasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-rust.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "rustTasks",
    "memberof": "src/commands/add-rust.js",
    "static": true,
    "longname": "src/commands/add-rust.js~rustTasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-rust.js",
    "importStyle": "{rustTasks}",
    "description": "",
    "see": [
      "https://webpack.js.org/"
    ],
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/commands/add-webpack.js",
    "content": "import {join} from 'path';\nimport {\n    PackageJsonEditor,\n    WebpackConfigEditor,\n    install,\n    uninstall\n} from '../utils';\nimport {allDoExist, allDoExistSync, allDoNotExist, someDoExist} from '../utils/common';\n\nconst BUILD_DEPENDENCIES = [\n    'cpy-cli',\n    'del-cli',\n    'npm-run-all'\n];\nconst WEBPACK_DEPENDENCIES = [\n    'webpack',\n    'webpack-cli',\n    'webpack-dashboard',\n    'webpack-jarvis',\n    'webpack-dev-server',\n    'babel-loader'\n];\n/**\n * @type {task[]}\n * @see https://webpack.js.org/\n */\nexport const addWebpack = [\n    {\n        text: 'Create Webpack configuration file',\n        task: async ({sourceDirectory}) => {\n            const entry = {\n                app: `'${sourceDirectory}/main.js'`\n            };\n            const resolve = {\n                modules: `[resolve(__dirname, '${sourceDirectory}'), 'node_modules']`\n            };\n            await (new WebpackConfigEditor())\n                .create()\n                .prepend(`const DashboardPlugin = require('webpack-dashboard/plugin');`)\n                .prepend(`const {resolve} = require('path');`)\n                .prepend(`/* eslint-env node */`)\n                .extend({entry, resolve})\n                .commit();\n        },\n        condition: () => allDoNotExist('webpack.config.js')\n    },\n    {\n        text: 'Add Webpack build tasks to package.json',\n        task: async ({assetsDirectory, outputDirectory, sourceDirectory}) => {\n            const scripts = {\n                copy: 'npm-run-all --parallel copy:assets copy:index',\n                'copy:assets': `cpy '${assetsDirectory}/!(css)/**/*.*' '${assetsDirectory}/**/[.]*' ${outputDirectory} --parents --recursive`,\n                'copy:index': `cpy '${assetsDirectory}/index.html' ${outputDirectory}`,\n                prebuild: `del-cli ${join(outputDirectory, assetsDirectory)}`,\n                build: 'webpack',\n                postbuild: 'npm run copy',\n                'build:watch': `watch 'npm run build' ${sourceDirectory}`,\n                'build:dashboard': 'webpack-dashboard -- webpack-dev-server --config ./webpack.config.js'\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install development dependencies and add dev task to package.json',\n        task: async ({skipInstall}) => {\n            const scripts = {\n                dev: 'stmux [ \\\"npm run build:dashboard\\\" : \\\"npm run lint:watch\\\" ]'\n            };\n            await install(['stmux'], {dev: true, skipInstall});\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json', '.eslintrc.js'),\n        optional: () => allDoExistSync('package.json', '.eslintrc.js')\n    },\n    {\n        text: 'Install Webpack and development dependencies',\n        task: ({skipInstall}) => install([...BUILD_DEPENDENCIES, ...WEBPACK_DEPENDENCIES], {dev: true, skipInstall}),\n        condition: ({isNotOffline}) => isNotOffline && someDoExist('package.json')\n    }\n];\nexport const removeWebpack = [\n    {\n        text: 'Delete Webpack configuration file',\n        task: async () => {\n            await (new WebpackConfigEditor())\n                .delete()\n                .commit();\n        },\n        condition: () => someDoExist('webpack.config.js')\n    },\n    {\n        text: 'Remove Webpack build tasks from package.json',\n        task: async () => {\n            const scripts = {\n                copy: undefined,\n                'copy:assets': undefined,\n                'copy:index': undefined,\n                dev: undefined,\n                prebuild: undefined,\n                build: undefined,\n                postbuild: undefined,\n                'build:watch': undefined,\n                'build:dashboard': undefined\n            };\n            await (new PackageJsonEditor())\n                .extend({scripts})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Uninstall Webpack dependencies',\n        task: () => uninstall([...BUILD_DEPENDENCIES, ...WEBPACK_DEPENDENCIES, 'stmux']),\n        condition: ({skipInstall}) => !skipInstall && someDoExist('package.json') && (new PackageJsonEditor()).hasAll(...WEBPACK_DEPENDENCIES),\n        optional: ({skipInstall}) => !skipInstall\n    }\n];\nexport default addWebpack;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-webpack.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "BUILD_DEPENDENCIES",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~BUILD_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "WEBPACK_DEPENDENCIES",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~WEBPACK_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "addWebpack",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~addWebpack",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": "{addWebpack}",
    "description": "",
    "see": [
      "https://webpack.js.org/"
    ],
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "removeWebpack",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~removeWebpack",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": "{removeWebpack}",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/commands/common.js",
    "content": "import {mkdirp} from 'fs-extra';\nimport {PackageJsonEditor} from '../utils';\nimport {allDoNotExist} from '../utils/common';\n\n/** @ignore */\nexport const createPackageJson = [\n    {\n        text: 'Create package.json',\n        task: async () => {\n            await (new PackageJsonEditor())\n                .create()\n                .commit();\n        },\n        condition: () => allDoNotExist('package.json')\n    }\n];\n/** @ignore */\nexport const createSourceDirectory = [\n    {\n        text: 'Create source directory',\n        task: ({sourceDirectory}) => mkdirp(sourceDirectory),\n        condition: ({sourceDirectory}) => allDoNotExist(sourceDirectory)\n    }\n];",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/common.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "createPackageJson",
    "memberof": "src/commands/common.js",
    "static": true,
    "longname": "src/commands/common.js~createPackageJson",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/common.js",
    "importStyle": "{createPackageJson}",
    "description": null,
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "createSourceDirectory",
    "memberof": "src/commands/common.js",
    "static": true,
    "longname": "src/commands/common.js~createSourceDirectory",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/common.js",
    "importStyle": "{createSourceDirectory}",
    "description": null,
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/commands/create-server/index.js",
    "content": "import {join} from 'path';\nimport {\n    EslintConfigModuleEditor,\n    PackageJsonEditor,\n    install\n} from '../../utils';\nimport {allDoExist, allDoExistSync} from '../../utils/common';\nimport {Scaffolder} from '../../utils/Scaffolder';\n\nconst DEPENDENCIES = [\n    'apollo-server-express',\n    'compression',\n    'config',\n    'cookie-session',\n    'dotenv',\n    'ejs',\n    'express',\n    'express-session',\n    'fs-extra',\n    'graphql',\n    'helmet',\n    'lusca',\n    'remarkable',\n    'highlight.js',\n    'uuid',\n    'npmlog',\n    'protocolify',\n    'ws'\n];\nconst DEV_DEPENDENCIES = [\n    'nodemon',\n    'open-cli',\n    'stmux',\n    'supertest'\n];\nconst ALWAYS = () => true;\n/**\n * @type {task[]}\n * @see https://expressjs.com/\n * @see https://github.com/websockets/ws\n * @see https://www.apollographql.com/docs/apollo-server/\n */\nexport const tasks = [\n    {\n        text: 'Copy server files',\n        task: async ({overwrite}) => {\n            await (new Scaffolder(join(__dirname, 'templates')))\n                .overwrite(overwrite)\n                .target('./')\n                .copy('.env')\n                .copy('favicon.ico')\n                .copy('_gitignore', '.gitignore')\n                .copy('index.js')\n                .copy('server.js')\n                .copy('socket.js')\n                .copy('graphql.js')\n                .target('config')\n                .copy('default.js')\n                .copy('default.js', 'test.js')\n                .target('ssl')\n                .copy('server.key')\n                .copy('server.cert')\n                .target('public')\n                .copy('index.html')\n                .copy('example.md')\n                .target('__tests__')\n                .overwrite(true)\n                .copy('example.test.js')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Configure metadata and add tasks to package.json',\n        task: async () => {\n            const description = `Node.js HTTP(S), WebSocket, and GraphQL servers with an 80% solution for security 'baked in'`;\n            const main = 'index.js';\n            const name = 'tomo-server';\n            const scripts = {\n                predev: 'npm run open',\n                dev: 'stmux [ \\\"nodemon index.js\\\" : \\\"npm run lint:watch\\\" ]',\n                prestart: 'npm audit',\n                start: `node ${main}`,\n                open: 'open-cli http://localhost:8111'\n            };\n            await (new PackageJsonEditor())\n                .extend({description, main, name, scripts})\n                .commit();\n        },\n        condition: () => allDoExist('package.json')\n    },\n    {\n        text: 'Configure .eslintrc.js for use with Node.js',\n        task: async () => {\n            const env = {\n                node: true\n            };\n            await (new EslintConfigModuleEditor())\n                .extend({env})\n                .commit();\n        },\n        condition: () => allDoExist('.eslintrc.js'),\n        optional: () => allDoExistSync('.eslintrc.js')\n    },\n    {\n        text: 'Install server dependencies',\n        task: async ({skipInstall}) => {\n            await install(DEPENDENCIES, {skipInstall});\n            await install(DEV_DEPENDENCIES, {dev: true, skipInstall});\n        },\n        condition: () => allDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/create-server/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "DEPENDENCIES",
    "memberof": "src/commands/create-server/index.js",
    "static": true,
    "longname": "src/commands/create-server/index.js~DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "DEV_DEPENDENCIES",
    "memberof": "src/commands/create-server/index.js",
    "static": true,
    "longname": "src/commands/create-server/index.js~DEV_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/create-server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/commands/create-server/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/create-server/index.js",
    "static": true,
    "longname": "src/commands/create-server/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/create-server/index.js",
    "importStyle": "{tasks}",
    "description": "",
    "see": [
      "https://expressjs.com/",
      "https://github.com/websockets/ws",
      "https://www.apollographql.com/docs/apollo-server/"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "task[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/commands/create-server/templates/default.js",
    "content": "const uuid = require('uuid/v1');\n\nmodule.exports = {\n    execMap: {\n        py: 'python',\n        rb: 'ruby'\n    },\n    session: {\n        name: 'customSessionId',\n        secret: 'Quidquid latine dictum, altum videtur',\n        genid: function() {\n            return uuid();\n        },\n        resave: false,\n        saveUninitialized: false,\n        cookie: {httpOnly: true, secure: true}\n    },\n    websocket: {\n        port: 13337\n    },\n    http: {\n        port: process.env.PORT || 8111// eslint-disable-line no-magic-numbers\n    },\n    https: {\n        port: 8443\n    },\n    graphql: {\n        port: 4669\n    },\n    log: {\n        level: 'error'\n    },\n    csp: {\n        'frame-ancestors': `'self'`,\n        'default-src': `'self'`,\n        'script-src':  `'self' cdnjs.cloudflare.com`,\n        'font-src': `'self' fonts.gstatic.com data:`\n    }\n};\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/create-server/templates/default.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "uuid",
    "memberof": "src/commands/create-server/templates/default.js",
    "static": true,
    "longname": "src/commands/create-server/templates/default.js~uuid",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/default.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "src/commands/create-server/templates/example.test.js",
    "content": "const request = require('supertest');\nconst server = require('../server');\nconst graphql = require('../graphql');\n\nconst STATUS_OK = 200;\n\ndescribe('HTTP Server', () => {\n    test('load root path', async () => {\n        const {statusCode} = await request(server).get('/');\n        expect(statusCode).toBe(STATUS_OK);\n    });\n    test('load example markdown file', async () => {\n        const {statusCode} = await request(server).get('/example.md');\n        expect(statusCode).toBe(STATUS_OK);\n    });\n});\ndescribe('GraphQL Server', () => {\n    test('load root path', async () => {\n        const {statusCode} = await request(graphql).get('/');\n        expect(statusCode).toBe(STATUS_OK);\n    });\n});",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/create-server/templates/example.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "request",
    "memberof": "src/commands/create-server/templates/example.test.js",
    "static": true,
    "longname": "src/commands/create-server/templates/example.test.js~request",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "server",
    "memberof": "src/commands/create-server/templates/example.test.js",
    "static": true,
    "longname": "src/commands/create-server/templates/example.test.js~server",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "graphql",
    "memberof": "src/commands/create-server/templates/example.test.js",
    "static": true,
    "longname": "src/commands/create-server/templates/example.test.js~graphql",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "STATUS_OK",
    "memberof": "src/commands/create-server/templates/example.test.js",
    "static": true,
    "longname": "src/commands/create-server/templates/example.test.js~STATUS_OK",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/example.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/commands/create-server/templates/graphql.js",
    "content": "/**\n * GraphQL Server\n * @see {@link https://www.apollographql.com/docs/apollo-server}\n */\nconst {ApolloServer, gql} = require('apollo-server-express');\nconst app = require('./server');\n//\n// API test data\n//\nconst authors = [\n    {id: 1, firstName: 'Tom', lastName: 'Coleman'},\n    {id: 2, firstName: 'Sashko', lastName: 'Stubailo'},\n    {id: 3, firstName: 'Mikhail', lastName: 'Novikov'}\n];\nconst posts = [\n    {id: 1, authorId: 1, title: 'Introduction to GraphQL', votes: 2},\n    {id: 2, authorId: 2, title: 'Welcome to Meteor', votes: 3},\n    {id: 3, authorId: 2, title: 'Advanced GraphQL', votes: 1},\n    {id: 4, authorId: 3, title: 'Launchpad is Cool', votes: 7}\n];\n//\n// API configuration\n//\nconst Query = gql`\n  type Query {\n    posts: [Post]\n    author(id: Int!): Author\n  }\n  `;\nconst Author = gql`\n  type Author {\n    id: Int!\n    firstName: String\n    lastName: String\n    posts: [Post]\n  }\n  `;\nconst Post = gql`\n  type Post {\n    id: Int!\n    title: String\n    author: Author\n    votes: Int\n  }\n  `;\nconst typeDefs = [Query, Author, Post];\nconst resolvers = {\n    Query: {\n        posts: () => posts,\n        author: (_, {id}) => authors.find(author => (author.id === id))\n    },\n    Author: {\n        posts: author => posts.filter(post => (post.authorId === author.id))\n    },\n    Post: {\n        author: post => authors.find(author => (author.id === post.authorId))\n    }\n};\nconst playground = {\n    endpoint: '/graphql',\n    settings: {\n        'editor.theme': 'dark'\n    }\n};\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    playground\n});\nserver.applyMiddleware({app});\n\nmodule.exports = app;\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/create-server/templates/graphql.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "ApolloServer",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~ApolloServer",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": "GraphQL Server",
    "see": [
      "{@link https://www.apollographql.com/docs/apollo-server}"
    ],
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "app",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~app",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "authors",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~authors",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "posts",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~posts",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "Query",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~Query",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "Author",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~Author",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "Post",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~Post",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "typeDefs",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~typeDefs",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "resolvers",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~resolvers",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "{\"Query\": *, \"Author\": *, \"Post\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "playground",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~playground",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "{\"endpoint\": string, \"settings\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "server",
    "memberof": "src/commands/create-server/templates/graphql.js",
    "static": true,
    "longname": "src/commands/create-server/templates/graphql.js~server",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/graphql.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/commands/create-server/templates/index.js",
    "content": "require('dotenv').config();\n\nconst config = require('config');\nconst log = require('npmlog');\nconst fs = require('fs-extra');\nconst https = require('https');\n//\n// SSL credentials\n//\nconst key = fs.readFileSync('ssl/server.key', 'utf8');\nconst cert = fs.readFileSync('ssl/server.cert', 'utf8');\n//\n// Handle error conditions\n//\nprocess.on('SIGTERM', () => {\n    log.warn('exit', 'Exited on SIGTERM');\n    process.exit(0);\n});\nprocess.on('SIGINT', () => {\n    log.warn('exit', 'Exited on SIGINT');\n    process.exit(0);\n});\nprocess.on('uncaughtException', err => {\n    log.error('uncaughtException ', err);\n    process.exit(1);\n});\n//\n// Static HTTP Server\n//\nconst app = require('./server');\napp.listen(config.get('http').port);\n//\n// Static HTTPS Server\n//\nhttps.createServer({key, cert}, app).listen(config.get('https').port);\n//\n// WebSocket Server\n//\nconst wss = require('./socket');\nwss.on('error', data => log.error(data));\n//\n// GraphQL Server\n//\nconst gql = require('./graphql');\ngql.listen(config.get('graphql').port);\n//\n// Log startup and port numbers\n//\nlog.info('HTTP server started........', 'Listening on port %j', config.get('http').port);\nlog.info('HTTPS server started.......', 'Listening on port %j', config.get('https').port);\nlog.info('WebSocket server started...', 'Listening on port %j', config.get('websocket').port);\nlog.info('GraphQL server started.....', 'Listening on port %j', config.get('graphql').port);\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/create-server/templates/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "config",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~config",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "log",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~log",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "fs",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~fs",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "https",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~https",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "key",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~key",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "cert",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~cert",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "app",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~app",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "wss",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~wss",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "gql",
    "memberof": "src/commands/create-server/templates/index.js",
    "static": true,
    "longname": "src/commands/create-server/templates/index.js~gql",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/commands/create-server/templates/socket.js",
    "content": "/**\n * WebSocket Server\n * @see {@link https://github.com/websockets/ws}\n */\nconst config = require('config');\nconst log = require('npmlog');\nconst {Server} = require('ws');\n\nconst wss = new Server({\n    app: require(`${__dirname}/server`),\n    port: config.get('websocket').port\n});\n\nwss.broadcast = data => {\n    wss.clients.forEach(client => {\n        client.send(data);\n    });\n};\nwss.on('connection', socket => {\n    log.info(`${wss.clients.length} client(s) connected.`);\n    socket.on('message', message => {\n        log.info('received: %s', message);\n        socket.send(message);\n    });\n});\n\nmodule.exports = wss;\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/create-server/templates/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "config",
    "memberof": "src/commands/create-server/templates/socket.js",
    "static": true,
    "longname": "src/commands/create-server/templates/socket.js~config",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/socket.js",
    "importStyle": null,
    "description": "WebSocket Server",
    "see": [
      "{@link https://github.com/websockets/ws}"
    ],
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "log",
    "memberof": "src/commands/create-server/templates/socket.js",
    "static": true,
    "longname": "src/commands/create-server/templates/socket.js~log",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "Server",
    "memberof": "src/commands/create-server/templates/socket.js",
    "static": true,
    "longname": "src/commands/create-server/templates/socket.js~Server",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "wss",
    "memberof": "src/commands/create-server/templates/socket.js",
    "static": true,
    "longname": "src/commands/create-server/templates/socket.js~wss",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/create-server/templates/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/commands/index.js",
    "content": "/* eslint-disable no-magic-numbers */\nimport {choose, withOptions} from '../utils';\nimport {\n    createPackageJson,\n    createSourceDirectory\n} from './common';\nimport {addA11y, removeA11y} from './add-a11y';\nimport addBabel from './add-babel';\nimport {addBrowsersync, removeBrowsersync} from './add-browsersync';\nimport addElectron from './add-electron';\nimport addEsdoc from './add-esdoc';\nimport addEslint from './add-eslint';\nimport addJest from './add-jest';\nimport addMakefile from './add-makefile';\nimport addMarionette from './add-marionette';\nimport {addParcel, removeParcel} from './add-parcel';\nimport {addPostcss, removePostcss} from './add-postcss';\nimport {addRollup, removeRollup} from './add-rollup';\nimport {addWebpack, removeWebpack} from './add-webpack';\nimport createServer from './create-server';\n\nconst createProject = [\n    ...createPackageJson,\n    ...createSourceDirectory,\n    ...addBabel,\n    ...addEslint\n];\nconst create = {\n    project: createProject,\n    app: [\n        withOptions({browser: true}),\n        ...createProject,\n        ...addPostcss,\n        ...addJest,\n        choose({\n            default: addWebpack,\n            useRollup: addRollup,\n            useParcel: addParcel\n        }),\n        choose({\n            default: addMarionette,\n            native: [\n                withOptions({\n                    outputDirectory: './dist',\n                    sourceDirectory: './renderer/src',\n                    assetsDirectory: './renderer/assets'\n                }),\n                ...addMarionette,\n                ...addElectron\n            ],\n            useReact: [] // under construction\n        }),\n        choose({\n            default: addBrowsersync,\n            native: [], // do nothing\n            useParcel: [] // do nothing\n        })\n    ],\n    server: [\n        withOptions({sourceDirectory: '.', useReact: false}),\n        ...createPackageJson,\n        ...addEslint,\n        ...addJest,\n        ...createServer\n    ]\n};\nconst add = {\n    a11y: addA11y,\n    babel: addBabel,\n    browsersync: addBrowsersync,\n    electron: addElectron,\n    esdoc: addEsdoc,\n    eslint: [\n        ...addBabel,\n        ...addEslint\n    ],\n    jest: [\n        ...addBabel,\n        ...addJest\n    ],\n    makefile: addMakefile,\n    marionette: addMarionette,\n    parcel: [\n        withOptions({useParcel: true}),\n        ...addBabel,\n        ...addParcel\n    ],\n    postcss: addPostcss,\n    rollup: [\n        ...addBabel,\n        ...addRollup\n    ],\n    webpack: [\n        ...addBabel,\n        ...addWebpack\n    ]\n};\nconst remove = {\n    a11y: removeA11y,\n    browsersync: removeBrowsersync,\n    parcel: removeParcel,\n    postcss: removePostcss,\n    rollup: removeRollup,\n    webpack: removeWebpack\n};\n\nexport default {\n    add,\n    remove,\n    create,\n    new: create// alias for create\n};\n/**\n * @typedef {Object} task\n * @property {string} text Display text for task\n * @property {function} task Task to execute\n * @property {function} condition Predicate to decide when to execute the task (true) or not (false) - can be async or sync\n * @property {function} [optional] Predicate to decide when to show the task (true) or not (false) - MUST be sync\n */",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "createProject",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~createProject",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "create",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~create",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"project\": *, \"app\": *, \"server\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "add",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~add",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "{\"a11y\": *, \"babel\": *, \"browsersync\": *, \"electron\": *, \"esdoc\": *, \"eslint\": *, \"jest\": *, \"makefile\": *, \"marionette\": *, \"parcel\": *, \"postcss\": *, \"rollup\": *, \"webpack\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "remove",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~remove",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "{\"a11y\": *, \"browsersync\": *, \"parcel\": *, \"postcss\": *, \"rollup\": *, \"webpack\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "typedef",
    "name": "task",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~task",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Display text for task"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "task",
        "description": "Task to execute"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "Predicate to decide when to execute the task (true) or not (false) - can be async or sync"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "optional",
        "description": "Predicate to decide when to show the task (true) or not (false) - MUST be sync"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "task"
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "src/index.js",
    "content": "#!/usr/bin/env node\nimport React from 'react';\nimport {cyan, dim} from 'chalk';\nimport {render} from 'ink';\nimport meow from 'meow';\nimport getStdin from 'get-stdin';\nimport Tomo from './ui';\n// import updateNotifier from 'update-notifier';\n// Notify updater\n// const pkg = require(`../package.json`);\n// updateNotifier({pkg}).notify();\n\nconst help = `\n\t${dim.bold('Usage')}\n\t\t$ ${cyan('tomo [command] [term] [options]')}\n\n\t${dim.bold('Options')}\n\n        --source-directory, -d  Directory for source code [Default: ./src]\n        --output-directory, -o  Directory for build targets [Default: ./dist]\n        --assets-directory, -a  Directory for assets [Default: ./assets]\n        --use-rollup,           Use Rollup instead of Webpack [Default: false]\n        --use-parcel,           Use Parcel instead of Webpack [Default: false]\n        --use-react, -r         Add React support to workflow [Default: false]\n        --react-version         React version for ESLint configuration [Default: '16.8']\n        --ignore-warnings, -i   Ignore warning messages [Default: false]\n        --skip-install, -s      Skip npm installations [Default: false]\n        --overwrite             Copy files, even if they alrady exist [Default: false]\n        --browser               Indicate tasks are intended for the browser [Default: false]\n        --debug                 Show debug data [Default: false]\t\n`;\nconst options = {\n    help,\n    flags: {\n        sourceDirectory: {\n            type: 'string',\n            default: './src',\n            alias: 'd'\n        },\n        outputDirectory: {\n            type: 'string',\n            default: './dist',\n            alias: 'o'\n        },\n        assetsDirectory: {\n            type: 'string',\n            default: './assets',\n            alias: 'a'\n        },\n        useRollup: {\n            type: 'boolean',\n            default: false\n        },\n        useParcel: {\n            type: 'boolean',\n            default: false\n        },\n        useReact: {\n            type: 'boolean',\n            default: false,\n            alias: 'r'\n        },\n        reactVersion: {\n            type: 'string',\n            default: '16.8'\n        },\n        ignoreWarnings: {\n            type: 'boolean',\n            default: false,\n            alias: 'i'\n        },\n        skipInstall: {\n            type: 'boolean',\n            default: false,\n            alias: 's'\n        },\n        browser: {\n            type: 'boolean',\n            default: false\n        },\n        overwrite: {\n            type: 'boolean',\n            default: false\n        },\n        debug: {\n            type: 'boolean',\n            default: false\n        }\n    }\n};\nconst cli = meow(options);\nconst {input, flags} = cli;\n(async () => {\n    const stdin = await getStdin();\n    render(<Tomo input={input} flags={flags} stdin={stdin}/>, {exitOnCtrlC: true});\n})();",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "help",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~help",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "options",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~options",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"help\": *, \"flags\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "cli",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~cli",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "input",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~input",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "src/ui.js",
    "content": "import React, {Component, Fragment, useContext, useEffect, useReducer, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport camelCase from 'lodash/camelCase';\nimport isFunction from 'lodash/isFunction';\nimport isString from 'lodash/isString';\nimport isUndefined from 'lodash/isUndefined';\nimport negate from 'lodash/negate';\nimport {bold, dim} from 'chalk';\nimport Queue from 'p-queue';\nimport pino from 'pino';\nimport isOnline from 'is-online';\nimport {Box, Color, StdinContext, Text} from 'ink';\nimport {default as InkBox} from 'ink-box';\nimport Spinner from 'ink-spinner';\nimport SelectInput from 'ink-select-input';\nimport figures from 'figures';\nimport {highlight} from 'cardinal';\nimport commands from './commands';\nimport {isValidTask, getIntendedInput} from './utils';\nimport {dict, format, maybeApply} from './utils/common';\n\nconst {assign} = Object;\nconst space = ' ';\nconst Check = ({isSkipped}) => <Color bold green={!isSkipped} dim={isSkipped}>{figures.tick}{space}</Color>;\nconst X = () => <Color bold red>{figures.cross}{space}</Color>;\nconst Pending = () => <Color cyan><Spinner></Spinner>{space}</Color>;\nconst Item = ({isSelected, label}) => <Color bold={isSelected} cyan={isSelected}>{label}</Color>;\nconst Indicator = ({isSelected}) => <Box marginRight={1}>{isSelected ? <Color bold cyan>{figures.arrowRight}</Color> : ' '}</Box>;\nexport const CommandError = errors => {\n    const log = pino(\n        {prettyPrint: {levelFirst: true}},\n        pino.destination('./tomo-errors.txt')\n    );\n    useEffect(() => {\n        log.error(errors);\n    }, []);\n    return <Box flexDirection={'column'} marginTop={1} marginLeft={1}>\n        <Box><X /><Text>Something has gone horribly <Color bold red>wrong</Color></Text></Box>\n        <Box marginLeft={2}>↳{space}<Color dim>Details written to ./tomo-errors.txt</Color></Box>\n    </Box>;\n};\nexport const Debug = ({data, title}) => <Box flexDirection={'column'} marginTop={1} marginLeft={1}>\n    <Box>\n        <Color bold cyan>DEBUG: </Color>\n        <Color dim>{title}</Color>\n    </Box>\n    <Box>\n        {highlight(format(data))}\n    </Box>\n</Box>;\nconst Description = ({command}) => {\n    const getDescription = item => {\n        const DEFAULT = `${dim('Sorry, I don\\'t have anything to say about')} ${item}`;\n        const lookup = dict({\n            project: `Scaffold a new Node.js project with ${bold.yellow('Babel')}, ${bold('ESLint')}, and ${bold.magenta('Jest')}`,\n            app: `Scaffold a new ${bold.red('Marionette.js')} ${bold('web application')} - basically a project with CSS, bundling, and stuff`,\n            server: `Scaffold Node.js WebSocket, GraphQL, and HTTP(S) servers with an 80% solution for security \"baked in\"`,\n            a11y: `Add automated ${bold('accessibility')} testing`,\n            babel: `Use next generation JavaScript, ${bold('today!')}`,\n            browsersync: `Time-saving ${bold('synchronised browser')} testing (demo your app with ${bold.yellow('live-reload')})`,\n            electron: `Create a ${bold('native desktop application')} using web technologies`,\n            esdoc: `Generate ${bold('documentation')} from your comments`,\n            eslint: `Pluggable ${bold('linting')} utility for JavaScript and JSX`,\n            jest: `Delightful JavaScript ${bold('Testing')} Framework with a focus on simplicity`,\n            makefile: `Create a ${bold('Makefile')} from your package.json, like ${bold.magenta('magic!')}`,\n            marionette: `${bold('Flexible Backbone framework')} with robust views and architecture solutions`,\n            parcel: `${bold('Bundle')} your assets (${bold.red('blazing')} fast with ${bold.white('zero configuration')})`,\n            postcss: `Use ${bold('future CSS')}, never write vendor prefixes again, and much much more!`,\n            rollup: `${bold('Bundle')} your assets (focused on ${bold('ES6')} modules and tree shaking)`,\n            webpack: `${bold('Bundle')} your assets (with great support and a rich ecosystem)`\n        });\n        return lookup.has(item) ? lookup.get(item) : DEFAULT;\n    };\n    return <Box marginBottom={1}>\n        <Color cyan>{getDescription(command)}</Color>\n    </Box>;\n};\nconst ErrorMessage = ({info}) => <Box flexDirection={'column'} marginBottom={1}>\n    <InkBox borderColor={'yellow'} margin={{left: 1, top: 1}} padding={{left: 1, right: 1}}>\n        <Color yellow>(╯°□ °)╯ ┻━┻ arrrgh...</Color>\n    </InkBox>\n    <Box marginLeft={4}>\n        ↳{space}<Color dim>Something went wrong...</Color>\n    </Box>\n    <Box marginLeft={6} marginTop={1}>\n        <Color dim><Box>{info}</Box></Color>\n    </Box>\n</Box>;\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            info: '',\n            error: {},\n            hasError: false\n        };\n    }\n    static getDerivedStateFromError() {\n        return {hasError: true};\n    }\n    componentDidCatch(error, info) {\n        this.setState({error, info});\n    }\n    render() {\n        const {error, hasError} = this.state;\n        const {children} = this.props;\n        return hasError ? <ErrorMessage error={error}/> : children;\n    }\n}\nconst SubCommandSelect = ({command, items, onSelect}) => {\n    const [highlighted, setHighlighted] = useState(items[0].value);\n    const onHighlight = item => {\n        setHighlighted(item.value);\n    };\n    const showWithRemove = `${bold.yellow('CAUTION:')} tomo shall ${bold.red('remove')} that which tomo would have ${bold.green('added')}`;\n    return <Box flexDirection={'column'} paddingTop={1} paddingBottom={1} paddingLeft={1}>\n        {command === 'remove' ? <Box marginBottom={1}>{showWithRemove}</Box> : <Description command={highlighted}></Description>}\n        <SelectInput\n            items={items}\n            onSelect={onSelect}\n            onHighlight={onHighlight}\n            itemComponent={Item}\n            indicatorComponent={Indicator}\n        ></SelectInput>\n    </Box>;\n};\nconst UnderConstruction = () => <Box marginBottom={1}>\n    <InkBox padding={{left: 1, right: 1}} margin={{left: 1, top: 1}}>\n        <Color bold yellow>UNDER CONSTRUCTION</Color>\n    </InkBox>\n</Box>;\n/**\n * Component to display warning message requiring user input\n * @param {Object} props Function component props\n * @param {ReactNode} props.children Function component children\n * @param {function} props.callback Function to be called after user interacts with warning\n * @return {ReactComponent} Warning component\n */\nexport const Warning = ({callback, children}) => {\n    const {setRawMode, stdin} = useContext(StdinContext);\n    useEffect(() => {\n        setRawMode && setRawMode(true);\n        stdin.on('data', callback);\n        return function cleanup() {\n            stdin.removeListener('data', callback);\n            setRawMode && setRawMode(false);\n        };\n    });\n    return <Box flexDirection={'column'} marginBottom={1}>\n        <InkBox borderColor={'yellow'} margin={{left: 1, top: 1}} padding={{left: 1, right: 1}}>\n            <Color yellow>oops...</Color>\n        </InkBox>\n        <Box marginLeft={4}>\n            ↳{space}{children}\n        </Box>\n        <Box marginLeft={6} marginTop={1}>\n            <Color dim>Press </Color><Text bold>ENTER</Text><Color dim> to continue</Color>\n        </Box>\n    </Box>;\n};\nexport const OfflineWarning = () => <Box flexDirection={'column'} marginBottom={1}>\n    <InkBox borderColor={'yellow'} margin={{left: 1, top: 1}} padding={{left: 1, right: 1}}>\n        <Color yellow>(⌒_⌒;) This is awkward...</Color>\n    </InkBox>\n    <Box marginLeft={4} flexDirection={'column'}>\n        <Box>↳{space}<Text>...you appear to be <Color bold red>offline</Color></Text></Box>\n        <Box>↳{space}<Text>Please connect to the internet and <Color bold cyan>try again</Color></Text></Box>\n    </Box>\n    <Box marginLeft={6} marginTop={1}>\n        <Color dim>No dependencies will be installed</Color>\n    </Box>\n</Box>;\nexport const Status = ({tasks, completed, skipped}) => {\n    const tasksComplete = (completed.length + skipped.length) === tasks.length;\n    return <Box flexDirection={'column'}>\n        <Box marginLeft={4} marginBottom={1}>\n            <Color dim>↳{space}</Color>\n            {tasksComplete ?\n                <Color bold green>All Done!</Color> :\n                <Fragment>\n                    <Color dim>Finished </Color>\n                    <Color bold white>{completed.length}</Color>\n                    <Color bold dim> of </Color>\n                    <Color bold white>{tasks.length - skipped.length}</Color>\n                    <Color dim> tasks</Color>\n                </Fragment>\n            }\n            <Color dim> (</Color>\n            <Color bold>{completed.length}</Color>\n            <Color dim> completed, </Color>\n            <Color bold>{skipped.length}</Color>\n            <Color dim> skipped</Color>\n            <Color>)</Color>\n        </Box>\n    </Box>;\n};\nexport const WarningAndErrorsHeader = ({errors, hasError, isOnline, options: {skipInstall}}) => <Fragment>\n    {!isOnline && !skipInstall && <OfflineWarning/>}\n    {hasError && <CommandError errors={errors}></CommandError>}\n</Fragment>;\n/**\n * Add async tasks to a queue, handle completion with actions dispatched via dispatch function\n * @param {Object} data Data to be used for populating queue\n * @param {Queue} [data.queue={}] p-queue instance\n * @param {Object[]} [data.tasks=[]] Array of task objects\n * @param {function} [data.dispatch=()=>{}] Function to dispatch task completion (complete, skip, error) actions\n * @param {Object} [data.options={}] Options object to pass to task function\n * @return {undefined} Returns nothing (side effects only)\n */\nexport async function populateQueue(data = {queue: {}, tasks: [], dispatch: () => {}, options: {skipInstall: false}}) {\n    const {queue, tasks, dispatch, options} = data;\n    const {skipInstall} = options;\n    const isNotOffline = skipInstall || await isOnline();\n    const customOptions = tasks\n        .filter(negate(isValidTask))\n        .reduce((acc, val) => ({...acc, ...val}), {});\n    dispatch({type: 'status', payload: {online: isNotOffline}});\n    for (const [index, item] of tasks.filter(isValidTask).entries()) {\n        const {condition, task} = item;\n        try {\n            if (await condition({...options, ...customOptions, isNotOffline})) {\n                await queue\n                    .add(() => task({...options, ...customOptions, isNotOffline}))\n                    .then(() => dispatch({type: 'complete', payload: index}))\n                    .catch(() => dispatch({\n                        type: 'error', payload: {\n                            index,\n                            title: 'Failed to add task to queue',\n                            location: 'task',\n                            details: item.text\n                        }\n                    }));\n            } else {\n                dispatch({type: 'skipped', payload: index});\n            }\n        } catch (error) {\n            dispatch({\n                type: 'error',\n                payload: {\n                    error,\n                    index,\n                    title: 'Failed to test task conditions',\n                    location: 'condition',\n                    details: item.text\n                }\n            });\n        }\n    }\n}\n/**\n * Task component\n * @param {Object} props Function component props\n * @param {boolean} props.isComplete Control display of check (true) or loading (false)\n * @param {boolean} props.isErrored Control display of x (true)\n * @param {boolean} props.isSkipped Control color of check - green (false) or dim (true)\n * @param {string} props.text Task text\n * @example\n * <Task text={'This task is done before it starts'} isComplete={true}></Task>\n * @return {ReactComponent} Task component\n */\nexport const Task = ({isComplete, isErrored, isPending, isSkipped, text}) => <Box flexDirection='row' marginLeft={3}>\n    {isComplete && <Check isSkipped={isSkipped}></Check>}\n    {isErrored && <X/>}\n    {isPending && <Pending/>}\n    <Text><Color dim={isComplete}>{text}</Color></Text>\n</Box>;\nexport const Tasks = ({debug, options, state, tasks}) => <Box flexDirection='column' marginBottom={1}>\n    {tasks.map(({optional, text}, index) => {\n        const {completed, errors, skipped} = state;\n        const key = camelCase(text);\n        const isSkipped = skipped.includes(index);\n        const isComplete = completed.includes(index) || isSkipped;\n        const isErrored = errors.map(error => error.payload.index).includes(index);\n        const isPending = [isComplete, isSkipped, isErrored].every(val => !val);\n        const maybeApplyOrReturnTrue = (val, options) => isUndefined(val) || (isFunction(val) && val(options));\n        const shouldBeShown = maybeApplyOrReturnTrue(optional, options);\n        const data = {isSkipped, isComplete, isErrored, isPending, text};\n        const showDebug = debug && <Debug data={data} title={`Data - task #${index}`}></Debug>;\n        const isCurrentOrPrevious = (index - 1) <= Math.max(...[...completed, ...skipped]);\n        return (isCurrentOrPrevious && shouldBeShown) ?\n            <Fragment key={key}>{showDebug}<Task\n                text={text}\n                isSkipped={isSkipped}\n                isComplete={isComplete}\n                isErrored={isErrored}\n                isPending={isPending}>\n            </Task></Fragment> :\n            <Fragment key={key}>{showDebug}<Box></Box></Fragment>;\n    })}\n</Box>;\nexport const TaskListTitle = ({command, hasError, isComplete, terms}) => <InkBox\n    margin={{left: 1, top: 1}}\n    padding={{left: 1, right: 1}}\n    borderColor={isComplete ? 'green' : (hasError ? 'red' : 'cyan')}\n    borderStyle={'round'}>\n    <Color bold white>{command} {terms.join(' ')}</Color>\n</InkBox>;\n/**\n * Task list component\n * @param {Object} props Function component props\n * @param {string} props.command Command - new | create | add\n * @param {Object} props.options Command line flags (see help)\n * @param {string[]} props.terms Terms - eslint | babel | jest | postcss | docs\n * @example\n * <TaskList command={'add'} terms={'eslint'} options={{skipInstall: true}}></TaskList>\n * @return {ReactComponent} Task list component\n */\nexport const TaskList = ({command, options, terms, done}) => {\n    const reducer = (state, {type, payload}) => {\n        const {completed, errors, skipped} = state;\n        const update = val => assign({}, state, val);\n        const lookup = dict({\n            complete: () => update({completed: [...completed, payload]}),\n            skipped: () => update({skipped: [...skipped, payload]}),\n            error: () => update({errors: [...errors, {payload}]}),\n            status: () => update({status: payload})\n        });\n        return lookup.has(type) ? lookup.get(type)() : state;\n    };\n    const initialState = {\n        completed: [],\n        skipped: [],\n        errors: [],\n        status: {online: true}\n    };\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const {completed, errors, skipped, status: {online}} = state;\n    const queue = new Queue({concurrency: 1});\n    const tasks = terms\n        .flatMap(term => commands[command][term])\n        .flatMap(val => maybeApply(val, options))\n        .flatMap(val => maybeApply(val, options));\n    const validTasks = tasks.filter(isValidTask);\n    const tasksComplete = ((completed.length + skipped.length) === validTasks.length);\n    const hasError = (errors.length > 0);\n    const {debug} = options;\n    const data = {completed, errors, skipped, tasks, terms};\n    useEffect(() => {\n        populateQueue({queue, tasks, options, dispatch});\n    }, []);\n    tasksComplete && maybeApply(done);\n    return <ErrorBoundary>\n        {debug && <Debug data={data} title={'Tasklist data'}></Debug>}\n        <WarningAndErrorsHeader errors={errors} hasError={hasError} isOnline={online} options={options}></WarningAndErrorsHeader>\n        <Box flexDirection={'column'} marginBottom={1}>\n            <TaskListTitle command={command} hasError={hasError} isComplete={tasksComplete} terms={terms}></TaskListTitle>\n            <Status completed={completed} skipped={skipped} tasks={validTasks}></Status>\n            <Tasks debug={debug} options={options} state={state} tasks={validTasks}></Tasks>\n        </Box>\n    </ErrorBoundary>;\n};\n/**\n * Main tomo UI component\n * @param {Object} props Component props\n * @return {ReactComponent} Main tomo UI component\n */\nclass UI extends Component {\n    constructor(props) {\n        super(props);\n        const {flags, input} = props;\n        const {ignoreWarnings} = flags;\n        const [command, ...terms] = input;\n        const hasCommand = isString(command);\n        const hasTerms = terms.length > 0;\n        const {intendedCommand, intendedTerms} = hasCommand ? getIntendedInput(commands, command, terms) : {};\n        const compare = (term, index) => (term !== terms[index]);\n        const showWarning = ((command !== intendedCommand) || (hasTerms && intendedTerms.map(compare).some(Boolean))) && !ignoreWarnings;\n        this.state = {\n            hasTerms,\n            hasCommand,\n            showWarning,\n            intendedTerms,\n            intendedCommand\n        };\n        this.updateWarning = this.updateWarning.bind(this);\n        this.updateTerms = this.updateTerms.bind(this);\n    }\n    render() {\n        const {done, flags} = this.props;\n        const {hasCommand, hasTerms, intendedCommand, intendedTerms, showWarning} = this.state;\n        return <ErrorBoundary>\n            {showWarning ?\n                <Warning callback={this.updateWarning}>\n                    <Text>Did you mean <Color bold green>{intendedCommand} {intendedTerms.join(' ')}</Color>?</Text>\n                </Warning> :\n                (hasCommand && hasTerms) ?\n                    <TaskList command={intendedCommand} terms={intendedTerms} options={flags} done={done}></TaskList> :\n                    hasCommand ?\n                        <SubCommandSelect\n                            command={intendedCommand}\n                            items={Object.keys(commands[intendedCommand]).map(command => ({label: command, value: command}))}\n                            onSelect={this.updateTerms}>\n                        </SubCommandSelect> :\n                        <UnderConstruction/>\n            }\n        </ErrorBoundary>;\n    }\n    /**\n     * Callback function for warning component\n     * @param {string} data Character data from stdin\n     * @return {undefined} Returns nothing\n     */\n    updateWarning(data) {\n        const key = String(data);\n        (key === '\\r') ? this.setState({showWarning: false}) : process.exit(0);\n    }\n    /**\n     * @param {Object} args Function options\n     * @param {string} args.value Intended term\n     * @return {undefined} Returns nothing\n     */\n    updateTerms({value}) {\n        this.setState({\n            hasTerms: true,\n            intendedTerms: [value]\n        });\n    }\n}\nCheck.propTypes = {\n    isSkipped: PropTypes.bool\n};\nCheck.defaultProps = {\n    isSkipped: false\n};\nDebug.propTypes = {\n    data: PropTypes.any,\n    title: PropTypes.string\n};\nDescription.propTypes = {\n    command: PropTypes.string\n};\nSubCommandSelect.propTypes = {\n    command: PropTypes.string,\n    items: PropTypes.arrayOf(PropTypes.object),\n    onSelect: PropTypes.func\n};\nIndicator.propTypes = {\n    isSelected: PropTypes.bool\n};\nIndicator.defaultProps = {\n    isSelected: false\n};\nItem.propTypes = {\n    isSelected: PropTypes.bool,\n    label: PropTypes.string.isRequired\n};\nItem.defaultProps = {\n    isSelected: false\n};\nErrorMessage.propTypes = {\n    info: PropTypes.string\n};\nErrorBoundary.propTypes = {\n    children: PropTypes.node\n};\nStatus.propTypes = {\n    completed: PropTypes.array,\n    skipped: PropTypes.array,\n    tasks: PropTypes.arrayOf(PropTypes.object)\n};\nTask.propTypes = {\n    isComplete: PropTypes.bool,\n    isErrored: PropTypes.bool,\n    isSkipped: PropTypes.bool,\n    isPending: PropTypes.bool,\n    text: PropTypes.string\n};\nTask.defaultProps = {\n    isComplete: false,\n    isErrored: false,\n    isSkipped: false,\n    isPending: false,\n    text: 'task description'\n};\nTaskList.propTypes = {\n    command: PropTypes.string,\n    options: PropTypes.any,\n    terms: PropTypes.arrayOf(PropTypes.string),\n    done: PropTypes.func\n};\nTaskList.defaultProps = {\n    command: '',\n    options: {skipInstall: false},\n    terms: []\n};\nTaskListTitle.propTypes = {\n    command: PropTypes.string,\n    hasError: PropTypes.bool,\n    isComplete: PropTypes.bool,\n    terms: PropTypes.arrayOf(PropTypes.string)\n};\nTasks.propTypes = {\n    debug: PropTypes.bool,\n    options: PropTypes.object,\n    state: PropTypes.object,\n    tasks: PropTypes.arrayOf(PropTypes.object)\n};\nWarning.propTypes = {\n    callback: PropTypes.func,\n    children: PropTypes.node\n};\nWarningAndErrorsHeader.propTypes = {\n    errors: PropTypes.array,\n    hasError: PropTypes.bool,\n    isOnline: PropTypes.bool,\n    options: PropTypes.object\n};\nUI.propTypes = {\n    input: PropTypes.array,\n    flags: PropTypes.object,\n    done: PropTypes.func,\n    stdin: PropTypes.string\n};\nUI.defaultProps = {\n    input: [],\n    flags: {}\n};\nexport default UI;\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/ui.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/ui.js",
    "static": true,
    "longname": "src/ui.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "space",
    "memberof": "src/ui.js",
    "static": true,
    "longname": "src/ui.js~space",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "Check",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Check",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isSkipped\": *}"
        ],
        "defaultRaw": {
          "isSkipped": null
        },
        "defaultValue": "{\"isSkipped\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "X",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~X",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "Pending",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Pending",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "Item",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Item",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isSelected\": *, \"label\": *}"
        ],
        "defaultRaw": {
          "isSelected": null,
          "label": null
        },
        "defaultValue": "{\"isSelected\":null,\"label\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "Indicator",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Indicator",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isSelected\": *}"
        ],
        "defaultRaw": {
          "isSelected": null
        },
        "defaultValue": "{\"isSelected\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "CommandError",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~CommandError",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{CommandError}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "errors",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "Debug",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Debug",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{Debug}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"data\": *, \"title\": *}"
        ],
        "defaultRaw": {
          "data": null,
          "title": null
        },
        "defaultValue": "{\"data\":null,\"title\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "Description",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Description",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"command\": *}"
        ],
        "defaultRaw": {
          "command": null
        },
        "defaultValue": "{\"command\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "ErrorMessage",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~ErrorMessage",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"info\": *}"
        ],
        "defaultRaw": {
          "info": null
        },
        "defaultValue": "{\"info\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "class",
    "name": "ErrorBoundary",
    "memberof": "src/ui.js",
    "static": true,
    "longname": "src/ui.js~ErrorBoundary",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ui.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~ErrorBoundary#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "state",
    "memberof": "src/ui.js~ErrorBoundary",
    "static": false,
    "longname": "src/ui.js~ErrorBoundary#state",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "{\"info\": *, \"error\": *, \"hasError\": *}"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "getDerivedStateFromError",
    "memberof": "src/ui.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~ErrorBoundary.getDerivedStateFromError",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"hasError\": boolean}"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "componentDidCatch",
    "memberof": "src/ui.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~ErrorBoundary#componentDidCatch",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "render",
    "memberof": "src/ui.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~ErrorBoundary#render",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "SubCommandSelect",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~SubCommandSelect",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"command\": *, \"items\": *, \"onSelect\": *}"
        ],
        "defaultRaw": {
          "command": null,
          "items": null,
          "onSelect": null
        },
        "defaultValue": "{\"command\":null,\"items\":null,\"onSelect\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "UnderConstruction",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~UnderConstruction",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "Warning",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Warning",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{Warning}",
    "description": "Component to display warning message requiring user input",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Function component props"
      },
      {
        "nullable": null,
        "types": [
          "ReactNode"
        ],
        "spread": false,
        "optional": false,
        "name": "props.children",
        "description": "Function component children"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "props.callback",
        "description": "Function to be called after user interacts with warning"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactComponent"
      ],
      "spread": false,
      "description": "Warning component"
    }
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "OfflineWarning",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~OfflineWarning",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{OfflineWarning}",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "Status",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Status",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{Status}",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"tasks\": *, \"completed\": *, \"skipped\": *}"
        ],
        "defaultRaw": {
          "tasks": null,
          "completed": null,
          "skipped": null
        },
        "defaultValue": "{\"tasks\":null,\"completed\":null,\"skipped\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "WarningAndErrorsHeader",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~WarningAndErrorsHeader",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{WarningAndErrorsHeader}",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"errors\": *, \"hasError\": *, \"isOnline\": *, \"options\": *}"
        ],
        "defaultRaw": {
          "errors": null,
          "hasError": null,
          "isOnline": null,
          "options": null
        },
        "defaultValue": "{\"errors\":null,\"hasError\":null,\"isOnline\":null,\"options\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "populateQueue",
    "memberof": "src/ui.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/ui.js~populateQueue",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{populateQueue}",
    "description": "Add async tasks to a queue, handle completion with actions dispatched via dispatch function",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data to be used for populating queue"
      },
      {
        "nullable": null,
        "types": [
          "Queue"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "data.queue",
        "description": "p-queue instance"
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "data.tasks",
        "description": "Array of task objects"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "data.dispatch",
        "description": "Function to dispatch task completion (complete, skip, error) actions"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "data.options",
        "description": "Options object to pass to task function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "Returns nothing (side effects only)"
    }
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "Task",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Task",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{Task}",
    "description": "Task component",
    "examples": [
      "<Task text={'This task is done before it starts'} isComplete={true}></Task>"
    ],
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Function component props"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.isComplete",
        "description": "Control display of check (true) or loading (false)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.isErrored",
        "description": "Control display of x (true)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.isSkipped",
        "description": "Control color of check - green (false) or dim (true)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.text",
        "description": "Task text"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactComponent"
      ],
      "spread": false,
      "description": "Task component"
    }
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "Tasks",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{Tasks}",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"debug\": *, \"options\": *, \"state\": *, \"tasks\": *}"
        ],
        "defaultRaw": {
          "debug": null,
          "options": null,
          "state": null,
          "tasks": null
        },
        "defaultValue": "{\"debug\":null,\"options\":null,\"state\":null,\"tasks\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "TaskListTitle",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~TaskListTitle",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{TaskListTitle}",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"command\": *, \"hasError\": *, \"isComplete\": *, \"terms\": *}"
        ],
        "defaultRaw": {
          "command": null,
          "hasError": null,
          "isComplete": null,
          "terms": null
        },
        "defaultValue": "{\"command\":null,\"hasError\":null,\"isComplete\":null,\"terms\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "TaskList",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~TaskList",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{TaskList}",
    "description": "Task list component",
    "examples": [
      "<TaskList command={'add'} terms={'eslint'} options={{skipInstall: true}}></TaskList>"
    ],
    "lineNumber": 308,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Function component props"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.command",
        "description": "Command - new | create | add"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.options",
        "description": "Command line flags (see help)"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "props.terms",
        "description": "Terms - eslint | babel | jest | postcss | docs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactComponent"
      ],
      "spread": false,
      "description": "Task list component"
    }
  },
  {
    "__docId__": 210,
    "kind": "class",
    "name": "UI",
    "memberof": "src/ui.js",
    "static": true,
    "longname": "src/ui.js~UI",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "UI",
    "description": "Main tomo UI component",
    "lineNumber": 357,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component props"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactComponent"
      ],
      "spread": false,
      "description": "Main tomo UI component"
    },
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 211,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ui.js~UI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~UI#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 358,
    "undocument": true
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "state",
    "memberof": "src/ui.js~UI",
    "static": false,
    "longname": "src/ui.js~UI#state",
    "access": "public",
    "description": null,
    "lineNumber": 368,
    "undocument": true,
    "type": {
      "types": [
        "{\"hasTerms\": *, \"hasCommand\": *, \"showWarning\": *, \"intendedTerms\": *, \"intendedCommand\": *}"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "render",
    "memberof": "src/ui.js~UI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~UI#render",
    "access": "public",
    "description": null,
    "lineNumber": 378,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "updateWarning",
    "memberof": "src/ui.js~UI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~UI#updateWarning",
    "access": "public",
    "description": "Callback function for warning component",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Character data from stdin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "Returns nothing"
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "updateTerms",
    "memberof": "src/ui.js~UI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~UI#updateTerms",
    "access": "public",
    "description": "",
    "lineNumber": 412,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Function options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.value",
        "description": "Intended term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "Returns nothing"
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "src/utils/BasicEditor.js",
    "content": "import {join} from 'path';\nimport Queue from 'p-queue';\nimport memFs from 'mem-fs';\nimport editor from 'mem-fs-editor';\n\nconst {assign} = Object;\n/**\n * Base class to serve as base for JSON and module builder classes\n */\nexport class BasicEditor {\n    constructor() {\n        const fs = editor.create(memFs.create());\n        const queue = new Queue({concurrency: 1});\n        assign(this, {fs, queue});\n    }\n    /**\n     *\n     * @param {string} destination Destination to copy file\n     * @return {BasicEditor} Chaining OK\n     */\n    copy(destination) {\n        const self = this;\n        const {fs, path, queue} = self;\n        const [filename] = path.split('/').reverse();\n        queue.add(() => fs.copy(path, join(destination, filename)));\n        return self;\n    }\n    /**\n     * @return {BasicEditor} Chaining OK\n     */\n    delete() {\n        const self = this;\n        const {fs, path, queue} = self;\n        queue.add(() => fs.delete(path));\n        return self;\n    }\n    done() {\n        return this.queue.onEmpty();\n    }\n    /**\n     * Write changes to disk\n     * @return {Promise} Resolves when queue is empty\n     */\n    async commit() {\n        const {fs} = this;\n        await new Promise(resolve => fs.commit(resolve));\n        await this.done();\n    }\n}\nexport default BasicEditor;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/utils/BasicEditor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils/BasicEditor.js",
    "static": true,
    "longname": "src/utils/BasicEditor.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/BasicEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "class",
    "name": "BasicEditor",
    "memberof": "src/utils/BasicEditor.js",
    "static": true,
    "longname": "src/utils/BasicEditor.js~BasicEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/BasicEditor.js",
    "importStyle": "{BasicEditor}",
    "description": "Base class to serve as base for JSON and module builder classes",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 221,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "copy",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#copy",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": "Destination to copy file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BasicEditor"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "delete",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#delete",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "return": {
      "nullable": null,
      "types": [
        "BasicEditor"
      ],
      "spread": false,
      "description": "Chaining OK"
    },
    "params": []
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "done",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#done",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "commit",
    "memberof": "src/utils/BasicEditor.js~BasicEditor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/BasicEditor.js~BasicEditor#commit",
    "access": "public",
    "description": "Write changes to disk",
    "lineNumber": 44,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when queue is empty"
    },
    "params": []
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "src/utils/Scaffolder.js",
    "content": "import {join} from 'path';\nimport isString from 'lodash/isString';\nimport Queue from 'p-queue';\nimport memFs from 'mem-fs';\nimport editor from 'mem-fs-editor';\n\nconst {assign} = Object;\nconst silent = () => {};\n/**\n * Class to create scaffolders when creating folders, and copying files/templates\n * @example\n * import {Scaffolder} from './utils';\n * const scaffolder = new Scaffolder('path/to/templates');\n * await scaffolder\n *     .target('/path/to/copy/files')\n *     .copy('foo.js')\n *     .copy('bar.js')\n *     .commit();\n */\nexport class Scaffolder {\n    /**\n     * @param {string} sourceDirectory Source directory for template files\n     */\n    constructor(sourceDirectory = './templates') {\n        const copyIfExists = false;\n        const targetDirectory = './';\n        const fs = editor.create(memFs.create());\n        const queue = new Queue({concurrency: 1});\n        assign(this, {copyIfExists, fs, queue, sourceDirectory, targetDirectory});\n    }\n    /**\n     * Set target directory\n     * @param {string} targetDirectory Target directory of template files\n     * @returns {Scaffolder} Chaining OK\n     */\n    target(targetDirectory) {\n        return assign(this, {targetDirectory});\n    }\n    /**\n     * Set overwrite flag\n     * @param {boolean} flag Overwrite files (true) or not (false)\n     * @returns {Scaffolder} Chaining OK\n     */\n    overwrite(flag) {\n        return assign(this, {copyIfExists: flag});\n    }\n    /**\n     * Copy a file\n     * @param {string} path Path string of file to be copied\n     * @param {string} [filename] Name for copied file\n     * @returns {Scaffolder} Chaining OK\n     */\n    copy(path, filename) {\n        const self = this;\n        const {copyIfExists, fs, queue, sourceDirectory, targetDirectory} = self;\n        const source = join(sourceDirectory, path);\n        const target = join(process.cwd(), targetDirectory, ...(isString(filename) ? filename : path).split('/'));\n        const shouldCopy = !fs.exists(target) || copyIfExists;\n        shouldCopy && queue.add(() => fs.copy(source, target)).catch(silent);\n        return self;\n    }\n    /**\n     * Write changes to disk\n     * @return {Promise} Resolves when queue is empty\n     */\n    async commit() {\n        const {fs, queue} = this;\n        await new Promise(resolve => fs.commit(resolve));\n        await queue.onEmpty();\n    }\n}\nexport default Scaffolder;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/utils/Scaffolder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils/Scaffolder.js",
    "static": true,
    "longname": "src/utils/Scaffolder.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/Scaffolder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "silent",
    "memberof": "src/utils/Scaffolder.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Scaffolder.js~silent",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/Scaffolder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "class",
    "name": "Scaffolder",
    "memberof": "src/utils/Scaffolder.js",
    "static": true,
    "longname": "src/utils/Scaffolder.js~Scaffolder",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/Scaffolder.js",
    "importStyle": "{Scaffolder}",
    "description": "Class to create scaffolders when creating folders, and copying files/templates",
    "examples": [
      "import {Scaffolder} from './utils';\nconst scaffolder = new Scaffolder('path/to/templates');\nawait scaffolder\n    .target('/path/to/copy/files')\n    .copy('foo.js')\n    .copy('bar.js')\n    .commit();"
    ],
    "lineNumber": 20,
    "interface": false
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceDirectory",
        "description": "Source directory for template files"
      }
    ]
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "target",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#target",
    "access": "public",
    "description": "Set target directory",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Scaffolder} Chaining OK"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetDirectory",
        "description": "Target directory of template files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Scaffolder"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "overwrite",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#overwrite",
    "access": "public",
    "description": "Set overwrite flag",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Scaffolder} Chaining OK"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "Overwrite files (true) or not (false)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Scaffolder"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "copy",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#copy",
    "access": "public",
    "description": "Copy a file",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Scaffolder} Chaining OK"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path string of file to be copied"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "filename",
        "description": "Name for copied file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Scaffolder"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "commit",
    "memberof": "src/utils/Scaffolder.js~Scaffolder",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/Scaffolder.js~Scaffolder#commit",
    "access": "public",
    "description": "Write changes to disk",
    "lineNumber": 66,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when queue is empty"
    },
    "params": []
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "src/utils/createJsonEditor.js",
    "content": "import {join} from 'path';\nimport {existsSync} from 'fs-extra';\nimport BasicEditor from './BasicEditor';\nimport {parse} from './common';\n\nconst {assign} = Object;\nconst INDENT_SPACES = 4;\n/**\n * Create and edit a JSON file with a fluent API\n * @param {string} filename Name of file to edit\n * @param {object} [contents={}] Contents of file\n * @return {JsonEditor} JsonEditor class (extends {@link BasicEditor})\n */\nexport const createJsonEditor = (filename, contents = {}) => class JsonEditor extends BasicEditor {\n    contents = contents;\n    constructor(cwd = process.cwd()) {\n        super();\n        const path = join(cwd, filename);\n        assign(this, {path});\n    }\n    create() {\n        const self = this;\n        const {contents, fs, path, queue} = self;\n        existsSync(path) || queue.add(() => fs.writeJSON(path, contents, null, INDENT_SPACES));\n        return self;\n    }\n    read() {\n        const {fs, path} = this;\n        return fs.readJSON(path) || '';\n    }\n    extend(contents) {\n        const self = this;\n        const {fs, path, queue} = self;\n        queue.add(() => fs.extendJSON(path, contents, null, INDENT_SPACES));\n        return self;\n    }\n    /**\n     * Check if package.json manifest file has dependencies (dependencies or devDependencies)\n     * @param  {...string} modules npm module names\n     * @return {Boolean} Has at least one dependency (true) or none (false)\n     */\n    hasSome(...modules) {\n        const {keys} = Object;\n        const pkg = this.read();\n        const {dependencies, devDependencies} = parse(pkg);\n        const installed = [...keys(dependencies ? dependencies : {}), ...keys(devDependencies ? devDependencies : {})];\n        return modules.some(module => installed.includes(module));\n    }\n    /**\n     * Check if package.json manifest file has dependencies (dependencies or devDependencies)\n     * @param  {...string} modules npm module names\n     * @return {Boolean} Has all dependencies (true) or not all (false)\n     */\n    hasAll(...modules) {\n        const {keys} = Object;\n        const pkg = this.read();\n        const {dependencies, devDependencies} = parse(pkg);\n        const installed = [...keys(dependencies ? dependencies : {}), ...keys(devDependencies ? devDependencies : {})];\n        return modules.every(module => installed.includes(module));\n    }\n};\nexport default createJsonEditor;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/utils/createJsonEditor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils/createJsonEditor.js",
    "static": true,
    "longname": "src/utils/createJsonEditor.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/createJsonEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "INDENT_SPACES",
    "memberof": "src/utils/createJsonEditor.js",
    "static": true,
    "longname": "src/utils/createJsonEditor.js~INDENT_SPACES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/createJsonEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "createJsonEditor",
    "memberof": "src/utils/createJsonEditor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createJsonEditor.js~createJsonEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/createJsonEditor.js",
    "importStyle": "{createJsonEditor}",
    "description": "Create and edit a JSON file with a fluent API",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "Name of file to edit"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "contents",
        "description": "Contents of file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JsonEditor"
      ],
      "spread": false,
      "description": "JsonEditor class (extends {@link BasicEditor})"
    }
  },
  {
    "__docId__": 239,
    "kind": "file",
    "name": "src/utils/createModuleEditor.js",
    "content": "import {join} from 'path';\nimport {existsSync} from 'fs-extra';\nimport merge from 'lodash/merge';\nimport {format} from './common';\nimport BasicEditor from './BasicEditor';\n\nconst {assign} = Object;\nconst silent = () => { };\n/**\n * Create and edit a JS module with a fluent API\n * @param {string} filename Name of file to edit\n * @param {string} [contents='module.exports = {};'] Contents of file\n * @param {Object} options Options to configure module\n * @param {boolean} [options.esm=false] Select to use 'module.exports =' (false) or 'export default' (true)\n * @return {ModuleEditor} ModuleEditor class (extends {@link BasicEditor})\n */\nexport const createModuleEditor = (filename, contents = 'module.exports = {};', options = {esm: false}) => class ModuleEditor extends BasicEditor {\n    contents = contents;\n    prependedContents = '';\n    created = false;\n    constructor(cwd = process.cwd()) {\n        super();\n        const {esm} = options;\n        const path = join(cwd, filename);\n        assign(this, {esm, path});\n    }\n    create() {\n        const self = this;\n        const {contents, path} = self;\n        self.created || (existsSync(path) || self.write(contents));\n        return self;\n    }\n    read() {\n        const {fs, path} = this;\n        return fs.exists(path) ? fs.read(path) : '';\n    }\n    write(contents) {\n        const self = this;\n        const {esm, fs, path, prependedContents, queue} = self;\n        const exportString = esm ? 'export default ' : 'module.exports = ';\n        const formatted = `${prependedContents}${exportString}${format(contents)}`.replace(/\\r*\\n$/g, ';');\n        queue\n            .add(() => fs.write(path, formatted))\n            .then(() => self.created = existsSync(path))\n            .catch(silent);\n        return assign(self, {contents});\n    }\n    extend(code) {\n        this.contents = merge(contents, code);\n        this.write(this.contents);\n        return this;\n    }\n    prepend(code) {\n        const self = this;\n        const {contents, prependedContents} = self;\n        self.prependedContents = `${code}\\n${prependedContents}`.replace(/\\n*$/, '\\n\\n');\n        return self.write(contents);\n    }\n};\nexport default createModuleEditor;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/utils/createModuleEditor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils/createModuleEditor.js",
    "static": true,
    "longname": "src/utils/createModuleEditor.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/createModuleEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "silent",
    "memberof": "src/utils/createModuleEditor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createModuleEditor.js~silent",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/createModuleEditor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "createModuleEditor",
    "memberof": "src/utils/createModuleEditor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createModuleEditor.js~createModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/createModuleEditor.js",
    "importStyle": "{createModuleEditor}",
    "description": "Create and edit a JS module with a fluent API",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "Name of file to edit"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "contents",
        "description": "Contents of file"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to configure module"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.esm",
        "description": "Select to use 'module.exports =' (false) or 'export default' (true)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": "ModuleEditor class (extends {@link BasicEditor})"
    }
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "src/utils/index.js",
    "content": "import execa from 'execa';\nimport semver from 'semver';\nimport first from 'lodash/first';\nimport has from 'lodash/has';\nimport isFunction from 'lodash/isFunction';\nimport isString from 'lodash/isString';\nimport {oneLineTrim} from 'common-tags';\nimport validate from 'validate-npm-package-name';\nimport {findBestMatch} from 'string-similarity';\nimport {dict} from './common';\nimport createJsonEditor from './createJsonEditor';\nimport createModuleEditor from './createModuleEditor';\n\nconst {keys} = Object;\nexport const isValidTask = val => has(val, 'text') && has(val, 'task') && isString(val.text) && isFunction(val.task);\nexport const withOptions = val => options => ({...options, ...val});\n/**\n * Choose tasks based on CLI options\n * @param {Object} choices Object to create choice dictionary from\n * @return {function} Accepts CLI options and returns array of tasks\n */\nexport const choose = choices => options => {\n    const possible = keys(choices);\n    const passed = keys(options);\n    const lookup = dict(choices);\n    const DEFAULT = lookup.has('default') ? lookup.get('default') : lookup.get(possible[0]);\n    const [choice] = possible.filter(val => passed.includes(val)).filter(val => options[val]);\n    return choice ? lookup.get(choice) : DEFAULT;\n};\n/**\n * Use string-similarity module to determine closest matching string\n * @param {Object} commands Object with commands as key values, terms as key values for each command object\n * @param {string} command Command string input\n * @param {string[]} [terms=[]] Terms input\n * @example\n * const [intendedCommand, intendedTerms] = getIntendedInput(commands, command, terms);\n * @return {string[]} [intendedCommand, intendedTerms] Array destructed assignment is recommended (see example)\n */\nexport const getIntendedInput = (commands, command, terms = []) => {\n    const VALID_COMMANDS = keys(commands);\n    const {bestMatch: {target: intendedCommand}} = findBestMatch(command, VALID_COMMANDS);\n    const VALID_TERMS = keys(commands[intendedCommand]);\n    const intendedTerms = terms.map(term => findBestMatch(term, VALID_TERMS).bestMatch.target);\n    return {intendedCommand, intendedTerms};\n};\n/**\n * Use npm CLI to return array of module versions\n * @param {string} name npm module name\n * @example\n * const versions = getVersions('react');\n * @return {string[]} Array of versions\n */\nexport const getVersions = async (name = '') => (name.length === 0) ? [] : (await execa('npm', ['view', name, 'versions']))\n    .stdout\n    .split(',\\n')\n    .map(str => str.match(/\\d+[.]\\d+[.]\\d+/))\n    .map(first)\n    .map(semver.valid)\n    .filter(Boolean);\n/**\n * Install dependencies with npm\n * @param {string[]} [dependencies=[]] Modules to install\n * @param {Object} options Options to configure installation\n * @param {boolean} [options.dev=false] If true, add \"--save-dev\"\n * @param {boolean} [options.latest=true] If true, add \"@latest\" to all module names\n * @param {boolean} [options.skipInstall=false] Do not install (mostly for testing)\n * @example <caption>Install production dependencies</caption>\n * install(['react']);\n * @example <caption>Install development dependencies</caption>\n * install(['jest', 'babel-jest'], {dev: true});\n * @return {string[]} Array of inputs (mostly for testing)\n */\nexport const install = async (dependencies = [], options = {dev: false, latest: true, skipInstall: false}) => {\n    const {dev, latest, skipInstall} = options;\n    const identity = i => i;\n    const concat = val => str => str + val;\n    const args = ['install']\n        .concat(dependencies\n            .filter(name => validate(name).validForNewPackages)\n            .map(latest ? concat('@latest') : identity)\n        )\n        .concat(dev ? '--save-dev' : []);\n    skipInstall || await execa('npm', args);\n    return args;\n};\nexport const uninstall = async (dependencies = []) => {\n    const args = ['uninstall'].concat(dependencies.filter(name => validate(name).validForNewPackages));\n    (args.length === 1) || await execa('npm', args);\n    return args;\n};\n/**\n * Determine if system supports Rust (necessary Rust dependencies are installed)\n * @return {boolean} Are Rust components installed?\n */\nexport const verifyRustInstallation = () => {\n\n};\n/**\n * Create and edit a Babel.js configuration file with a fluent API\n * @type {ModuleEditor}\n * @example <caption>Extend module.exports content and prepend text to the top of the file</caption>\n * await (new BabelConfigModuleEditor())\n *     .create()\n *     .extend({presets: [`'@babel/preset-env'`]})\n *     .prepend(`const {existsSync} = require('fs-extra');`)\n *     .commit();\n */\nexport const BabelConfigModuleEditor = createModuleEditor('babel.config.js', {\n    plugins: [\n        `'@babel/plugin-transform-runtime'`,\n        `'@babel/plugin-proposal-class-properties'`,\n        `'@babel/plugin-proposal-export-default-from'`,\n        `'@babel/plugin-proposal-optional-chaining'`\n    ],\n    presets: [`'@babel/preset-env'`, `'minify'`]\n});\n/**\n * Create and edit an ESLint configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new EslintConfigModuleEditor())\n *     .create()\n *     .commit();\n */\nexport const EslintConfigModuleEditor = createModuleEditor('.eslintrc.js', {\n    env: {\n        es6: true,\n        jest: true\n    },\n    extends: [\n        `'omaha-prime-grade'`\n    ],\n    parser: `'babel-eslint'`\n});\n/**\n * Create and edit a package.json manifest file with a fluent API\n * @type {JsonEditor}\n * @example <caption>Create a new package.json</caption>\n * await (new PackageJsonEditor())\n *     .create()\n *     .commit();\n * @example <caption>Create a new package.json and read its contents (chaining OK)</caption>\n * const contents = (new PackageJsonEditor())\n *     .create()\n *     .read();\n * @example <caption>Extend a package.json</caption>\n * const script = {test: 'jest --coverage'};\n * await (new PackageJsonEditor())\n *     .extend({script})\n *     .commit();\n * @example <caption>Create and extend a package.json without writing to disk (chaining OK)</caption>\n * const script = {\n *     lint: 'eslint index.js -c ./.eslintrc.js'\n * };\n * await (new PackageJsonEditor())\n *     .create(false)\n *     .extend({script}, false)\n *     .commit();\n */\nexport const PackageJsonEditor = createJsonEditor('package.json', {\n    name: 'my-project',\n    version: '0.0.0',\n    description: 'A super cool app/server/tool/library/widget/thingy',\n    license: 'MIT',\n    keywords: []\n});\n/**\n * Create and edit a PostCSS configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new PostcssConfigEditor())\n *     .create()\n *     .commit();\n */\nexport const PostcssConfigEditor = createModuleEditor('postcss.config.js', {\n    map: true,\n    parser: `require('postcss-safe-parser')`\n});\n/**\n * Create and edit a PurgeCSS configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new PurgecssConfigEditor())\n *     .create()\n *     .commit();\n */\nexport const PurgecssConfigEditor = createModuleEditor('purgecss.config.js', {\n    content: [`'./assets/index.html'`]\n});\n/**\n * Create and edit a Rollup configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new RollupConfigEditor())\n *     .create()\n *     .commit();\n */\nexport const RollupConfigEditor = createModuleEditor('rollup.config.js', {\n    input: `'./src/main.js'`,\n    output: {\n        file: `'./dist/bundle.min.js'`,\n        format: `'iife'`,\n        sourceMap: `'inline'`\n    },\n    plugins: [\n        `babel({exclude: 'node_modules/**', runtimeHelpers: true})`,\n        oneLineTrim`commonjs({\n            namedExports: {\n                './node_modules/backbone/backbone.js': ['Model', 'history'],\n                './node_modules/backbone.marionette/lib/backbone.marionette.js': ['Application', 'View', 'MnObject']\n            }\n        })`,\n        `resolve({browser: true})`,\n        `replace({'process.env.NODE_ENV': JSON.stringify('production')})`\n    ]\n}, {esm: true});\n/**\n * Create and edit a Webpack configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * await (new WebpackConfigEditor())\n *     .create()\n *     .commit();\n */\nexport const WebpackConfigEditor = createModuleEditor('webpack.config.js', {\n    mode: `'development'`,\n    entry: {\n        app: `'./src/main.js'`\n    },\n    output: {\n        path: `resolve('./dist')`,\n        filename: `'bundle.min.js'`\n    },\n    module: {\n        rules: [\n            {\n                test: `/\\.js?$/`,\n                exclude: `/node_modules/`,\n                loader: `'babel-loader'`,\n                query: {\n                    presets: [`'@babel/env'`]\n                }\n            }\n        ]\n    },\n    plugins: [\n        `new DashboardPlugin()`\n    ]\n});",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "keys",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~keys",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "isValidTask",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~isValidTask",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{isValidTask}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "withOptions",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~withOptions",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{withOptions}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "choose",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~choose",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{choose}",
    "description": "Choose tasks based on CLI options",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "choices",
        "description": "Object to create choice dictionary from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "Accepts CLI options and returns array of tasks"
    }
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "getIntendedInput",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~getIntendedInput",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{getIntendedInput}",
    "description": "Use string-similarity module to determine closest matching string",
    "examples": [
      "const [intendedCommand, intendedTerms] = getIntendedInput(commands, command, terms);"
    ],
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "commands",
        "description": "Object with commands as key values, terms as key values for each command object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "Command string input"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "terms",
        "description": "Terms input"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "[intendedCommand, intendedTerms] Array destructed assignment is recommended (see example)"
    }
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "getVersions",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils/index.js~getVersions",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{getVersions}",
    "description": "Use npm CLI to return array of module versions",
    "examples": [
      "const versions = getVersions('react');"
    ],
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "npm module name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Array of versions"
    }
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "install",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils/index.js~install",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{install}",
    "description": "Install dependencies with npm",
    "examples": [
      "<caption>Install production dependencies</caption>\ninstall(['react']);",
      "<caption>Install development dependencies</caption>\ninstall(['jest', 'babel-jest'], {dev: true});"
    ],
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "dependencies",
        "description": "Modules to install"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to configure installation"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.dev",
        "description": "If true, add \"--save-dev\""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.latest",
        "description": "If true, add \"@latest\" to all module names"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.skipInstall",
        "description": "Do not install (mostly for testing)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Array of inputs (mostly for testing)"
    }
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "uninstall",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils/index.js~uninstall",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{uninstall}",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "dependencies",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "verifyRustInstallation",
    "memberof": "src/utils/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/index.js~verifyRustInstallation",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{verifyRustInstallation}",
    "description": "Determine if system supports Rust (necessary Rust dependencies are installed)",
    "lineNumber": 95,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Are Rust components installed?"
    },
    "params": []
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "name": "BabelConfigModuleEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~BabelConfigModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{BabelConfigModuleEditor}",
    "description": "Create and edit a Babel.js configuration file with a fluent API",
    "examples": [
      "<caption>Extend module.exports content and prepend text to the top of the file</caption>\nawait (new BabelConfigModuleEditor())\n    .create()\n    .extend({presets: [`'@babel/preset-env'`]})\n    .prepend(`const {existsSync} = require('fs-extra');`)\n    .commit();"
    ],
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "name": "EslintConfigModuleEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~EslintConfigModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{EslintConfigModuleEditor}",
    "description": "Create and edit an ESLint configuration file with a fluent API",
    "examples": [
      "await (new EslintConfigModuleEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "PackageJsonEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~PackageJsonEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{PackageJsonEditor}",
    "description": "Create and edit a package.json manifest file with a fluent API",
    "examples": [
      "<caption>Create a new package.json</caption>\nawait (new PackageJsonEditor())\n    .create()\n    .commit();",
      "<caption>Create a new package.json and read its contents (chaining OK)</caption>\nconst contents = (new PackageJsonEditor())\n    .create()\n    .read();",
      "<caption>Extend a package.json</caption>\nconst script = {test: 'jest --coverage'};\nawait (new PackageJsonEditor())\n    .extend({script})\n    .commit();",
      "<caption>Create and extend a package.json without writing to disk (chaining OK)</caption>\nconst script = {\n    lint: 'eslint index.js -c ./.eslintrc.js'\n};\nawait (new PackageJsonEditor())\n    .create(false)\n    .extend({script}, false)\n    .commit();"
    ],
    "lineNumber": 160,
    "type": {
      "nullable": null,
      "types": [
        "JsonEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "name": "PostcssConfigEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~PostcssConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{PostcssConfigEditor}",
    "description": "Create and edit a PostCSS configuration file with a fluent API",
    "examples": [
      "await (new PostcssConfigEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 175,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "PurgecssConfigEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~PurgecssConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{PurgecssConfigEditor}",
    "description": "Create and edit a PurgeCSS configuration file with a fluent API",
    "examples": [
      "await (new PurgecssConfigEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 187,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "RollupConfigEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~RollupConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{RollupConfigEditor}",
    "description": "Create and edit a Rollup configuration file with a fluent API",
    "examples": [
      "await (new RollupConfigEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 198,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "variable",
    "name": "WebpackConfigEditor",
    "memberof": "src/utils/index.js",
    "static": true,
    "longname": "src/utils/index.js~WebpackConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils/index.js",
    "importStyle": "{WebpackConfigEditor}",
    "description": "Create and edit a Webpack configuration file with a fluent API",
    "examples": [
      "await (new WebpackConfigEditor())\n    .create()\n    .commit();"
    ],
    "lineNumber": 225,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "index",
    "content": "# tomo-cli [![Build Status](https://img.shields.io/travis/jhwohlgemuth/tomo-cli.svg?logo=travis&style=for-the-badge)](https://travis-ci.org/jhwohlgemuth/tomo-cli) [![codecov](https://img.shields.io/codecov/c/github/jhwohlgemuth/tomo-cli.svg?logo=codecov&style=for-the-badge)](https://codecov.io/gh/jhwohlgemuth/tomo-cli)\n\n> A friendly command line tool designed to help create sustainable software using web technology\n\n## Install\n\n```\n$ npm install --global tomo-cli\n```\n\n\n## Usage\n\n```js\n$ tomo --help\n\n  Usage\n    tomo [command] [term] [options]\n\n  Options\n\n    --source-directory, -d  Directory for source code [Default: ./src]\n    --output-directory, -o  Directory for build targets [Default: ./dist]\n    --assets-directory, -a  Directory for assets [Default: ./assets]\n    --use-rollup,           Use Rollup instead of Webpack [Default: false]\n    --use-parcel,           Use Parcel instead of Webpack [Default: false]\n    --use-react, -r         Add React support to workflow [Default: false]\n    --react-version         React version for ESLint configuration [Default: '16.8']\n    --ignore-warnings, -i   Ignore warning messages [Default: false]\n    --skip-install, -s      Skip npm installations [Default: false]\n    --overwrite             Copy files, even if they alrady exist [Default: false]\n    --browser               Indicate tasks are intended for the browser [Default: false]\n    --debug                 Show debug data [Default: false]\n\n```\n\n\n## License\n\nMIT © [Jason Wohlgemuth](http://omaha.js.org)\n",
    "longname": "/home/vagrant/dev/tomo-cli/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"tomo-cli\",\n    \"version\": \"0.0.0\",\n    \"description\": \"A friendly command line tool designed to help create sustainable software using web technology\",\n    \"license\": \"MIT\",\n    \"main\": \"dist/utils/index.js\",\n    \"bin\": {\n        \"tomo\": \"dist/index.js\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/jhwohlgemuth/tomo-cli.git\"\n    },\n    \"author\": \"Jason Wohlgemuth <jhwohlgemuth@gmail.com> (omaha.js.org)\",\n    \"engines\": {\n        \"node\": \">=6\"\n    },\n    \"scripts\": {\n        \"copy:assets\": \"cpy '**/templates/*.(js|html|hbs|css|md|ico|cert|key)' '**/[.]*' '../dist/' --cwd=src --parents --recursive\",\n        \"dev\": \"stmux [ \\\"npm run build:watch\\\" : \\\"npm run lint:watch\\\" ]\",\n        \"prebuild\": \"npm run build:clean\",\n        \"build\": \"babel src --out-dir dist\",\n        \"postbuild\": \"npm run copy:assets\",\n        \"build:clean\": \"rm -frd ./dist\",\n        \"build:watch\": \"watch 'npm run build' ./src\",\n        \"build:docs\": \"esdoc -c ./esdoc.conf.json\",\n        \"test\": \"jest .*.test.js --coverage\",\n        \"test:e2e\": \"jest .*.e2e.js\",\n        \"test:watch\": \"npm test -- --watchAll\",\n        \"open:coverage\": \"open-cli ./coverage/lcov-report/index.html\",\n        \"open:docs\": \"open-cli ./docs/index.html\",\n        \"lint\": \"eslint . -c ./.eslintrc.js --fix\",\n        \"lint:watch\": \"watch 'npm run lint' ./src\",\n        \"lint:tests\": \"eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore\",\n        \"lint:tests:watch\": \"watch 'npm run lint:tests' ./__tests__\",\n        \"lint:config\": \"eslint -c ./.eslintrc.js *.js --fix\",\n        \"lint:docs\": \"eslint src/*.js src/**/*.js --no-eslintrc --rule valid-jsdoc:error --parser babel-eslint\",\n        \"lint:all\": \"npm-run-all lint lint:tests lint:docs\",\n        \"preesdoc\": \"npm run lint:docs\",\n        \"esdoc\": \"npm run build:docs\",\n        \"postesdoc\": \"npm run open:docs\"\n    },\n    \"jest\": {\n        \"testMatch\": [\n            \"**/__tests__/**/*.(e2e|test).[jt]s?(x)\"\n        ],\n        \"testPathIgnorePatterns\": [\n            \"/__tests__/fixtures\"\n        ]\n    },\n    \"keywords\": [],\n    \"dependencies\": {\n        \"cardinal\": \"^2.1.1\",\n        \"chalk\": \"2.4.2\",\n        \"common-tags\": \"^1.8.0\",\n        \"delay\": \"4.2.0\",\n        \"execa\": \"1.0.0\",\n        \"figures\": \"3.0.0\",\n        \"fs-extra\": \"8.0.1\",\n        \"get-stdin\": \"^7.0.0\",\n        \"ink\": \"2.1.1\",\n        \"ink-big-text\": \"1.0.1\",\n        \"ink-box\": \"1.0.0\",\n        \"ink-select-input\": \"3.1.1\",\n        \"ink-spinner\": \"3.0.1\",\n        \"is-online\": \"^8.2.0\",\n        \"lodash\": \"4.17.11\",\n        \"mem-fs\": \"1.1.3\",\n        \"mem-fs-editor\": \"5.1.0\",\n        \"meow\": \"5.0.0\",\n        \"p-queue\": \"6.0.2\",\n        \"pino\": \"^5.12.3\",\n        \"pino-pretty\": \"^3.0.0\",\n        \"prettier\": \"1.18.2\",\n        \"prop-types\": \"15.7.2\",\n        \"react\": \"16.8.6\",\n        \"semver\": \"6.1.1\",\n        \"some-module\": \"0.0.3\",\n        \"string-similarity\": \"3.0.0\",\n        \"update-notifier\": \"3.0.0\",\n        \"validate-npm-package-name\": \"^3.0.0\",\n        \"xterm\": \"3.14.2\"\n    },\n    \"devDependencies\": {\n        \"@babel/cli\": \"7.4.4\",\n        \"@babel/core\": \"7.4.4\",\n        \"@babel/plugin-proposal-class-properties\": \"7.4.4\",\n        \"@babel/plugin-proposal-export-default-from\": \"7.2.0\",\n        \"@babel/plugin-proposal-optional-chaining\": \"7.2.0\",\n        \"@babel/plugin-proposal-pipeline-operator\": \"7.3.2\",\n        \"@babel/plugin-transform-runtime\": \"7.4.4\",\n        \"@babel/preset-env\": \"7.4.4\",\n        \"@babel/preset-react\": \"7.0.0\",\n        \"@babel/runtime\": \"7.4.4\",\n        \"babel-eslint\": \"10.0.1\",\n        \"babel-jest\": \"24.8.0\",\n        \"babel-preset-minify\": \"0.5.0\",\n        \"cpy-cli\": \"2.0.0\",\n        \"directory-tree\": \"2.2.3\",\n        \"esdoc\": \"1.1.0\",\n        \"esdoc-ecmascript-proposal-plugin\": \"1.0.0\",\n        \"esdoc-jsx-plugin\": \"1.0.0\",\n        \"esdoc-standard-plugin\": \"1.0.0\",\n        \"eslint\": \"5.16.0\",\n        \"eslint-config-omaha-prime-grade\": \"11.0.4\",\n        \"eslint-plugin-react\": \"7.13.0\",\n        \"ink-testing-library\": \"1.0.1\",\n        \"jest\": \"24.8.0\",\n        \"npm-run-all\": \"4.1.5\",\n        \"open-cli\": \"5.0.0\",\n        \"rimraf\": \"2.6.3\",\n        \"stmux\": \"1.6.1\",\n        \"watch\": \"1.0.2\"\n    },\n    \"bugs\": {\n        \"url\": \"https://github.com/jhwohlgemuth/tomo-cli/issues\"\n    },\n    \"homepage\": \"https://github.com/jhwohlgemuth/tomo-cli#readme\"\n}\n",
    "longname": "/home/vagrant/dev/tomo-cli/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 260,
    "kind": "testFile",
    "name": "__tests__/commands.test.js",
    "content": "import {\n    fileContents,\n    getDirectoryTree,\n    readMakefileContent,\n    run,\n    useTemporaryDirectory\n} from './tomo-test';\nimport {\n    createPackageJson,\n    createSourceDirectory\n} from '../src/commands/common';\nimport commands from '../src/commands';\nimport {addA11y, removeA11y} from '../src/commands/add-a11y';\nimport addBabel from '../src/commands/add-babel';\nimport {addBrowsersync, removeBrowsersync} from '../src/commands/add-browsersync';\nimport addElectron from '../src/commands/add-electron';\nimport addEsdoc from '../src/commands/add-esdoc';\nimport addEslint from '../src/commands/add-eslint';\nimport addJest from '../src/commands/add-jest';\nimport addMakefile from '../src/commands/add-makefile';\nimport {addParcel, removeParcel} from '../src/commands/add-parcel';\nimport {addPostcss, removePostcss} from '../src/commands/add-postcss';\n// import addRust from '../src/commands/add-rust';\nimport addMarionette from '../src/commands/add-marionette';\nimport {addRollup, removeRollup} from '../src/commands/add-rollup';\nimport {addWebpack, removeWebpack} from '../src/commands/add-webpack';\n\njest.mock('is-online', () => (async () => true));\n\ndescribe('\"Create/New\" commands', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const {create} = commands;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('create new project', async () => {\n        const sourceDirectory = 'src';\n        const options = {skipInstall, sourceDirectory};\n        await run(create.project, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n    });\n    test('create new app', async () => {\n        const sourceDirectory = 'src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(create.app, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        const pkg = fileContents('package.json');\n        expect(pkg).toMatchSnapshot();\n    });\n    test('create new server', async () => {\n        const options = {skipInstall};\n        await run(create.server, options);\n        const tree = getDirectoryTree(tempDirectory);\n        const pkg = fileContents('package.json');\n        expect(tree).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n    });\n    test('create package.json', async () => {\n        await run(createPackageJson, {});\n        const contents = fileContents('./package.json');\n        expect(contents).toMatchSnapshot();\n    });\n    test('create source directory', async () => {\n        const sourceDirectory = 'some-random-folder-name';\n        await run(createSourceDirectory, {sourceDirectory});\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n    });\n});\ndescribe('\"Add\" commands', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const useReact = true;\n    const {create} = commands;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('add-a11y', async () => {\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall};\n        await run(createPackageJson, {});\n        await run(addA11y, options);\n        const pkg = fileContents('package.json');\n        expect(pkg).toMatchSnapshot();\n    });\n    test('add-babel', async () => {\n        const sourceDirectory = 'src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(addBabel, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        const contents = fileContents('./babel.config.js');\n        expect(contents).toMatchSnapshot();\n    });\n    test('add-babel (with React)', async () => {\n        const sourceDirectory = 'src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory, useReact};\n        await run(addBabel, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        const contents = fileContents('./babel.config.js');\n        expect(contents).toMatchSnapshot();\n    });\n    test('add-browsersync', async () => {\n        const sourceDirectory = 'src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(createPackageJson, {});\n        const pre = fileContents('package.json');\n        await run(addBrowsersync, options);\n        const noop = fileContents('package.json');\n        await run(addWebpack, options);\n        await run(addPostcss, options);\n        await run(addBrowsersync, options);\n        const post = fileContents('package.json');\n        expect(pre).toMatchSnapshot();\n        expect(noop).toMatchSnapshot();\n        expect(post).toMatchSnapshot();\n    });\n    test('add-electron', async () => {\n        const options = {skipInstall};\n        await run(createPackageJson, {});\n        await run(addElectron, options);\n        const pkg = fileContents('package.json');\n        const tree = getDirectoryTree(tempDirectory);\n        expect(pkg).toMatchSnapshot();\n        expect(tree).toMatchSnapshot();\n    });\n    test('add-electron --use-parcel', async () => {\n        const options = {skipInstall, useParcel: true};\n        await run(createPackageJson, {});\n        await run(addElectron, options);\n        const pkg = fileContents('package.json');\n        expect(pkg).toMatchSnapshot();\n    });\n    test('add-esdoc', async () => {\n        const sourceDirectory = 'src';\n        const options = {skipInstall, sourceDirectory};\n        await run(createPackageJson, {});\n        const pre = fileContents('./package.json');\n        expect(pre).toMatchSnapshot();\n        await run(addEsdoc, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        const post = fileContents('./package.json');\n        expect(post).toMatchSnapshot();\n        const contents = fileContents('./esdoc.conf.json');\n        expect(contents).toMatchSnapshot();\n    });\n    test('add-esdoc (with React)', async () => {\n        const sourceDirectory = 'src';\n        const options = {skipInstall, sourceDirectory, useReact};\n        await run(addEsdoc, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        const contents = fileContents('./esdoc.conf.json');\n        expect(contents).toMatchSnapshot();\n    });\n    test('add-eslint', async () => {\n        const sourceDirectory = 'src';\n        const options = {skipInstall, sourceDirectory};\n        await run(addEslint, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        const contents = fileContents('./.eslintrc.js');\n        expect(contents).toMatchSnapshot();\n    });\n    test('add-eslint (with React)', async () => {\n        const sourceDirectory = './src';\n        const options = {skipInstall, sourceDirectory, useReact};\n        await run(addEslint, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        const contents = fileContents('./.eslintrc.js');\n        expect(contents).toMatchSnapshot();\n    });\n    test('add-jest', async () => {\n        const options = {skipInstall};\n        await run(createPackageJson, {});\n        const pre = fileContents('./package.json');\n        const preTree = getDirectoryTree(tempDirectory);\n        await run(addJest, options);\n        const post = fileContents('./package.json');\n        const postTree = getDirectoryTree(tempDirectory);\n        expect(pre).toMatchSnapshot();\n        expect(preTree).toMatchSnapshot();\n        expect(post).toMatchSnapshot();\n        expect(postTree).toMatchSnapshot();\n    });\n    test('add-jest --browser', async () => {\n        const options = {browser: true, skipInstall};\n        await run(createPackageJson, {});\n        const pre = fileContents('./package.json');\n        const preTree = getDirectoryTree(tempDirectory);\n        await run(addJest, options);\n        const post = fileContents('./package.json');\n        const postTree = getDirectoryTree(tempDirectory);\n        expect(pre).toMatchSnapshot();\n        expect(preTree).toMatchSnapshot();\n        expect(post).toMatchSnapshot();\n        expect(postTree).toMatchSnapshot();\n    });\n    test('add-makefile', async () => {\n        const sourceDirectory = './src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(addMakefile, options);\n        expect(getDirectoryTree(tempDirectory)).toMatchSnapshot();\n        const pre = readMakefileContent();\n        await run(create.app, options);\n        await run(addMakefile, options);\n        expect(getDirectoryTree(tempDirectory)).toMatchSnapshot();\n        const post = readMakefileContent();\n        expect(pre).toMatchSnapshot();\n        expect(post).toMatchSnapshot();\n    });\n    test('add-marionette', async () => {\n        const sourceDirectory = './src';\n        const options = {skipInstall, sourceDirectory};\n        await run(addMarionette, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n    });\n    test('add-parcel', async () => {\n        const sourceDirectory = './src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(createPackageJson, {});\n        await run(addEslint, options);\n        await run(addParcel, options);\n        const contents = fileContents('./purgecss.config.js');\n        const pkg = fileContents('./package.json');\n        expect(contents).toMatchSnapshot();\n        expect(pkg).toMatchSnapshot();\n    });\n    test('add-postcss', async () => {\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall};\n        await run(createPackageJson, {});\n        await run(addPostcss, options);\n        const contents = fileContents('./postcss.config.js');\n        expect(contents).toMatchSnapshot();\n        const pkg = fileContents('./package.json');\n        expect(pkg).toMatchSnapshot();\n    });\n    test('add-rollup', async () => {\n        const sourceDirectory = './src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(createPackageJson, {});\n        await run(addEslint, options);\n        await run(addRollup, options);\n        const pkg = fileContents('package.json');\n        const contents = fileContents('rollup.config.js');\n        expect(pkg).toMatchSnapshot();\n        expect(contents).toMatchSnapshot();\n    });\n    test('add-webpack', async () => {\n        const sourceDirectory = 'src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(createPackageJson, {});\n        const pre = fileContents('./package.json');\n        expect(pre).toMatchSnapshot();\n        await run(addBabel, options);\n        await run(addEslint, options);\n        await run(addWebpack, options);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        const contents = fileContents('./webpack.config.js');\n        expect(contents).toMatchSnapshot();\n        const post = fileContents('./package.json');\n        expect(post).toMatchSnapshot();\n    });\n});\ndescribe('\"Remove\" commands', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('remove a11y', async () => {\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall};\n        await run(createPackageJson, {});\n        await run(addA11y, options);\n        const pre = fileContents('package.json');\n        await run(removeA11y, {});\n        const post = fileContents('package.json');\n        expect(pre).toMatchSnapshot();\n        expect(post).toMatchSnapshot();\n    });\n    test('remove browsersync', async () => {\n        const sourceDirectory = 'src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(createPackageJson, {});\n        await run(addWebpack, options);\n        await run(addPostcss, options);\n        await run(addBrowsersync, options);\n        const pre = fileContents('package.json');\n        await run(removeBrowsersync, {});\n        const post = fileContents('package.json');\n        expect(pre).toMatchSnapshot();\n        expect(post).toMatchSnapshot();\n    });\n    test('remove parcel', async () => {\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall};\n        await run(createPackageJson, {});\n        await run(addParcel, options);\n        const pre = fileContents('./package.json');\n        const preTree = getDirectoryTree(tempDirectory);\n        await run(removeParcel, {});\n        const post = fileContents('./package.json');\n        const postTree = getDirectoryTree(tempDirectory);\n        expect(pre).toMatchSnapshot();\n        expect(preTree).toMatchSnapshot();\n        expect(post).toMatchSnapshot();\n        expect(postTree).toMatchSnapshot();\n    });\n    test('remove postcss', async () => {\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall};\n        await run(createPackageJson, {});\n        await run(addPostcss, options);\n        const pre = fileContents('./package.json');\n        const preTree = getDirectoryTree(tempDirectory);\n        await run(removePostcss, {});\n        const post = fileContents('./package.json');\n        const postTree = getDirectoryTree(tempDirectory);\n        expect(pre).toMatchSnapshot();\n        expect(preTree).toMatchSnapshot();\n        expect(post).toMatchSnapshot();\n        expect(postTree).toMatchSnapshot();\n    });\n    test('remove rollup', async () => {\n        const sourceDirectory = 'src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(createPackageJson, {});\n        await run(addRollup, options);\n        const pre = fileContents('package.json');\n        const preTree = getDirectoryTree(tempDirectory);\n        await run(removeRollup, options);\n        const post = fileContents('package.json');\n        const postTree = getDirectoryTree(tempDirectory);\n        expect(pre).toMatchSnapshot();\n        expect(preTree).toMatchSnapshot();\n        expect(post).toMatchSnapshot();\n        expect(postTree).toMatchSnapshot();\n    });\n    test('remove webpack', async () => {\n        const sourceDirectory = 'src';\n        const outputDirectory = './dist';\n        const options = {outputDirectory, skipInstall, sourceDirectory};\n        await run(createPackageJson, {});\n        await run(addWebpack, options);\n        const preTree = getDirectoryTree(tempDirectory);\n        const prePkg = fileContents('./package.json');\n        expect(preTree).toMatchSnapshot();\n        expect(prePkg).toMatchSnapshot();\n        await run(removeWebpack, {});\n        const postTree = getDirectoryTree(tempDirectory);\n        const postPkg = fileContents('./package.json');\n        expect(postTree).toMatchSnapshot();\n        expect(postPkg).toMatchSnapshot();\n    });\n});\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/__tests__/commands.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "__tests__/commands.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands.test.js~describe0",
    "access": null,
    "description": "\"Create/New\" commands",
    "lineNumber": 30
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "test1",
    "testId": 1,
    "memberof": "__tests__/commands.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe0.test1",
    "access": null,
    "description": "create new project",
    "lineNumber": 42
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "test2",
    "testId": 2,
    "memberof": "__tests__/commands.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe0.test2",
    "access": null,
    "description": "create new app",
    "lineNumber": 49
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "test3",
    "testId": 3,
    "memberof": "__tests__/commands.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe0.test3",
    "access": null,
    "description": "create new server",
    "lineNumber": 59
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "test4",
    "testId": 4,
    "memberof": "__tests__/commands.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe0.test4",
    "access": null,
    "description": "create package.json",
    "lineNumber": 67
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "test5",
    "testId": 5,
    "memberof": "__tests__/commands.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe0.test5",
    "access": null,
    "description": "create source directory",
    "lineNumber": 72
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "__tests__/commands.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6",
    "access": null,
    "description": "\"Add\" commands",
    "lineNumber": 79
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "test7",
    "testId": 7,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test7",
    "access": null,
    "description": "add-a11y",
    "lineNumber": 92
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "test8",
    "testId": 8,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test8",
    "access": null,
    "description": "add-babel",
    "lineNumber": 100
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "test9",
    "testId": 9,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test9",
    "access": null,
    "description": "add-babel (with React)",
    "lineNumber": 110
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "test10",
    "testId": 10,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test10",
    "access": null,
    "description": "add-browsersync",
    "lineNumber": 120
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "test11",
    "testId": 11,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test11",
    "access": null,
    "description": "add-electron",
    "lineNumber": 136
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "test12",
    "testId": 12,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test12",
    "access": null,
    "description": "add-electron --use-parcel",
    "lineNumber": 145
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "test13",
    "testId": 13,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test13",
    "access": null,
    "description": "add-esdoc",
    "lineNumber": 152
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "test14",
    "testId": 14,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test14",
    "access": null,
    "description": "add-esdoc (with React)",
    "lineNumber": 166
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "test15",
    "testId": 15,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test15",
    "access": null,
    "description": "add-eslint",
    "lineNumber": 175
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "test16",
    "testId": 16,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test16",
    "access": null,
    "description": "add-eslint (with React)",
    "lineNumber": 184
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "test17",
    "testId": 17,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test17",
    "access": null,
    "description": "add-jest",
    "lineNumber": 193
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "test18",
    "testId": 18,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test18",
    "access": null,
    "description": "add-jest --browser",
    "lineNumber": 206
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "test19",
    "testId": 19,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test19",
    "access": null,
    "description": "add-makefile",
    "lineNumber": 219
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "test20",
    "testId": 20,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test20",
    "access": null,
    "description": "add-marionette",
    "lineNumber": 233
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "test21",
    "testId": 21,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test21",
    "access": null,
    "description": "add-parcel",
    "lineNumber": 240
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "test22",
    "testId": 22,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test22",
    "access": null,
    "description": "add-postcss",
    "lineNumber": 252
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "test23",
    "testId": 23,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test23",
    "access": null,
    "description": "add-rollup",
    "lineNumber": 262
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "test24",
    "testId": 24,
    "memberof": "__tests__/commands.test.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe6.test24",
    "access": null,
    "description": "add-webpack",
    "lineNumber": 274
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "__tests__/commands.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/commands.test.js~describe25",
    "access": null,
    "description": "\"Remove\" commands",
    "lineNumber": 292
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "test26",
    "testId": 26,
    "memberof": "__tests__/commands.test.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe25.test26",
    "access": null,
    "description": "remove a11y",
    "lineNumber": 303
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "test27",
    "testId": 27,
    "memberof": "__tests__/commands.test.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe25.test27",
    "access": null,
    "description": "remove browsersync",
    "lineNumber": 314
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "test28",
    "testId": 28,
    "memberof": "__tests__/commands.test.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe25.test28",
    "access": null,
    "description": "remove parcel",
    "lineNumber": 328
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "test29",
    "testId": 29,
    "memberof": "__tests__/commands.test.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe25.test29",
    "access": null,
    "description": "remove postcss",
    "lineNumber": 343
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "test30",
    "testId": 30,
    "memberof": "__tests__/commands.test.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe25.test30",
    "access": null,
    "description": "remove rollup",
    "lineNumber": 358
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "test31",
    "testId": 31,
    "memberof": "__tests__/commands.test.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/commands.test.js~describe25.test31",
    "access": null,
    "description": "remove webpack",
    "lineNumber": 374
  },
  {
    "__docId__": 293,
    "kind": "testFile",
    "name": "__tests__/offline.test.js",
    "content": "import React from 'react';\nimport isOnline from 'is-online';\nimport {render} from 'ink-testing-library';\nimport {OfflineWarning, TaskList} from '../src/ui';\nimport {useTemporaryDirectory} from './tomo-test';\n\njest.mock('is-online', () => (async () => false));\n\ndescribe('Offline warning', () => {\n    let tempDirectory;\n    const ORIGINAL_CONSOLE_ERROR = console.error;//eslint-disable-line no-console\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    beforeAll(() => {\n        console.error = jest.fn();//eslint-disable-line no-console\n    });\n    afterAll(() => {\n        console.error = ORIGINAL_CONSOLE_ERROR;//eslint-disable-line no-console\n    });\n    test('is-online returns false (for testing)', async () => {\n        const result = await isOnline();\n        expect(result).toEqual(false);\n    });\n    test('can render', async () => {\n        const {lastFrame} = render(<OfflineWarning/>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('does not render when offline and skipInstall === true', done => {\n        const options = {skipInstall: true};\n        const {lastFrame} = render(<TaskList command={'add'} terms={['babel']} options={options} done={complete}></TaskList>);\n        function complete() {\n            expect(lastFrame()).toMatchSnapshot();\n            done();\n        }\n    });\n    test('renders when offline and skipInstall === false', done => {\n        const options = {skipInstall: false};\n        const {lastFrame} = render(<TaskList command={'add'} terms={['babel']} options={options} done={complete}></TaskList>);\n        function complete() {\n            expect(lastFrame()).toMatchSnapshot();\n            done();\n        }\n    });\n});",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/__tests__/offline.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "__tests__/offline.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/offline.test.js~describe32",
    "access": null,
    "description": "Offline warning",
    "lineNumber": 9
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "test33",
    "testId": 33,
    "memberof": "__tests__/offline.test.js~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/offline.test.js~describe32.test33",
    "access": null,
    "description": "is-online returns false (for testing)",
    "lineNumber": 26
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "test34",
    "testId": 34,
    "memberof": "__tests__/offline.test.js~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/offline.test.js~describe32.test34",
    "access": null,
    "description": "can render",
    "lineNumber": 30
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "test35",
    "testId": 35,
    "memberof": "__tests__/offline.test.js~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/offline.test.js~describe32.test35",
    "access": null,
    "description": "does not render when offline and skipInstall === true",
    "lineNumber": 34
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "test36",
    "testId": 36,
    "memberof": "__tests__/offline.test.js~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/offline.test.js~describe32.test36",
    "access": null,
    "description": "renders when offline and skipInstall === false",
    "lineNumber": 42
  },
  {
    "__docId__": 299,
    "kind": "testFile",
    "name": "__tests__/tomo-test.js",
    "content": "import crypto from 'crypto';\nimport {tmpdir} from 'os';\nimport {join} from 'path';\nimport {existsSync, mkdirp, readFileSync} from 'fs-extra';\nimport rimraf from 'rimraf';\nimport dirTree from 'directory-tree';\nimport omit from 'lodash/omit';\nimport Queue from 'p-queue';\nimport delay from 'delay';\nimport {populateQueue} from '../src/ui';\nimport {format, maybeApply} from '../src/utils/common';\n\n// eslint-disable-next-line no-magic-numbers\nexport const testAsyncFunction = () => async ({skipInstall}) => await delay(skipInstall ? 0 : 1000 * Math.random());\nconst createTemporaryDirectory = async () => {\n    const tempDir = join(tmpdir(), `tomo-test-${crypto.randomBytes(20).toString('hex')}`);// eslint-disable-line no-magic-numbers\n    await mkdirp(tempDir);\n    return tempDir;\n};\nexport const useTemporaryDirectory = () => {\n    let tempDir;\n    const setTempDirectory = async () => {\n        tempDir = await createTemporaryDirectory();\n        return tempDir;\n    };\n    const cleanupTempDirectory = async () => {\n        await new Promise(resolve => rimraf(tempDir, resolve));\n    };\n    return [setTempDirectory, cleanupTempDirectory];\n};\nexport const removeAttributes = (obj, ...attrs) => {\n    const result = Object.entries(obj).reduce((acc, arr) => {\n        const [key, val] = arr;\n        const remove = val => removeAttributes(val, ...attrs);\n        return (key === 'children') ? {...acc, children: val.map(remove)} : {...acc, ...omit({[key]: val}, attrs)};\n    }, {});\n    return result;\n};\nexport const getDirectoryTree = (directory, options = {omit: ['extension', 'path']}) => {\n    const {omit} = options;\n    const tree = dirTree(directory);\n    const result = Object.assign(tree, {name: tree.name.substring(0, 'tomo-test'.length)});\n    return format(removeAttributes(result, ...omit));\n};\nexport const run = (tasks, options) => {\n    const {assign} = Object;\n    const queue = new Queue({concurrency: tasks.length});\n    const dispatch = () => {};\n    const _options = assign({}, options, {assetsDirectory: './assets'});\n    return populateQueue({\n        queue,\n        dispatch,\n        tasks: tasks.flatMap(val => maybeApply(val, _options)),\n        options: _options\n    });\n};\nexport const fileContents = path => {\n    const fullpath = join(process.cwd(), path);\n    return existsSync(fullpath) ? readFileSync(fullpath, 'utf8') : `No file found at ${fullpath}`;\n};\nexport const readMakefile = makefile => {\n    const [, ...rest] = makefile\n        .read()\n        .replace(/bin := .*\\/__tests__/, 'bin := home/user/project/__tests__')\n        .split('\\n');\n    return ['# Makefile created with tomo', ...rest].join('\\n');\n};\nexport const readMakefileContent = () => {\n    const regex = /^# Built from .*\\n/;\n    return fileContents('./Makefile').replace(regex, '# Makefile built from /path/to/package.json');\n};",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/__tests__/tomo-test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "testFile",
    "name": "__tests__/ui.test.js",
    "content": "import {getDirectoryTree, useTemporaryDirectory} from './tomo-test';\nimport Queue from 'p-queue';\nimport React from 'react';\nimport {render} from 'ink-testing-library';\nimport Tomo, {CommandError, Warning, Task, populateQueue} from '../src/ui';\n\njest.mock('is-online', () => (async () => true));\n\nconst ARROW_DOWN = '\\u001B[B';\nconst {assign} = Object;\n\ndescribe('populateQueue function', () => {\n    const text = 'test task text';\n    test('can run with defaults', () => {\n        populateQueue();\n    });\n    test('can run tasks with options and dispatch task results', async () => {\n        const condition = async () => true;\n        const task = jest.fn();\n        const options = {foo: 'bar'};\n        const customOptions = {some: 'option'};\n        const dispatch = jest.fn();\n        const tasks = [\n            {some: 'option'},\n            {condition, task, text},\n            {condition, task, text},\n            {condition, task, text}\n        ];\n        const queue = new Queue({concurrency: tasks.length});\n        await populateQueue({queue, tasks, dispatch, options});\n        expect(task.mock.calls.length).toBe(3);\n        expect(dispatch.mock.calls.length).toBe(4);// eslint-disable-line no-magic-numbers\n        const [passedOptions] = [...new Set(task.mock.calls.map(val => val[0]))];\n        expect(passedOptions).toEqual(assign(options, customOptions, {isNotOffline: true}));\n        expect(dispatch.mock.calls).toMatchSnapshot();\n    });\n    test('can only run tasks that pass condition', async () => {\n        const task = jest.fn();\n        const options = {foo: 'bar'};\n        const dispatch = jest.fn();\n        const tasks = [\n            {condition: async () => true, task, text},\n            {condition: async () => false, task, text},\n            {condition: async () => true, task, text},\n            {condition: async () => false, task, text}\n        ];\n        const queue = new Queue({concurrency: tasks.length});\n        await populateQueue({queue, tasks, dispatch, options});\n        const [passedOptions] = [...new Set(task.mock.calls.map(val => val[0]))];\n        expect(passedOptions).toMatchSnapshot();\n        expect(task.mock.calls.length).toBe(2);\n        expect(dispatch.mock.calls).toMatchSnapshot();\n    });\n    test('can catch task errors', async () => {\n        const task = jest.fn();\n        const options = {foo: 'bar'};\n        const dispatch = jest.fn();\n        const tasks = [\n            {text, condition: async () => true, task},\n            {text, condition: async () => {throw new Error();}, task},\n            {text, condition: async () => true, task},\n            {text, condition: async () => false, task}\n        ];\n        const queue = new Queue({concurrency: tasks.length});\n        await populateQueue({queue, tasks, dispatch, options});\n        expect(task.mock.calls.length).toBe(2);\n        expect(dispatch.mock.calls[2][0].type).toBe('error');\n    });\n});\ndescribe('Warning', () => {\n    test('can render', () => {\n        const callback = jest.fn();\n        const {lastFrame} = render(<Warning callback={callback}>Hello World</Warning>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n});\ndescribe('CommandError', () => {\n    let tempDirectory;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('can render component and create errors file', () => {\n        const errors = [{one: 1}, {two: 2}];\n        const {lastFrame} = render(<CommandError errors={errors}></CommandError>);\n        const tree = getDirectoryTree(tempDirectory);\n        expect(tree).toMatchSnapshot();\n        expect(lastFrame()).toMatchSnapshot();\n    });\n});\ndescribe('Task component', () => {\n    test('can render (pending)', () => {\n        const text = 'test task text';\n        const {lastFrame} = render(<Task text={text} isPending={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('can render (completed)', () => {\n        const text = 'test task text';\n        const {lastFrame} = render(<Task text={text} isComplete={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('can render (skipped)', () => {\n        const text = 'test task text';\n        const {lastFrame} = render(<Task text={text} isComplete={true} isSkipped={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('can render (errored)', () => {\n        const text = 'test task text';\n        const {lastFrame} = render(<Task text={text} isErrored={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('can render with default text', () => {\n        const {lastFrame} = render(<Task isComplete={true}></Task>);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n});\ndescribe('tomo', () => {\n    let tempDirectory;\n    const skipInstall = true;\n    const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n    const ORIGINAL_CONSOLE_ERROR = console.error;//eslint-disable-line no-console\n    beforeAll(() => {\n        console.error = jest.fn();//eslint-disable-line no-console\n    });\n    afterAll(() => {\n        console.error = ORIGINAL_CONSOLE_ERROR;//eslint-disable-line no-console\n    });\n    beforeEach(async () => {\n        tempDirectory = await setTempDir();\n        process.chdir(tempDirectory);\n    });\n    afterEach(async () => {\n        await cleanupTempDir();\n    });\n    test('add', () => {\n        const input = ['add'];\n        const {lastFrame, stdin} = render(<Tomo input={input} flags={{skipInstall}}/>);\n        expect(lastFrame()).toMatchSnapshot();\n        stdin.write(ARROW_DOWN);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    test('remove', () => {\n        const input = ['remove'];\n        const {lastFrame, stdin} = render(<Tomo input={input} flags={{skipInstall}} />);\n        expect(lastFrame()).toMatchSnapshot();\n        stdin.write(ARROW_DOWN);\n        expect(lastFrame()).toMatchSnapshot();\n    });\n    xtest('add eslint', done => {\n        const input = ['add', 'eslint'];\n        const flags = {skipInstall};\n        const {lastFrame} = render(<Tomo input={input} flags={flags} done={complete}/>);\n        function complete() {\n            expect(lastFrame()).toMatchSnapshot();\n            done();\n        }\n    });\n    xtest('add eslint --use-react', done => {\n        const input = ['add', 'eslint'];\n        const flags = {useReact: true, skipInstall};\n        const {lastFrame} = render(<Tomo input={input} flags={flags} done={complete}/>);\n        function complete() {\n            expect(lastFrame()).toMatchSnapshot();\n            done();\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/__tests__/ui.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe37",
    "access": null,
    "description": "populateQueue function",
    "lineNumber": 12
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "test38",
    "testId": 38,
    "memberof": "__tests__/ui.test.js~describe37",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe37.test38",
    "access": null,
    "description": "can run with defaults",
    "lineNumber": 14
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "test39",
    "testId": 39,
    "memberof": "__tests__/ui.test.js~describe37",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe37.test39",
    "access": null,
    "description": "can run tasks with options and dispatch task results",
    "lineNumber": 17
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "test40",
    "testId": 40,
    "memberof": "__tests__/ui.test.js~describe37",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe37.test40",
    "access": null,
    "description": "can only run tasks that pass condition",
    "lineNumber": 37
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "test41",
    "testId": 41,
    "memberof": "__tests__/ui.test.js~describe37",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe37.test41",
    "access": null,
    "description": "can catch task errors",
    "lineNumber": 54
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe42",
    "access": null,
    "description": "Warning",
    "lineNumber": 70
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "test43",
    "testId": 43,
    "memberof": "__tests__/ui.test.js~describe42",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe42.test43",
    "access": null,
    "description": "can render",
    "lineNumber": 71
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe44",
    "access": null,
    "description": "CommandError",
    "lineNumber": 77
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "test45",
    "testId": 45,
    "memberof": "__tests__/ui.test.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe44.test45",
    "access": null,
    "description": "can render component and create errors file",
    "lineNumber": 87
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "describe46",
    "testId": 46,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe46",
    "access": null,
    "description": "Task component",
    "lineNumber": 95
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "test47",
    "testId": 47,
    "memberof": "__tests__/ui.test.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe46.test47",
    "access": null,
    "description": "can render (pending)",
    "lineNumber": 96
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "test48",
    "testId": 48,
    "memberof": "__tests__/ui.test.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe46.test48",
    "access": null,
    "description": "can render (completed)",
    "lineNumber": 101
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "test49",
    "testId": 49,
    "memberof": "__tests__/ui.test.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe46.test49",
    "access": null,
    "description": "can render (skipped)",
    "lineNumber": 106
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "test50",
    "testId": 50,
    "memberof": "__tests__/ui.test.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe46.test50",
    "access": null,
    "description": "can render (errored)",
    "lineNumber": 111
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "test51",
    "testId": 51,
    "memberof": "__tests__/ui.test.js~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe46.test51",
    "access": null,
    "description": "can render with default text",
    "lineNumber": 116
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "__tests__/ui.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/ui.test.js~describe52",
    "access": null,
    "description": "tomo",
    "lineNumber": 121
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "test53",
    "testId": 53,
    "memberof": "__tests__/ui.test.js~describe52",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe52.test53",
    "access": null,
    "description": "add",
    "lineNumber": 139
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "test54",
    "testId": 54,
    "memberof": "__tests__/ui.test.js~describe52",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/ui.test.js~describe52.test54",
    "access": null,
    "description": "remove",
    "lineNumber": 146
  },
  {
    "__docId__": 319,
    "kind": "testFile",
    "name": "__tests__/utils.test.js",
    "content": "import {readMakefile as read} from './tomo-test';\nimport {\n    EslintConfigModuleEditor,\n    PackageJsonEditor,\n    choose,\n    getIntendedInput,\n    getVersions,\n    install,\n    uninstall,\n    withOptions\n} from '../src/utils';\nimport MakefileEditor from '../src/utils/MakefileEditor';\nimport {join} from 'path';\nimport execa from 'execa';\nimport commands from '../src/commands';\n\njest.mock('execa');\n\nconst testDirectory = join(__dirname, 'tomo-fixtures');\n/**\n * Verify package.json editor can create and edit a package.json manifest file\n * @test {PackageJsonEditor}\n */\ndescribe('package.json mem-fs editor', () => {\n    let pkg;\n    beforeEach(() => {\n        pkg = new PackageJsonEditor(testDirectory);\n    });\n    test('create', async () => {\n        pkg = new PackageJsonEditor('/some/directory');\n        expect(pkg.read()).toEqual('');\n        await pkg.create();\n        expect(pkg.read()).toMatchSnapshot();\n    });\n    test('read', () => {\n        expect(pkg.read()).toMatchSnapshot();\n    });\n    test('extend', async () => {\n        await pkg.extend({scripts: {foo: 'bar'}});\n        expect(pkg.read()).toMatchSnapshot();\n    });\n    test('copy', async () => {\n        const newDirPath = join(testDirectory, 'new');\n        await pkg.copy(newDirPath);\n        expect(pkg.fs.readJSON(join(newDirPath, 'package.json'))).toMatchSnapshot();\n    });\n    test('delete', async () => {\n        pkg = new PackageJsonEditor('/some/directory');\n        expect(pkg.read()).toEqual('');\n        await pkg.create();\n        expect(pkg.read()).toMatchSnapshot();\n        await pkg.delete();\n        expect(pkg.read()).toEqual('');\n    });\n    test('hasSome', () => {\n        expect(pkg.hasSome('react')).toBeFalsy();\n        expect(pkg.hasSome('webpack', 'execa')).toBeTruthy();\n        expect(pkg.hasSome('eslint')).toBeTruthy();\n    });\n    test('hasAll', () => {\n        expect(pkg.hasAll('react')).toBeFalsy();\n        expect(pkg.hasAll('some-module', 'execa')).toBeFalsy();\n        expect(pkg.hasAll('chalk', 'execa')).toBeTruthy();\n        // expect(pkg.hasAll('chalk', 'execa', '@babel/cli')).toBeTruthy();\n        expect(pkg.hasAll('eslint')).toBeTruthy();\n    });\n});\n/**\n * Verify ESLint module editor can create and edit an ESLint configuration file\n * @test {EslintConfigModuleEditor}\n */\ndescribe('.eslintrc.js mem-fs editor', () => {\n    let cfg;\n    beforeEach(() => {\n        cfg = new EslintConfigModuleEditor(testDirectory);\n    });\n    test('create', async () => {\n        cfg = new EslintConfigModuleEditor('/some/directory');\n        expect(cfg.read()).toEqual('');\n        await cfg.create();\n        expect(cfg.read()).toMatchSnapshot();\n    });\n    test('read', () => {\n        expect(cfg.read()).toMatchSnapshot();\n    });\n    test('extend', async () => {\n        expect(cfg.read()).toMatchSnapshot();\n        await cfg.extend({key: {foo: `'foo'`}});\n        expect(cfg.read()).toMatchSnapshot();\n        await cfg.extend({key: {bar: `'bar'`}});\n        expect(cfg.read()).toMatchSnapshot();\n    });\n    test('delete', async () => {\n        cfg = new EslintConfigModuleEditor('/some/directory');\n        expect(cfg.read()).toEqual('');\n        await cfg.create();\n        expect(cfg.read()).toMatchSnapshot();\n        await cfg.delete();\n        expect(cfg.read()).toEqual('');\n    });\n    test('prepend', async () => {\n        await cfg.prepend(`const {existsSync} = require('fs-extra');`);\n        expect(cfg.read()).toMatchSnapshot();\n        await cfg.prepend(`const {join} = require('path');`);\n        expect(cfg.read()).toMatchSnapshot();\n        await cfg.extend({key: {baz: 'baz'}});\n        expect(cfg.read()).toMatchSnapshot();\n    });\n});\ndescribe('Makefile editor', () => {\n    let makefile;\n    beforeEach(() => {\n        makefile = new MakefileEditor(testDirectory);\n    });\n    test('create', async () => {\n        await makefile.create();\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('append', async () => {\n        await makefile.append('test line');\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('addTask', async () => {\n        await makefile\n            .addTask('foo', ['echo foo'], {description: 'Foo task'})\n            .addTask('bar', ['echo bar'], {description: 'Bar task'})\n            .done();\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('addComment', async () => {\n        await makefile.addComment('Knowledge of the Holy One is understanding');\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('importScripts', () => {\n        expect(makefile.scripts).toMatchSnapshot();\n        makefile.importScripts();\n        expect(makefile.scripts).toMatchSnapshot();\n    });\n    test('appendScripts (no bin variable)', async () => {\n        makefile = new MakefileEditor(join(testDirectory, 'other-directory'));\n        await makefile\n            .importScripts()\n            .appendScripts()\n            .done();\n        expect(read(makefile)).toMatchSnapshot();\n    });\n    test('appendScripts (with bin variable)', async () => {\n        await makefile\n            .importScripts()\n            .appendScripts()\n            .done();\n        expect(read(makefile)).toMatchSnapshot();\n    });\n});\ndescribe('choose via options', () => {\n    test('with and without default options', () => {\n        const withoutDefault = {\n            a: ['a', 'aa', 'aaa'],\n            b: ['b', 'bb', 'bbb'],\n            c: ['c', 'cc', 'ccc']\n        };\n        const withDefault = {\n            a: ['a', 'aa', 'aaa'],\n            b: ['b', 'bb', 'bbb'],\n            c: ['c', 'cc', 'ccc'],\n            default: [0, 0, 0]\n        };\n        expect(choose(withoutDefault)({d: true})).toEqual(withoutDefault.a);\n        expect(choose(withDefault)({d: true})).toEqual(withDefault.default);\n        expect(choose(withDefault)({b: true})).toEqual(withDefault.b);\n        expect(choose(withDefault)({b: true, c: true})).toEqual(withDefault.b);\n        expect(choose(withDefault)({a: false, c: true})).toEqual(withDefault.c);\n    });\n});\ndescribe('getIntendedInput', () => {\n    test('return closest matches', () => {\n        const {intendedCommand, intendedTerms} = getIntendedInput(commands, 'ad', ['lint']);\n        expect(intendedCommand).toEqual('add');\n        expect(intendedTerms).toEqual(['eslint']);\n    });\n});\ndescribe('getVersions', () => {\n    test('handle no module name', async () => {\n        expect(await getVersions()).toEqual([]);\n    });\n    test('format response from npm (only allow valid version strings)', async () => {\n        const stdout = '1.0.0 ,\\n 2.0.0 ,\\n not valid ,\\n 3.0.0 ';\n        execa.mockResolvedValue({stdout});\n        expect(await getVersions('some-module-name')).toMatchSnapshot();\n    });\n});\ndescribe('install', () => {\n    const latest = true;\n    const skipInstall = true;\n    const dev = true;\n    test('handle array of string names', async () => {\n        expect(await install()).toEqual(['install']);\n        expect(await install(['some-module'])).toEqual(['install', 'some-module@latest']);\n        expect(await install(['some-module'])).toEqual(['install', 'some-module@latest']);\n        expect(await install(['some-module'], {latest: false, skipInstall})).toEqual(['install', 'some-module']);\n        expect(await install(['foo', 'bar'], {latest: false, skipInstall})).toEqual(['install', 'foo', 'bar']);\n        expect(await install(['some-module'], {dev, skipInstall})).toEqual(['install', 'some-module', '--save-dev']);\n        expect(await install(['some-module'], {dev, latest, skipInstall})).toEqual(['install', 'some-module@latest', '--save-dev']);\n        expect(await install(['foo', 'bar'], {latest: false, dev, skipInstall})).toEqual(['install', 'foo', 'bar', '--save-dev']);\n    });\n    test('only allow valid module names', async () => {\n        const INVALID_NAME = 'eLaBorAtE-paCkAgE-with-mixed-case';\n        expect(await install([INVALID_NAME])).toEqual(['install']);\n        expect(await install(['jest', INVALID_NAME])).toEqual(['install', 'jest@latest']);\n    });\n});\ndescribe('uninstall', () => {\n    test('handle array of string names', async () => {\n        expect(await uninstall()).toEqual(['uninstall']);\n        expect(await uninstall(['some-module'])).toEqual(['uninstall', 'some-module']);\n        expect(await uninstall(['some-module', 'foo', 'bar'])).toEqual(['uninstall', 'some-module', 'foo', 'bar']);\n    });\n    test('only allow valid module names', async () => {\n        const INVALID_NAME = 'eLaBorAtE-paCkAgE-with-mixed-case';\n        expect(await uninstall([INVALID_NAME])).toEqual(['uninstall']);\n        expect(await uninstall(['jest', INVALID_NAME])).toEqual(['uninstall', 'jest']);\n    });\n});\ndescribe('withOptions', () => {\n    test('add custom options', () => {\n        const options = {a: 1, b: 2};\n        expect(withOptions({a: 0, c: 1})(options)).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/__tests__/utils.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe55",
    "access": null,
    "description": "Verify package.json editor can create and edit a package.json manifest file",
    "lineNumber": 24,
    "testTargets": [
      "PackageJsonEditor"
    ]
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "test56",
    "testId": 56,
    "memberof": "__tests__/utils.test.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe55.test56",
    "access": null,
    "description": "create",
    "lineNumber": 29
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "test57",
    "testId": 57,
    "memberof": "__tests__/utils.test.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe55.test57",
    "access": null,
    "description": "read",
    "lineNumber": 35
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "test58",
    "testId": 58,
    "memberof": "__tests__/utils.test.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe55.test58",
    "access": null,
    "description": "extend",
    "lineNumber": 38
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "test59",
    "testId": 59,
    "memberof": "__tests__/utils.test.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe55.test59",
    "access": null,
    "description": "copy",
    "lineNumber": 42
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "test60",
    "testId": 60,
    "memberof": "__tests__/utils.test.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe55.test60",
    "access": null,
    "description": "delete",
    "lineNumber": 47
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "test61",
    "testId": 61,
    "memberof": "__tests__/utils.test.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe55.test61",
    "access": null,
    "description": "hasSome",
    "lineNumber": 55
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "test62",
    "testId": 62,
    "memberof": "__tests__/utils.test.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe55.test62",
    "access": null,
    "description": "hasAll",
    "lineNumber": 60
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe63",
    "access": null,
    "description": "Verify ESLint module editor can create and edit an ESLint configuration file",
    "lineNumber": 72,
    "testTargets": [
      "EslintConfigModuleEditor"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "test64",
    "testId": 64,
    "memberof": "__tests__/utils.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe63.test64",
    "access": null,
    "description": "create",
    "lineNumber": 77
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "test65",
    "testId": 65,
    "memberof": "__tests__/utils.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe63.test65",
    "access": null,
    "description": "read",
    "lineNumber": 83
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "test66",
    "testId": 66,
    "memberof": "__tests__/utils.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe63.test66",
    "access": null,
    "description": "extend",
    "lineNumber": 86
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "test67",
    "testId": 67,
    "memberof": "__tests__/utils.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe63.test67",
    "access": null,
    "description": "delete",
    "lineNumber": 93
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "test68",
    "testId": 68,
    "memberof": "__tests__/utils.test.js~describe63",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe63.test68",
    "access": null,
    "description": "prepend",
    "lineNumber": 101
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe69",
    "access": null,
    "description": "Makefile editor",
    "lineNumber": 110
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "test70",
    "testId": 70,
    "memberof": "__tests__/utils.test.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe69.test70",
    "access": null,
    "description": "create",
    "lineNumber": 115
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "test71",
    "testId": 71,
    "memberof": "__tests__/utils.test.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe69.test71",
    "access": null,
    "description": "append",
    "lineNumber": 119
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "test72",
    "testId": 72,
    "memberof": "__tests__/utils.test.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe69.test72",
    "access": null,
    "description": "addTask",
    "lineNumber": 123
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "test73",
    "testId": 73,
    "memberof": "__tests__/utils.test.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe69.test73",
    "access": null,
    "description": "addComment",
    "lineNumber": 130
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "test74",
    "testId": 74,
    "memberof": "__tests__/utils.test.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe69.test74",
    "access": null,
    "description": "importScripts",
    "lineNumber": 134
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "test75",
    "testId": 75,
    "memberof": "__tests__/utils.test.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe69.test75",
    "access": null,
    "description": "appendScripts (no bin variable)",
    "lineNumber": 139
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "test76",
    "testId": 76,
    "memberof": "__tests__/utils.test.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe69.test76",
    "access": null,
    "description": "appendScripts (with bin variable)",
    "lineNumber": 147
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe77",
    "access": null,
    "description": "choose via options",
    "lineNumber": 155
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "test78",
    "testId": 78,
    "memberof": "__tests__/utils.test.js~describe77",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe77.test78",
    "access": null,
    "description": "with and without default options",
    "lineNumber": 156
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe79",
    "access": null,
    "description": "getIntendedInput",
    "lineNumber": 175
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "test80",
    "testId": 80,
    "memberof": "__tests__/utils.test.js~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe79.test80",
    "access": null,
    "description": "return closest matches",
    "lineNumber": 176
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "describe81",
    "testId": 81,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe81",
    "access": null,
    "description": "getVersions",
    "lineNumber": 182
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "test82",
    "testId": 82,
    "memberof": "__tests__/utils.test.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe81.test82",
    "access": null,
    "description": "handle no module name",
    "lineNumber": 183
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "test83",
    "testId": 83,
    "memberof": "__tests__/utils.test.js~describe81",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe81.test83",
    "access": null,
    "description": "format response from npm (only allow valid version strings)",
    "lineNumber": 186
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe84",
    "access": null,
    "description": "install",
    "lineNumber": 192
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "test85",
    "testId": 85,
    "memberof": "__tests__/utils.test.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe84.test85",
    "access": null,
    "description": "handle array of string names",
    "lineNumber": 196
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "test86",
    "testId": 86,
    "memberof": "__tests__/utils.test.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe84.test86",
    "access": null,
    "description": "only allow valid module names",
    "lineNumber": 206
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe87",
    "access": null,
    "description": "uninstall",
    "lineNumber": 212
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "test88",
    "testId": 88,
    "memberof": "__tests__/utils.test.js~describe87",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe87.test88",
    "access": null,
    "description": "handle array of string names",
    "lineNumber": 213
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "test89",
    "testId": 89,
    "memberof": "__tests__/utils.test.js~describe87",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe87.test89",
    "access": null,
    "description": "only allow valid module names",
    "lineNumber": 218
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "__tests__/utils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/utils.test.js~describe90",
    "access": null,
    "description": "withOptions",
    "lineNumber": 224
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "test91",
    "testId": 91,
    "memberof": "__tests__/utils.test.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/utils.test.js~describe90.test91",
    "access": null,
    "description": "add custom options",
    "lineNumber": 225
  },
  {
    "__docId__": 357,
    "kind": "testFile",
    "name": "__tests__/yodawg.test.js",
    "content": "import {existsSync} from 'fs';\nimport {join} from 'path';\nimport {\n    removeAttributes,\n    getDirectoryTree,\n    useTemporaryDirectory\n} from './tomo-test';\nimport {partialRight} from 'lodash';\nimport {format} from '../src/utils/common';\n\ndescribe('Tomo testing tools', () => {\n    test('can create and cleanup temporary directories', async () => {\n        const [setTempDir, cleanupTempDir] = useTemporaryDirectory();\n        const tempDir = await setTempDir();\n        expect(existsSync(tempDir)).toBeTruthy();\n        await cleanupTempDir();\n        expect(existsSync(tempDir)).not.toBeTruthy();\n    });\n    test('can format objects for use as snapshots', () => {\n        const removePaths = partialRight(removeAttributes, 'path');\n        const result = removePaths({\n            path: 'a',\n            type: 'directory',\n            children: [\n                {\n                    path: 'aa',\n                    type: 'file'\n                },\n                {\n                    path: 'b',\n                    type: 'directory',\n                    children: [\n                        {\n                            path: 'c',\n                            type: 'directory',\n                            children: [\n                                {\n                                    path: 'd',\n                                    type: 'file'\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        });\n        expect(format(result)).toMatchSnapshot();\n    });\n    test('get directory tree', () => {\n        const folderpath = join(__dirname, 'tomo-fixtures/test-folder-tree');\n        const tree = getDirectoryTree(folderpath);\n        expect(tree).toMatchSnapshot();\n        const augmentedTree = getDirectoryTree(folderpath, {omit: ['path', 'name']});\n        expect(augmentedTree).toMatchSnapshot();\n    });\n});",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/__tests__/yodawg.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "__tests__/yodawg.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "__tests__/yodawg.test.js~describe92",
    "access": null,
    "description": "Tomo testing tools",
    "lineNumber": 11
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "test93",
    "testId": 93,
    "memberof": "__tests__/yodawg.test.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/yodawg.test.js~describe92.test93",
    "access": null,
    "description": "can create and cleanup temporary directories",
    "lineNumber": 12
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "test94",
    "testId": 94,
    "memberof": "__tests__/yodawg.test.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/yodawg.test.js~describe92.test94",
    "access": null,
    "description": "can format objects for use as snapshots",
    "lineNumber": 19
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "test95",
    "testId": 95,
    "memberof": "__tests__/yodawg.test.js~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "__tests__/yodawg.test.js~describe92.test95",
    "access": null,
    "description": "get directory tree",
    "lineNumber": 49
  }
]