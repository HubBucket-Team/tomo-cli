[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/commands/add-a11y.js",
    "content": "import {\n    install,\n    PackageJsonEditor,\n    someDoExist\n} from '../utils';\n\n/** @ignore */\nexport const tasks = [\n    {\n        text: 'Add a11y tasks to package.json',\n        task: async ({sourceDirectory}) => {\n            const script = {\n                'lint:a11y': `${sourceDirectory}/index.html`\n            };\n            const pkg = new PackageJsonEditor();\n            await pkg.extend({script}).commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install a11y dependencies',\n        task: ({skipInstall}) => install(['pa11y'], {dev: true, skipInstall}),\n        condition: () => someDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-a11y.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-a11y.js",
    "static": true,
    "longname": "src/commands/add-a11y.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-a11y.js",
    "importStyle": "{tasks}",
    "description": null,
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/commands/add-babel.js",
    "content": "import {\n    allDoNotExist,\n    BabelConfigModuleEditor,\n    install,\n    someDoExist\n} from '../utils';\n\nconst BABEL_DEPENDENCIES = [\n    '@babel/cli',\n    '@babel/core',\n    '@babel/runtime'\n];\nconst BABEL_PRESETS = [\n    '@babel/preset-env'\n];\nconst BABEL_PLUGINS = [\n    '@babel/plugin-transform-runtime',\n    '@babel/plugin-proposal-class-properties',\n    '@babel/plugin-proposal-export-default-from',\n    '@babel/plugin-proposal-optional-chaining'\n];\nconst BABEL_REACT_PRESET = [\n    '@babel/preset-react'\n];\n/** @ignore */\nexport const tasks = [\n    {\n        text: 'Create Babel config file',\n        task: async () => {\n            const cfg = new BabelConfigModuleEditor();\n            await cfg.create().commit();\n        },\n        condition: () => allDoNotExist('babel.config.js', '.babelrc', '.babelrc.js')\n    },\n    {\n        text: 'Install Babel core, CLI, presets, and plugins',\n        task: ({skipInstall}) => install([...BABEL_DEPENDENCIES, ...BABEL_PRESETS, ...BABEL_PLUGINS], {dev: true, skipInstall}),\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install Babel React preset',\n        task: ({skipInstall}) => install(BABEL_REACT_PRESET, {dev: true, skipInstall}),\n        condition: ({useReact}) => (useReact && someDoExist('package.json')),\n        optional: ({useReact}) => useReact\n    },\n    {\n        text: 'Add React support to Babel configuration file',\n        task: async () => {\n            const presets = [...BABEL_PRESETS, ...BABEL_REACT_PRESET];\n            const cfg = new BabelConfigModuleEditor();\n            await cfg.extend({presets}).commit();\n        },\n        condition: ({useReact}) => (useReact && someDoExist('babel.config.js')),\n        optional: ({useReact}) => useReact\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-babel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "BABEL_DEPENDENCIES",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~BABEL_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "BABEL_PRESETS",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~BABEL_PRESETS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "BABEL_PLUGINS",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~BABEL_PLUGINS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "BABEL_REACT_PRESET",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~BABEL_REACT_PRESET",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-babel.js",
    "static": true,
    "longname": "src/commands/add-babel.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-babel.js",
    "importStyle": "{tasks}",
    "description": null,
    "lineNumber": 26,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/commands/add-esdoc.js",
    "content": "import {\n    allDoNotExist,\n    createJsonEditor,\n    install,\n    PackageJsonEditor,\n    someDoExist\n} from '../utils';\n\nconst ESDOC_CONF = {\n    source: './src',\n    destination: './docs',\n    plugins: [\n        {\n            name: 'esdoc-standard-plugin'\n        },\n        {\n            name: 'esdoc-ecmascript-proposal-plugin',\n            option: {\n                all: true\n            }\n        }\n    ]\n};\nconst ESDOC_DEPENDENCIES = [\n    'esdoc',\n    'esdoc-ecmascript-proposal-plugin',\n    'esdoc-standard-plugin'\n];\nconst ESDOC_REACT_PLUGINS = [\n    'esdoc-jsx-plugin'\n];\nconst EsdocJsonEditor = createJsonEditor('esdoc.conf.json', ESDOC_CONF);\n/** @ignore */\nexport const tasks = [\n    {\n        text: 'Create esdoc configuration file',\n        task: async () => {\n            const cfg = new EsdocJsonEditor();\n            await cfg.create().commit();\n        },\n        condition: () => allDoNotExist('esdoc.conf.json', '.esdoc.json')\n    },\n    {\n        text: 'Add documentation tasks to package.json',\n        task: async ({sourceDirectory}) => {\n            const script = {\n                'lint:docs': `eslint . --no-eslintrc --rule valid-jsdoc:error --parser babel-eslint`,\n                'build:docs': `jsdoc ${sourceDirectory} -r --destination ./docs`,\n                'open:docs': 'opn ./docs/index.html',\n                predocs: 'npm run lint:docs',\n                docs: 'npm run build:docs',\n                postdocs: 'npm run open:docs'\n            };\n            const pkg = new PackageJsonEditor();\n            await pkg.extend({script}).commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install esdoc dependencies',\n        task: ({skipInstall}) => install([...ESDOC_DEPENDENCIES, 'opn-cli'], {dev: true, skipInstall}),\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install esdoc React plugins',\n        task: ({skipInstall}) => install(ESDOC_REACT_PLUGINS, {dev: true, skipInstall}),\n        condition: ({useReact}) => (useReact && someDoExist('package.json')),\n        optional: ({useReact}) => useReact\n    },\n    {\n        text: 'Add esdoc React plugin to configuration file',\n        task: async () => {\n            const {plugins} = ESDOC_CONF;\n            const cfg = new EsdocJsonEditor();\n            await cfg\n                .extend({\n                    plugins: [...plugins, {\n                        name: 'esdoc-jsx-plugin',\n                        options: {enable: true}\n                    }]\n                })\n                .commit();\n        },\n        condition: ({useReact}) => (useReact && someDoExist('esdoc.conf.json')),\n        optional: ({useReact}) => useReact\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-esdoc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "ESDOC_CONF",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~ESDOC_CONF",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"source\": string, \"destination\": string, \"plugins\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "ESDOC_DEPENDENCIES",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~ESDOC_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "ESDOC_REACT_PLUGINS",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~ESDOC_REACT_PLUGINS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "EsdocJsonEditor",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~EsdocJsonEditor",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-esdoc.js",
    "static": true,
    "longname": "src/commands/add-esdoc.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-esdoc.js",
    "importStyle": "{tasks}",
    "description": null,
    "lineNumber": 34,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/commands/add-eslint/index.js",
    "content": "import {join} from 'path';\nimport {\n    allDoNotExist,\n    install,\n    EslintConfigModuleEditor,\n    PackageJsonEditor,\n    Scaffolder,\n    someDoExist\n} from '../../utils';\n\nconst ESLINT_DEPENDENCIES = [\n    'eslint',\n    'babel-eslint',\n    'eslint-config-omaha-prime-grade',\n    'watch'\n];\nconst ESLINT_REACT_PLUGINS = [\n    'eslint-plugin-react'\n];\nconst sourceDirectory = join(__dirname, 'templates');\nconst scaffolder = new Scaffolder({sourceDirectory});\n/** @ignore */\nexport const tasks = [\n    {\n        text: 'Create ESLint configuration and .eslintignore files',\n        task: async () => {\n            await (new EslintConfigModuleEditor())\n                .create()\n                .commit();\n            await scaffolder\n                .copy('.eslintignore')\n                .commit();\n        },\n        condition: () => allDoNotExist('.eslintrc.js', '.eslintrc', '.eslintrc.json', '.eslintrc.yml')\n    },\n    {\n        text: 'Add lint tasks to package.json',\n        task: async ({sourceDirectory}) => {\n            const script = {\n                lint: `eslint . -c ./.eslintrc.js --fix`,\n                'lint:watch': `watch 'npm run lint' ${sourceDirectory}`,\n                'lint:tests': 'eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore'\n            };\n            await (new PackageJsonEditor())\n                .extend({script})\n                .commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install ESLint dependencies',\n        task: ({skipInstall}) => install(ESLINT_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install ESLint React plugins',\n        task: ({skipInstall}) => install(ESLINT_REACT_PLUGINS, {dev: true, skipInstall}),\n        condition: ({useReact}) => (useReact && someDoExist('package.json')),\n        optional: ({useReact}) => useReact\n    },\n    {\n        text: 'Add React support to ESLint configuration file',\n        task: async ({reactVersion}) => {\n            const REACT_BABEL_SETTINGS = {\n                parserOptions: {\n                    ecmaFeatures: {\n                        jsx: true\n                    }\n                },\n                settings: {\n                    react: {\n                        version: `'${reactVersion}'`\n                    }\n                },\n                extends: ['omaha-prime-grade', 'plugin:react/recommended']\n            };\n            await (new EslintConfigModuleEditor())\n                .extend(REACT_BABEL_SETTINGS)\n                .commit();\n        },\n        condition: ({useReact}) => (useReact && someDoExist('.eslintrc.js')),\n        optional: ({useReact}) => useReact\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-eslint/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "ESLINT_DEPENDENCIES",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~ESLINT_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "ESLINT_REACT_PLUGINS",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~ESLINT_REACT_PLUGINS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "sourceDirectory",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~sourceDirectory",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "scaffolder",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~scaffolder",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "src/utils.js~Scaffolder"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-eslint/index.js",
    "static": true,
    "longname": "src/commands/add-eslint/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-eslint/index.js",
    "importStyle": "{tasks}",
    "description": null,
    "lineNumber": 23,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/commands/add-jest.js",
    "content": "import {\n    install,\n    someDoExist,\n    PackageJsonEditor\n} from '../utils';\n\nconst JEST_DEPENDENCIES = [\n    'jest',\n    'babel-jest'\n];\n/** @ignore */\nexport const tasks = [\n    {\n        text: 'Add test tasks to package.json',\n        task: async () => {\n            const script = {\n                test: 'jest .*.test.js --coverage',\n                'test:watch': 'npm test -- --watchAll'\n            };\n            const pkg = new PackageJsonEditor();\n            await pkg.extend({script}).commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install Jest dependencies',\n        task: ({skipInstall}) => install(JEST_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: () => someDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-jest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "JEST_DEPENDENCIES",
    "memberof": "src/commands/add-jest.js",
    "static": true,
    "longname": "src/commands/add-jest.js~JEST_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-jest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-jest.js",
    "static": true,
    "longname": "src/commands/add-jest.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-jest.js",
    "importStyle": "{tasks}",
    "description": null,
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/commands/add-marionette/index.js",
    "content": "import {join} from 'path';\nimport {\n    install,\n    Scaffolder,\n    someDoExist\n} from '../../utils';\n\nconst MARIONETTE_DEPENDENCIES = [\n    'backbone',\n    'backbone.marionette',\n    'backbone.radio',\n    'handlebars',\n    'lodash',\n    'redux'\n];\nconst ALWAYS = async () => true;\nconst sourceDirectory = join(__dirname, 'templates');\nconst scaffolder = new Scaffolder({sourceDirectory});\n/** @ignore */\nexport const tasks = [\n    {\n        text: 'Add Marionette.js boilerplate',\n        task: async ({sourceDirectory}) => {\n            await scaffolder\n                .target(sourceDirectory)\n                .copy('index.html')\n                .copy('main.js')\n                .copy('app.js')\n                .target(`${sourceDirectory}/plugins`)\n                .copy('mn.radio.logging.js')\n                .copy('mn.redux.state.js')\n                .target(`${sourceDirectory}/shims`)\n                .copy('mn.renderer.shim.js')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Add CSS assets',\n        task: async () => {\n            await scaffolder\n                .target('assets/css')\n                .copy('style.css')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Add template assets',\n        task: async ({sourceDirectory}) => {\n            await scaffolder\n                .target(`${sourceDirectory}/shims`)\n                .copy('mn.templates.shim.js')\n                .target('assets/templates')\n                .copy('example.hbs')\n                .commit();\n        },\n        condition: ALWAYS\n    },\n    {\n        text: 'Install Marionette.js dependencies',\n        task: ({skipInstall}) => install(MARIONETTE_DEPENDENCIES, {skipInstall}),\n        condition: () => someDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-marionette/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "MARIONETTE_DEPENDENCIES",
    "memberof": "src/commands/add-marionette/index.js",
    "static": true,
    "longname": "src/commands/add-marionette/index.js~MARIONETTE_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "ALWAYS",
    "memberof": "src/commands/add-marionette/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/commands/add-marionette/index.js~ALWAYS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "sourceDirectory",
    "memberof": "src/commands/add-marionette/index.js",
    "static": true,
    "longname": "src/commands/add-marionette/index.js~sourceDirectory",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "scaffolder",
    "memberof": "src/commands/add-marionette/index.js",
    "static": true,
    "longname": "src/commands/add-marionette/index.js~scaffolder",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "src/utils.js~Scaffolder"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-marionette/index.js",
    "static": true,
    "longname": "src/commands/add-marionette/index.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-marionette/index.js",
    "importStyle": "{tasks}",
    "description": null,
    "lineNumber": 20,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/commands/add-postcss.js",
    "content": "import {\n    allDoNotExist,\n    install,\n    PackageJsonEditor,\n    PostcssConfigEditor,\n    someDoExist\n} from '../utils';\n\nconst POSTCSS_DEPENDENCIES = [\n    'cssnano',\n    'postcss-cli',\n    'postcss-reporter',\n    'postcss-safe-parser',\n    'postcss-import',\n    'postcss-cssnext',\n    'stylelint',\n    'uncss'\n];\n/** @ignore */\nexport const tasks = [\n    {\n        text: 'Create PostCSS config file',\n        task: async () => {\n            const cfg = new PostcssConfigEditor();\n            await cfg.create().commit();\n        },\n        condition: () => allDoNotExist('postcss.config.js')\n    },\n    {\n        text: 'Add PostCSS tasks to package.json',\n        task: async () => {\n            const pkg = new PackageJsonEditor();\n            await pkg.extend({}).commit();\n        },\n        condition: () => someDoExist('package.json')\n    },\n    {\n        text: 'Install PostCSS dependencies',\n        task: ({skipInstall}) => install([POSTCSS_DEPENDENCIES], {dev: true, skipInstall}),\n        condition: () => someDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-postcss.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "POSTCSS_DEPENDENCIES",
    "memberof": "src/commands/add-postcss.js",
    "static": true,
    "longname": "src/commands/add-postcss.js~POSTCSS_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-postcss.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-postcss.js",
    "static": true,
    "longname": "src/commands/add-postcss.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-postcss.js",
    "importStyle": "{tasks}",
    "description": null,
    "lineNumber": 20,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/commands/add-rust.js",
    "content": "/* eslint-disable max-len */\nimport {arrowRight} from 'figures';\nimport {\n    PackageJsonEditor,\n    someDoExist\n} from '../utils';\n\n/** @ignore */\nexport const tasks = [\n    {\n        text: `Add Rust ${arrowRight} WASM build tasks to package.json`,\n        task: async ({assetsDirectory}) => {\n            const script = {\n                'build:wasm': `rustc +nightly --target wasm32-unknown-unknown -O --crate-type=cdylib ${assetsDirectory}/rust/main.rs -o ./${assetsDirectory}/rust/main.wasm`,\n                'postbuild:wasm': `wasm-gc ${assetsDirectory}/rust/main.wasm ${assetsDirectory}/rust/main.min.wasm`\n            };\n            const pkg = new PackageJsonEditor();\n            await pkg.extend({script}).commit();\n        },\n        condition: () => someDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-rust.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-rust.js",
    "static": true,
    "longname": "src/commands/add-rust.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-rust.js",
    "importStyle": "{tasks}",
    "description": null,
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/commands/add-webpack.js",
    "content": "import {\n    allDoNotExist,\n    someDoExist,\n    install,\n    WebpackConfigEditor\n} from '../utils';\n\nconst WEBPACK_DEPENDENCIES = [\n    'webpack',\n    'webpack-cli',\n    'webpack-dashboard',\n    'webpack-jarvis',\n    'webpack-dev-server'\n];\n/** @ignore */\nexport const tasks = [\n    {\n        text: 'Create Webpack configuration file',\n        task: async ({sourceDirectory}) => {\n            const entry = {\n                app: `${sourceDirectory}/main.js`\n            };\n            await (new WebpackConfigEditor())\n                .create()\n                .prepend(`const DashboardPlugin = require('webpack-dashboard/plugin');`)\n                .prepend(`const {resolve} = require('path');`)\n                .extend({entry})\n                .commit();\n        },\n        condition: () => allDoNotExist('webpack.config.js')\n    },\n    {\n        text: 'Install Webpack dependencies',\n        task: ({skipInstall}) => install(WEBPACK_DEPENDENCIES, {dev: true, skipInstall}),\n        condition: () => someDoExist('package.json')\n    }\n];\nexport default tasks;",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/add-webpack.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "WEBPACK_DEPENDENCIES",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~WEBPACK_DEPENDENCIES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "tasks",
    "memberof": "src/commands/add-webpack.js",
    "static": true,
    "longname": "src/commands/add-webpack.js~tasks",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/add-webpack.js",
    "importStyle": "{tasks}",
    "description": null,
    "lineNumber": 16,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/commands/common.js",
    "content": "import {mkdirp} from 'fs-extra';\nimport {\n    allDoNotExist,\n    PackageJsonEditor\n} from '../utils';\n\n/** @ignore */\nexport const createPackageJson = [\n    {\n        text: 'Create package.json',\n        task: async () => {\n            const pkg = new PackageJsonEditor();\n            await pkg.create().commit();\n        },\n        condition: () => allDoNotExist('package.json')\n    }\n];\n/** @ignore */\nexport const createSourceDirectory = [\n    {\n        text: 'Create source directory',\n        task: ({sourceDirectory}) => mkdirp(sourceDirectory),\n        condition: ({sourceDirectory}) => allDoNotExist(sourceDirectory)\n    }\n];",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/common.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "createPackageJson",
    "memberof": "src/commands/common.js",
    "static": true,
    "longname": "src/commands/common.js~createPackageJson",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/common.js",
    "importStyle": "{createPackageJson}",
    "description": null,
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "createSourceDirectory",
    "memberof": "src/commands/common.js",
    "static": true,
    "longname": "src/commands/common.js~createSourceDirectory",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/commands/common.js",
    "importStyle": "{createSourceDirectory}",
    "description": null,
    "lineNumber": 19,
    "ignore": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/commands/index.js",
    "content": "/* eslint-disable no-magic-numbers */\nimport {\n    createPackageJson,\n    createSourceDirectory\n} from './common';\nimport addA11y from './add-a11y';\nimport addBabel from './add-babel';\nimport addEsdoc from './add-esdoc';\nimport addEslint from './add-eslint';\nimport addJest from './add-jest';\nimport addMarionette from './add-marionette';\nimport addPostcss from './add-postcss';\nimport addWebpack from './add-webpack';\n\nconst createProject = [\n    ...createPackageJson,\n    ...createSourceDirectory,\n    ...addBabel,\n    ...addEslint,\n    ...addJest\n];\nconst create = {\n    project: createProject,\n    app: [\n        ...createProject,\n        ...addMarionette\n    ],\n    server: [\n        ...createProject\n    ]\n};\nconst add = {\n    a11y: addA11y,\n    babel: addBabel,\n    docs: addEsdoc,\n    eslint: [\n        ...addBabel,\n        ...addEslint\n    ],\n    jest: [\n        ...addBabel,\n        ...addJest\n    ],\n    postcss: addPostcss,\n    webpack: addWebpack\n};\n\nmodule.exports = {\n    add,\n    create,\n    new: create// alias for create\n};",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/commands/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "createProject",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~createProject",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "create",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~create",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"project\": *, \"app\": *, \"server\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "add",
    "memberof": "src/commands/index.js",
    "static": true,
    "longname": "src/commands/index.js~add",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/commands/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"a11y\": *, \"babel\": *, \"docs\": *, \"eslint\": *, \"jest\": *, \"postcss\": *, \"webpack\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/index.js",
    "content": "#!/usr/bin/env node\n\nimport React from 'react';\nimport {render} from 'ink';\nimport meow from 'meow';\nimport {cyan, dim, gray} from 'chalk';\nimport Tomo from './ui';\n// import updateNotifier from 'update-notifier';\n// Notify updater\n// const pkg = require(`../package.json`);\n// updateNotifier({pkg}).notify();\n\nconst help = `\n\t${gray.bold('Usage')}\n\t\t$ ${cyan('tomo [command] [term] [options]')}\n\n\t${gray.bold('Options')}\n\n        --source-directory, -d  Directory for source code [Default: ./src]\n        --assets-directory,     Directory for assets [Default: ./assets]\n        --use-react, -r         Add React support to workflow [Default: false]\n        --react-version         React version for ESLint configuration [Default: '16.8']\n\t\t--ignore-warnings, -i   Ignore warning messages [Default: false]\n\t\t--skip-install, -s      Skip npm installations [Default: false]\n\n\t${gray.bold('Examples')}\n\n\t\t$ tomo\n\t\t    ${dim('I love Ink')}\n\t\t$ tomo --name=ponies\n\t\t    ${dim('I love ponies')}\t\n`;\nconst options = {\n    help,\n    flags: {\n        sourceDirectory: {\n            type: 'string',\n            default: './src',\n            alias: 'd'\n        },\n        assetsDirectory: {\n            type: 'string',\n            default: './assets'\n        },\n        useReact: {\n            type: 'boolean',\n            default: false,\n            alias: 'r'\n        },\n        reactVersion: {\n            type: 'string',\n            default: '16.8'\n        },\n        ignoreWarnings: {\n            type: 'boolean',\n            default: false,\n            alias: 'i'\n        },\n        skipInstall: {\n            type: 'boolean',\n            default: false,\n            alias: 's'\n        }\n    }\n};\nconst cli = meow(options);\n\nconst {input, flags} = cli;\nrender(<Tomo input={input} flags={flags}/>, {exitOnCtrlC: true});",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "help",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~help",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "options",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~options",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{\"help\": *, \"flags\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "cli",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~cli",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "input",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~input",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/ui.js",
    "content": "import React, {useContext, useEffect, useReducer, Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {isFunction, isString, isUndefined} from 'lodash';\nimport Queue from 'p-queue';\nimport {Box, Color, Text, StdinContext} from 'ink';\nimport {default as InkBox} from 'ink-box';\nimport Spinner from 'ink-spinner';\nimport SelectInput from 'ink-select-input';\nimport figures from 'figures';\nimport commands from './commands';\nimport {getIntendedInput} from './utils';\n\nconst Check = ({isSkipped}) => (<Text bold>\n    <Color green={!isSkipped} dim={isSkipped}>{figures.tick}</Color>\n</Text>);\nconst Item = ({isSelected, label}) => <Color bold={isSelected} cyan={isSelected}>{label}</Color>;\nconst Indicator = ({isSelected}) => <Box marginRight={1}>{isSelected ? <Color bold cyan>{figures.arrowRight}</Color> : ' '}</Box>;\nconst SubCommandSelect = ({items, onSelect}) => <Box paddingTop={1} paddingBottom={1} paddingLeft={1}>\n    <SelectInput\n        items={items}\n        onSelect={onSelect}\n        itemComponent={Item}\n        indicatorComponent={Indicator}\n    ></SelectInput>\n</Box>;\nconst UnderConstruction = () => <Box marginBottom={1}>\n    <InkBox padding={{left: 1, right: 1}} margin={{left: 1, top: 1}}>\n        <Color bold yellow>UNDER CONSTRUCTION</Color>\n    </InkBox>\n</Box>;\nconst ErrorMessage = ({info}) => <Box flexDirection={'column'} marginBottom={1}>\n    <InkBox borderColor={'yellow'} margin={{left: 1, top: 1}} padding={{left: 1, right: 1}}>\n        <Color yellow>(╯°□ °)╯ ┻━┻ arrrgh...</Color>\n    </InkBox>\n    <Box marginLeft={4}>\n        ↳ <Color dim>Something went wrong...</Color>\n    </Box>\n    <Box marginLeft={6} marginTop={1}>\n        <Color dim><Box>{info}</Box></Color>\n    </Box>\n</Box>;\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            info: '',\n            error: {},\n            hasError: false\n        };\n    }\n    static getDerivedStateFromError() {\n        return {hasError: true};\n    }\n    componentDidCatch(error, info) {\n        this.setState({error, info});\n    }\n    render() {\n        const {error, hasError} = this.state;\n        const {children} = this.props;\n        return hasError ? <ErrorMessage error={error}/> : children;\n    }\n}\n/**\n * Add async tasks to a queue, handle completion with actions dispatched via dispatch function\n * @param {Object} data Data to be used for populating queue\n * @param {Queue} [data.queue={}] p-queue instance\n * @param {Object[]} [data.tasks=[]] Array of task objects\n * @param {function} [data.dispatch=()=>{}] Function to dispatch task completion (complete, skip, error) actions\n * @param {Object} [data.options={}] Options object to pass to task function\n * @return {undefined} Returns nothing (side effects only)\n */\nexport async function populateQueue(data = {queue: {}, tasks: [], dispatch: () => {}, options: {}}) {\n    const {queue, tasks, dispatch, options} = data;\n    for (const [index, item] of tasks.entries()) {\n        const {condition, task} = item;\n        try {\n            if (await condition(options)) {\n                await queue\n                    .add(() => task(options))\n                    .then(() => dispatch({type: 'complete', payload: index}))\n                    .catch(() => dispatch({type: 'error', payload: 'Error adding task to queue'}));\n            } else {\n                dispatch({type: 'skipped', payload: index});\n            }\n        } catch (error) {\n            dispatch({type: 'error', payload: error});\n        }\n    }\n}\n/**\n * Component to display warning message requiring user input\n * @param {Object} props Function component props\n * @param {ReactNode} props.children Function component children\n * @param {function} props.callback Function to be called after user interacts with warning\n * @return {ReactComponent} Warning component\n */\nexport const Warning = ({callback, children}) => {\n    const {setRawMode, stdin} = useContext(StdinContext);\n    useEffect(() => {\n        setRawMode && setRawMode(true);\n        stdin.on('data', callback);\n        return function cleanup() {\n            stdin.removeListener('data', callback);\n            setRawMode && setRawMode(false);\n        };\n    });\n    return <Box flexDirection={'column'} marginBottom={1}>\n        <InkBox borderColor={'yellow'} margin={{left: 1, top: 1}} padding={{left: 1, right: 1}}>\n            <Color yellow>oops...</Color>\n        </InkBox>\n        <Box marginLeft={4}>\n            ↳ {children}\n        </Box>\n        <Box marginLeft={6} marginTop={1}>\n            <Color dim>Press </Color><Text bold>ENTER</Text><Color dim> to continue</Color>\n        </Box>\n    </Box>;\n};\n/**\n * Task component\n * @param {Object} props Function component props\n * @param {boolean} props.isComplete Control display of check (true) or loading (false)\n * @param {boolean} props.isSkipped Control color of check - green (false) or dim (true)\n * @param {string} props.text Task text\n * @example\n * <Task text={'This task is done before it starts'} isComplete={true}></Task>\n * @return {ReactComponent} Task component\n */\nexport const Task = ({isComplete, isSkipped, text}) => <Box flexDirection='row' marginLeft={3}>\n    {isComplete ?\n        <Check isSkipped={isSkipped}></Check> :\n        <Color cyan><Spinner></Spinner></Color>\n    } <Text><Color dim={isComplete}>{text}</Color></Text>\n</Box>;\n/**\n * Task list component\n * @param {Object} props Function component props\n * @param {string} props.command Command - new | create | add\n * @param {Object} props.options Command line flags (see help)\n * @param {string[]} props.terms Terms - eslint | babel | jest | postcss | docs\n * @example\n * <TaskList command={'add'} terms={'eslint'} options={{skipInstall: true}}></TaskList>\n * @return {ReactComponent} Task list component\n */\nexport const TaskList = ({command, options, terms}) => {\n    const reducer = (state, {type, payload}) => {\n        const {completed, errors, skipped} = state;\n        if (type === 'complete') {\n            return {\n                completed: [...completed, payload],\n                skipped,\n                errors\n            };\n        } else if (type === 'skipped') {\n            return {\n                completed,\n                skipped: [...skipped, payload],\n                errors\n            };\n        } else if (type === 'error') {\n            return {\n                completed,\n                skipped,\n                errors: [...errors, {details: payload}]\n            };\n        }\n    };\n    const initialState = {\n        completed: [],\n        skipped: [],\n        errors: []\n    };\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const queue = new Queue({concurrency: 1});\n    const tasks = commands[command][terms[0]];\n    useEffect(() => {\n        populateQueue({queue, tasks, options, dispatch});\n    }, []);\n    return <ErrorBoundary>\n        <Box flexDirection={'column'} marginBottom={1}>\n            <InkBox\n                margin={{left: 1, top: 1}}\n                padding={{left: 1, right: 1}}\n                borderColor={((state.completed.length + state.skipped.length) === tasks.length) ? 'green' : 'cyan'}\n                borderStyle={'round'}>\n                <Color bold white>{command} {terms.join(' ')}</Color>\n            </InkBox>\n            <Box flexDirection='column' marginBottom={1}>\n                {tasks.map(({optional, text}, index) => {\n                    const {completed, skipped} = state;\n                    const isSkipped = skipped.includes(index);\n                    const isComplete = completed.includes(index) || isSkipped;\n                    const shouldBeShown = isUndefined(optional) || (isFunction(optional) && optional(options));\n                    return shouldBeShown ?\n                        <Task text={text} isSkipped={isSkipped} isComplete={isComplete} key={index}></Task> :\n                        <Box key={index}></Box>;\n                })}\n            </Box>\n        </Box>\n    </ErrorBoundary>;\n};\n/**\n * Main tomo UI class\n */\nclass UI extends Component {\n    constructor(props) {\n        super(props);\n        const {input} = props;\n        const [command, ...terms] = input;\n        const hasCommand = isString(command);\n        const hasTerms = terms.length > 0;\n        const [intendedCommand, intendedTerms] = hasCommand ? getIntendedInput(commands, command, terms) : [, []];\n        const compareTerms = (term, index) => (term !== terms[index]);\n        const showWarning = (command !== intendedCommand) || (intendedTerms.map(compareTerms).some(Boolean));\n        this.state = {\n            hasTerms,\n            hasCommand,\n            showWarning,\n            intendedTerms,\n            intendedCommand\n        };\n        this.updateWarning = this.updateWarning.bind(this);\n        this.updateTerms = this.updateTerms.bind(this);\n    }\n    render() {\n        const {flags} = this.props;\n        const {hasCommand, hasTerms, intendedCommand, intendedTerms, showWarning} = this.state;\n        const {ignoreWarnings} = flags;\n        const VALID_COMMANDS = hasCommand ? Object.keys(commands[intendedCommand]) : [];\n        const selectInputCommandItems = hasCommand ? VALID_COMMANDS.map(command => ({label: command, value: command})) : [];\n        return <ErrorBoundary>\n            {(showWarning && !ignoreWarnings) ?\n                <Warning callback={this.updateWarning}>\n                    <Text>Did you mean <Color bold green>{intendedCommand} {intendedTerms.join(' ')}</Color>?</Text>\n                </Warning> :\n                (hasCommand && hasTerms) ?\n                    <TaskList command={intendedCommand} terms={intendedTerms} options={flags}></TaskList> :\n                    hasCommand ?\n                        <SubCommandSelect items={selectInputCommandItems} onSelect={this.updateTerms}></SubCommandSelect> :\n                        <UnderConstruction/>\n            }\n        </ErrorBoundary>;\n    }\n    /**\n     * Callback function for warning component\n     * @param {string} data Character data from stdin\n     * @return {undefined} Returns nothing\n     */\n    updateWarning(data) {\n        const key = String(data);\n        (key === '\\r') ? this.setState({showWarning: false}) : process.exit(0);\n    }\n    /**\n     * @param {Object} args Function options\n     * @param {string} args.value Intended term\n     * @return {undefined} Returns nothing\n     */\n    updateTerms({value}) {\n        this.setState({\n            hasTerms: true,\n            intendedTerms: [value]\n        });\n    }\n}\nCheck.propTypes = {\n    isSkipped: PropTypes.bool\n};\nCheck.defaultProps = {\n    isSkipped: false\n};\nSubCommandSelect.propTypes = {\n    items: PropTypes.arrayOf(PropTypes.object),\n    onSelect: PropTypes.func\n};\nIndicator.propTypes = {\n    isSelected: PropTypes.bool\n};\nIndicator.defaultProps = {\n    isSelected: false\n};\nItem.propTypes = {\n    isSelected: PropTypes.bool,\n    label: PropTypes.string.isRequired\n};\nItem.defaultProps = {\n    isSelected: false\n};\nErrorMessage.propTypes = {\n    info: PropTypes.string\n};\nErrorBoundary.propTypes = {\n    children: PropTypes.node\n};\nTask.propTypes = {\n    isComplete: PropTypes.bool,\n    isSkipped: PropTypes.bool,\n    text: PropTypes.string\n};\nTask.defaultProps = {\n    isComplete: false,\n    isSkipped: false,\n    text: 'task description'\n};\nTaskList.propTypes = {\n    command: PropTypes.string,\n    options: PropTypes.any,\n    terms: PropTypes.arrayOf(PropTypes.string)\n};\nTaskList.defaultProps = {\n    command: '',\n    options: {skipInstall: false},\n    terms: []\n};\nWarning.propTypes = {\n    callback: PropTypes.func,\n    children: PropTypes.node\n};\nUI.propTypes = {\n    input: PropTypes.array,\n    flags: PropTypes.object\n};\nUI.defaultProps = {\n    input: [],\n    flags: {}\n};\n\nexport default UI;\n",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/ui.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "Check",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Check",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isSkipped\": *}"
        ],
        "defaultRaw": {
          "isSkipped": null
        },
        "defaultValue": "{\"isSkipped\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "Item",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Item",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isSelected\": *, \"label\": *}"
        ],
        "defaultRaw": {
          "isSelected": null,
          "label": null
        },
        "defaultValue": "{\"isSelected\":null,\"label\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "Indicator",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Indicator",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"isSelected\": *}"
        ],
        "defaultRaw": {
          "isSelected": null
        },
        "defaultValue": "{\"isSelected\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "SubCommandSelect",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~SubCommandSelect",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"items\": *, \"onSelect\": *}"
        ],
        "defaultRaw": {
          "items": null,
          "onSelect": null
        },
        "defaultValue": "{\"items\":null,\"onSelect\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "UnderConstruction",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~UnderConstruction",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "ErrorMessage",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~ErrorMessage",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"info\": *}"
        ],
        "defaultRaw": {
          "info": null
        },
        "defaultValue": "{\"info\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "ErrorBoundary",
    "memberof": "src/ui.js",
    "static": true,
    "longname": "src/ui.js~ErrorBoundary",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ui.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~ErrorBoundary#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "state",
    "memberof": "src/ui.js~ErrorBoundary",
    "static": false,
    "longname": "src/ui.js~ErrorBoundary#state",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "{\"info\": *, \"error\": *, \"hasError\": *}"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "getDerivedStateFromError",
    "memberof": "src/ui.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~ErrorBoundary.getDerivedStateFromError",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"hasError\": boolean}"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "componentDidCatch",
    "memberof": "src/ui.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~ErrorBoundary#componentDidCatch",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "render",
    "memberof": "src/ui.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~ErrorBoundary#render",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "populateQueue",
    "memberof": "src/ui.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/ui.js~populateQueue",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{populateQueue}",
    "description": "Add async tasks to a queue, handle completion with actions dispatched via dispatch function",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data to be used for populating queue"
      },
      {
        "nullable": null,
        "types": [
          "Queue"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "data.queue",
        "description": "p-queue instance"
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "data.tasks",
        "description": "Array of task objects"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "data.dispatch",
        "description": "Function to dispatch task completion (complete, skip, error) actions"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "data.options",
        "description": "Options object to pass to task function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "Returns nothing (side effects only)"
    }
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "Warning",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Warning",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{Warning}",
    "description": "Component to display warning message requiring user input",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Function component props"
      },
      {
        "nullable": null,
        "types": [
          "ReactNode"
        ],
        "spread": false,
        "optional": false,
        "name": "props.children",
        "description": "Function component children"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "props.callback",
        "description": "Function to be called after user interacts with warning"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactComponent"
      ],
      "spread": false,
      "description": "Warning component"
    }
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "Task",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~Task",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{Task}",
    "description": "Task component",
    "examples": [
      "<Task text={'This task is done before it starts'} isComplete={true}></Task>"
    ],
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Function component props"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.isComplete",
        "description": "Control display of check (true) or loading (false)"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.isSkipped",
        "description": "Control color of check - green (false) or dim (true)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.text",
        "description": "Task text"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactComponent"
      ],
      "spread": false,
      "description": "Task component"
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "TaskList",
    "memberof": "src/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ui.js~TaskList",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "{TaskList}",
    "description": "Task list component",
    "examples": [
      "<TaskList command={'add'} terms={'eslint'} options={{skipInstall: true}}></TaskList>"
    ],
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Function component props"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.command",
        "description": "Command - new | create | add"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.options",
        "description": "Command line flags (see help)"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "props.terms",
        "description": "Terms - eslint | babel | jest | postcss | docs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactComponent"
      ],
      "spread": false,
      "description": "Task list component"
    }
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "UI",
    "memberof": "src/ui.js",
    "static": true,
    "longname": "src/ui.js~UI",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/ui.js",
    "importStyle": "UI",
    "description": "Main tomo UI class",
    "lineNumber": 205,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ui.js~UI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~UI#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "state",
    "memberof": "src/ui.js~UI",
    "static": false,
    "longname": "src/ui.js~UI#state",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "{\"hasTerms\": *, \"hasCommand\": *, \"showWarning\": *, \"intendedTerms\": *, \"intendedCommand\": *}"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "render",
    "memberof": "src/ui.js~UI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~UI#render",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "updateWarning",
    "memberof": "src/ui.js~UI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~UI#updateWarning",
    "access": "public",
    "description": "Callback function for warning component",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Character data from stdin"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "Returns nothing"
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "updateTerms",
    "memberof": "src/ui.js~UI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ui.js~UI#updateTerms",
    "access": "public",
    "description": "",
    "lineNumber": 258,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Function options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.value",
        "description": "Intended term"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": "Returns nothing"
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/utils.js",
    "content": "import delay from 'delay';\nimport {join} from 'path';\nimport execa from 'execa';\nimport Queue from 'p-queue';\nimport prettier from 'prettier';\nimport {first, merge} from 'lodash';\nimport {existsSync, pathExists} from 'fs-extra';\nimport memFs from 'mem-fs';\nimport editor from 'mem-fs-editor';\nimport {findBestMatch} from 'string-similarity';\n\nconst {assign} = Object;\nconst INDENT_SPACES = 4;\nconst PRETTIER_OPTIONS = {\n    bracketSpacing: false,\n    parser: 'json-stringify',\n    printWidth: 80,\n    tabWidth: 4,\n    quotes: true\n};\n// eslint-disable-next-line no-magic-numbers\nexport const testAsyncFunction = () => async ({skipInstall}) => await delay(skipInstall ? 0 : 1000 * Math.random());\n/**\n * Check that at least one file or files exist\n * @param  {...string} args File or folder path(s)\n * @example\n * // some/folder/\n * //   ├─ foo.js\n * //   └── bar.js\n * const hasFoo = someDoExist('some/folder/foo.js');\n * const hasBaz = someDoExist('some/folder/baz.js');\n * const hasSomething = someDoExist('some/folder/bar.js', 'some/folder/baz.js');\n * console.log(hasFoo); // true\n * console.log(hasBaz); // false\n * console.log(hasSomething); // true\n * @return {boolean} Some files/path do exist (true) or all do not exist (false)\n */\nexport const someDoExist = async (...args) => {\n    const checks = await Promise.all(args.map(val => pathExists(join(process.cwd(), val))));\n    return checks.some(Boolean);\n};\n/**\n * Check that all files do not exist\n * @example\n * // some/folder/\n * //   ├─ foo.js\n * //   └── bar.js\n * const noPackageJson = allDoNotExist('some/folder/package.json');\n * console.log(noPackageJson); // true\n * @param  {...string} args File or folder path(s)\n * @return {boolean} All files/paths do not exist (true) or some do (false)\n */\nexport const allDoNotExist = async (...args) => {\n    const checks = await Promise.all(args.map(val => pathExists(join(process.cwd(), val))));\n    return checks.every(val => !val);\n};\n/**\n * Format input code using Prettier\n * @param {*} [code=''] Code to be formatted\n * @example <caption>Prettier options</caption>\n * {\n *     bracketSpacing: false,\n *     parser: 'json-stringify',\n *     printWidth: 80,\n *     tabWidth: 4,\n *     quotes: true\n * }\n * @return {string} Code formatted by Prettier\n */\nexport const format = (code = {}) => prettier.format(JSON.stringify(code), PRETTIER_OPTIONS).replace(/\"/g, '');\n/**\n * Use string-similarity module to determine closest matching string\n * @param {Object} commands Object with commands as key values, terms as key values for each command object\n * @param {string} command Command string input\n * @param {string[]} [terms=[]] Terms input\n * @example\n * const [intendedCommand, intendedTerms] = getIntendedInput(commands, command, terms);\n * @return {string[]} [intendedCommand, intendedTerms] Array destructed assignment is recommended (see example)\n */\nexport const getIntendedInput = (commands, command, terms = []) => {\n    const VALID_COMMANDS = Object.keys(commands);\n    const {bestMatch: {target: intendedCommand}} = findBestMatch(command, VALID_COMMANDS);\n    const VALID_TERMS = Object.keys(commands[intendedCommand]);\n    const intendedTerms = terms.map(term => findBestMatch(term, VALID_TERMS).bestMatch.target);\n    return [intendedCommand, intendedTerms];\n};\n/**\n * Use npm CLI to return array of module versions\n * @param {string} name npm module name\n * @example\n * const versions = getVersions('react');\n * @return {string[]} Array of versions\n */\nexport const getVersions = async (name = '') => (name.length === 0) ? [] : (await execa('npm', ['view', name, 'versions']))\n    .stdout\n    .split(',\\n')\n    .map(str => str.match(/\\d+[.]\\d+[.]\\d+/))\n    .map(first);\n/**\n * Install dependencies with npm\n * @param {string[]} [dependencies=[]] Modules to install\n * @param {Object} options Options to configure installation\n * @param {boolean} [options.dev=false] If true, add \"--save-dev\"\n * @param {boolean} [options.latest=true] If true, add \"@latest\" to all module names\n * @param {boolean} [options.skipInstall=false] Do not install (mostly for testing)\n * @example <caption>Install production dependencies</caption>\n * install(['react']);\n * @example <caption>Install development dependencies</caption>\n * install(['jest', 'babel-jest'], {dev: true});\n * @return {string[]} Array of inputs (mostly for testing)\n */\nexport const install = async (dependencies = [], options = {dev: false, latest: true, skipInstall: false}) => {\n    const {dev, latest, skipInstall} = options;\n    const identity = i => i;\n    const concat = val => str => str + val;\n    const args = ['install']\n        .concat(dependencies.map(latest ? concat('@latest') : identity))\n        .concat(dev ? '--save-dev' : []);\n    skipInstall || await execa('npm', args);\n    return args;\n};\n/**\n * Determine if system supports Rust (necessary Rust dependencies are installed)\n * @return {boolean} Are Rust components installed?\n */\nexport const verifyRustInstallation = () => {\n\n};\nconst silent = () => { };\n/**\n * Base class to serve as base for JSON and module builder classes\n */\nexport class BasicEditor {\n    constructor() {\n        const fs = editor.create(memFs.create());\n        const queue = new Queue({concurrency: 1});\n        assign(this, {fs, queue});\n    }\n    /**\n     *\n     * @param {string} destination Destination to copy file\n     * @return {BasicEditor} Chaining OK\n     */\n    copy(destination) {\n        const self = this;\n        const {fs, path, queue} = self;\n        const [filename] = path.split('/').reverse();\n        queue.add(() => fs.copy(path, join(destination, filename)));\n        return self;\n    }\n    /**\n     * @return {BasicEditor} Chaining OK\n     */\n    delete() {\n        const self = this;\n        const {fs, path, queue} = self;\n        queue.add(() => fs.delete(path));\n        return self;\n    }\n    /**\n     * Write changes to disk\n     * @return {Promise} Resolves when queue is empty\n     */\n    async commit() {\n        const {fs, queue} = this;\n        await new Promise(resolve => fs.commit(resolve));\n        await queue.onEmpty();\n    }\n}\n/**\n * Create and edit a JSON file with a fluent API\n * @param {string} filename Name of file to edit\n * @param {object} [contents={}] Contents of file\n * @return {JsonEditor} JsonEditor class (extends {@link BasicEditor})\n */\nexport const createJsonEditor = (filename, contents = {}) => class JsonEditor extends BasicEditor {\n    contents = contents;\n    constructor(cwd = process.cwd()) {\n        super();\n        const path = join(cwd, filename);\n        assign(this, {path});\n    }\n    create() {\n        const self = this;\n        const {contents, fs, path, queue} = self;\n        existsSync(path) || queue.add(() => fs.writeJSON(path, contents, null, INDENT_SPACES));\n        return self;\n    }\n    read() {\n        const {fs, path} = this;\n        return fs.readJSON(path) || '';\n    }\n    extend(contents) {\n        const self = this;\n        const {fs, path, queue} = self;\n        queue.add(() => fs.extendJSON(path, contents, null, INDENT_SPACES));\n        return self;\n    }\n};\n/**\n * Create and edit a JS module with a fluent API\n * @param {string} filename Name of file to edit\n * @param {string} [contents='module.exports = {};'] Contents of file\n * @param {string} [prependedContents=''] Content prepended to top of file\n * @return {ModuleEditor} ModuleEditor class (extends {@link BasicEditor})\n */\nexport const createModuleEditor = (filename, contents = 'module.exports = {};', prependedContents = '') => class ModuleEditor extends BasicEditor {\n    contents = contents;\n    prependedContents = prependedContents;\n    created = false;\n    constructor(cwd = process.cwd()) {\n        super();\n        const path = join(cwd, filename);\n        assign(this, {path});\n    }\n    create(...args) {\n        const self = this;\n        const {contents, path} = self;\n        self.created || (existsSync(path) || self.write(contents, ...args));\n        return self;\n    }\n    read() {\n        const {fs, path} = this;\n        return fs.exists(path) ? fs.read(path) : '';\n    }\n    write(content) {\n        const self = this;\n        const {fs, path, prependedContents, queue} = self;\n        const formatted = `${prependedContents}module.exports = ${format(content)}`.replace(/\\r*\\n$/g, ';');\n        queue\n            .add(() => fs.write(path, formatted))\n            .then(() => self.created = existsSync(path))\n            .catch(silent);\n        return self;\n    }\n    extend(code) {\n        this.contents = merge(contents, code);\n        this.write(this.contents);\n        return this;\n    }\n    prepend(code) {\n        const self = this;\n        const {contents, prependedContents} = self;\n        self.prependedContents = `${code}\\n${prependedContents}`.replace(/\\n*$/, '\\n\\n');\n        self.write(contents);\n        return self;\n    }\n};\n/**\n * Class to create scaffolders when creating folders, and copying files/templates\n * @example\n * import {Scaffolder} from './utils';\n * const scaffolder = new Scaffolder();\n * await scaffolder\n *     .target('/path/to/copy/files')\n *     .copy('foo.js')\n *     .copy('bar.js')\n *     .commit();\n */\nexport class Scaffolder {\n    /**\n     *\n     * @param {Object} options Scaffolding options\n     * @param {string} options.sourceDirectory Source directory for template files\n     */\n    constructor(options = {sourceDirectory: join(__dirname, 'templates')}) {\n        const {sourceDirectory} = options;\n        const targetDirectory = './';\n        const fs = editor.create(memFs.create());\n        const queue = new Queue({concurrency: 1});\n        assign(this, {fs, queue, sourceDirectory, targetDirectory});\n    }\n    /**\n     * Set source directory\n     * @param {string} path Source directory of template files\n     * @returns {Scaffolder} Chaining OK\n     */\n    source(path) {\n        this.sourceDirectory = path;\n        return this;\n    }\n    /**\n     * Set target directory\n     * @param {string} path Target directory of template files\n     * @returns {Scaffolder} Chaining OK\n     */\n    target(path) {\n        this.targetDirectory = path;\n        return this;\n    }\n    /**\n     * Copy a file\n     * @param {string} path Path string of file to be copied\n     * @returns {Scaffolder} Chaining OK\n     */\n    copy(path) {\n        const self = this;\n        const {fs, queue, sourceDirectory, targetDirectory} = self;\n        const source = join(sourceDirectory, path);\n        const target = join(process.cwd(), targetDirectory, ...path.split('/'));\n        queue.add(() => fs.copy(source, target)).catch(silent);\n        return self;\n    }\n    /**\n     * Write changes to disk\n     * @return {Promise} Resolves when queue is empty\n     */\n    async commit() {\n        const {fs, queue} = this;\n        await new Promise(resolve => fs.commit(resolve));\n        await queue.onEmpty();\n    }\n}\n/**\n * Create and edit a Babel.js configuration file with a fluent API\n * @type {ModuleEditor}\n * @example <caption>Extend module.exports content and prepend text to the top of the file</caption>\n * const cfg = new BabelConfigModuleEditor();\n * await cfg\n *     .create()\n *     .extend({\n *         presets: [`'@babel/preset-env'`]\n *     })\n *     .prepend(`const {existsSync} = require('fs-extra');`)\n *     .commit();\n */\nexport const BabelConfigModuleEditor = createModuleEditor('babel.config.js', {\n    plugins: [\n        `'@babel/plugin-transform-runtime'`,\n        `'@babel/plugin-proposal-class-properties'`,\n        `'@babel/plugin-proposal-export-default-from'`,\n        `'@babel/plugin-proposal-optional-chaining'`\n    ],\n    presets: [`'@babel/preset-env'`]\n});\n/**\n * Create and edit an ESLint configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * const cfg = new EslintConfigModuleEditor();\n * await cfg.create().commit();\n */\nexport const EslintConfigModuleEditor = createModuleEditor('.eslintrc.js', {\n    env: {\n        es6: true,\n        jest: true\n    },\n    extends: [\n        `'omaha-prime-grade'`\n    ],\n    parser: `'babel-eslint'`\n});\n/**\n * Create and edit a package.json manifest file with a fluent API\n * @type {JsonEditor}\n * @example <caption>Create a new package.json</caption>\n * const pkg = new PackageJsonEditor();\n * await pkg.create().commit();\n * @example <caption>Create a new package.json and read its contents (chaining OK)</caption>\n * const pkg = new PackageJsonEditor();\n * const contents = pkg.create().read();\n * @example <caption>Extend a package.json</caption>\n * const script = {test: 'jest --coverage'};\n * await pkg.extend({script}).commit();\n * @example <caption>Create and extend a package.json without writing to disk (chaining OK)</caption>\n * const script = {\n *     lint: 'eslint index.js -c ./.eslintrc.js'\n * };\n * await pkg\n *     .create(false)\n *     .extend({script}, false)\n *     .commit();\n */\nexport const PackageJsonEditor = createJsonEditor('package.json', {\n    name: 'my-project',\n    version: '0.0.0',\n    description: 'A super cool app/server/tool/library/widget/thingy',\n    license: 'MIT',\n    keywords: []\n});\n/**\n * Create and edit an PostCSS configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * const cfg = new PostcssConfigEditor();\n * await cfg.create().commit();\n */\nexport const PostcssConfigEditor = createModuleEditor('postcss.config.js', {\n    parser: `require('postcss-safe-parser')`,\n    processors: [\n        `require('stylelint')()`,\n        `require('postcss-import')()`,\n        `require('postcss-cssnext')()`,\n        `require('uncss').postcssPlugin({html: ['index.html']})`,\n        `require('cssnano')()`,\n        `require('postcss-reporter')({clearReportedMessages: true})`\n    ]\n});\n/**\n * Create and edit a Webpack configuration file with a fluent API\n * @type {ModuleEditor}\n * @example\n * const cfg = new WebpackConfigEditor();\n * await cfg.create().commit();\n */\nexport const WebpackConfigEditor = createModuleEditor('webpack.config.js', {\n    mode: `'development'`,\n    entry: {\n        app: `'./src/main.js'`\n    },\n    output: {\n        path: `resolve('./dist')`,\n        filename: `'bundle.min.js'`\n    },\n    module: {\n        rules: [\n            {\n                test: `/\\.js?$/`,\n                exclude: `/node_modules/`,\n                loader: `'babel-loader'`,\n                query: {\n                    presets: [`'env'`]\n                }\n            }\n        ]\n    },\n    plugins: [\n        `new DashboardPlugin()`\n    ]\n});",
    "static": true,
    "longname": "/home/vagrant/dev/tomo-cli/src/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "assign",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~assign",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "INDENT_SPACES",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~INDENT_SPACES",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "PRETTIER_OPTIONS",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~PRETTIER_OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"bracketSpacing\": *, \"parser\": string, \"printWidth\": number, \"tabWidth\": number, \"quotes\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "testAsyncFunction",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~testAsyncFunction",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{testAsyncFunction}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "someDoExist",
    "memberof": "src/utils.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils.js~someDoExist",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{someDoExist}",
    "description": "Check that at least one file or files exist",
    "examples": [
      "// some/folder/\n//   ├─ foo.js\n//   └── bar.js\nconst hasFoo = someDoExist('some/folder/foo.js');\nconst hasBaz = someDoExist('some/folder/baz.js');\nconst hasSomething = someDoExist('some/folder/bar.js', 'some/folder/baz.js');\nconsole.log(hasFoo); // true\nconsole.log(hasBaz); // false\nconsole.log(hasSomething); // true"
    ],
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "File or folder path(s)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Some files/path do exist (true) or all do not exist (false)"
    }
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "allDoNotExist",
    "memberof": "src/utils.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils.js~allDoNotExist",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{allDoNotExist}",
    "description": "Check that all files do not exist",
    "examples": [
      "// some/folder/\n//   ├─ foo.js\n//   └── bar.js\nconst noPackageJson = allDoNotExist('some/folder/package.json');\nconsole.log(noPackageJson); // true"
    ],
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "File or folder path(s)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "All files/paths do not exist (true) or some do (false)"
    }
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "format",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~format",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{format}",
    "description": "Format input code using Prettier",
    "examples": [
      "<caption>Prettier options</caption>\n{\n    bracketSpacing: false,\n    parser: 'json-stringify',\n    printWidth: 80,\n    tabWidth: 4,\n    quotes: true\n}"
    ],
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "code",
        "description": "Code to be formatted"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Code formatted by Prettier"
    }
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "getIntendedInput",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~getIntendedInput",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{getIntendedInput}",
    "description": "Use string-similarity module to determine closest matching string",
    "examples": [
      "const [intendedCommand, intendedTerms] = getIntendedInput(commands, command, terms);"
    ],
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "commands",
        "description": "Object with commands as key values, terms as key values for each command object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "Command string input"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "terms",
        "description": "Terms input"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "[intendedCommand, intendedTerms] Array destructed assignment is recommended (see example)"
    }
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "getVersions",
    "memberof": "src/utils.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils.js~getVersions",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{getVersions}",
    "description": "Use npm CLI to return array of module versions",
    "examples": [
      "const versions = getVersions('react');"
    ],
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "npm module name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Array of versions"
    }
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "install",
    "memberof": "src/utils.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/utils.js~install",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{install}",
    "description": "Install dependencies with npm",
    "examples": [
      "<caption>Install production dependencies</caption>\ninstall(['react']);",
      "<caption>Install development dependencies</caption>\ninstall(['jest', 'babel-jest'], {dev: true});"
    ],
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "dependencies",
        "description": "Modules to install"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options to configure installation"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.dev",
        "description": "If true, add \"--save-dev\""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.latest",
        "description": "If true, add \"@latest\" to all module names"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.skipInstall",
        "description": "Do not install (mostly for testing)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Array of inputs (mostly for testing)"
    }
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "verifyRustInstallation",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~verifyRustInstallation",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{verifyRustInstallation}",
    "description": "Determine if system supports Rust (necessary Rust dependencies are installed)",
    "lineNumber": 126,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Are Rust components installed?"
    },
    "params": []
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "silent",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~silent",
    "access": "public",
    "export": false,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "BasicEditor",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~BasicEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{BasicEditor}",
    "description": "Base class to serve as base for JSON and module builder classes",
    "lineNumber": 133,
    "interface": false
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.js~BasicEditor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "copy",
    "memberof": "src/utils.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.js~BasicEditor#copy",
    "access": "public",
    "description": "",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": "Destination to copy file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BasicEditor"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "delete",
    "memberof": "src/utils.js~BasicEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.js~BasicEditor#delete",
    "access": "public",
    "description": "",
    "lineNumber": 154,
    "return": {
      "nullable": null,
      "types": [
        "BasicEditor"
      ],
      "spread": false,
      "description": "Chaining OK"
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "commit",
    "memberof": "src/utils.js~BasicEditor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils.js~BasicEditor#commit",
    "access": "public",
    "description": "Write changes to disk",
    "lineNumber": 164,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when queue is empty"
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "createJsonEditor",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~createJsonEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{createJsonEditor}",
    "description": "Create and edit a JSON file with a fluent API",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "Name of file to edit"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "contents",
        "description": "Contents of file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JsonEditor"
      ],
      "spread": false,
      "description": "JsonEditor class (extends {@link BasicEditor})"
    }
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "createModuleEditor",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~createModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{createModuleEditor}",
    "description": "Create and edit a JS module with a fluent API",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "Name of file to edit"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "contents",
        "description": "Contents of file"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "prependedContents",
        "description": "Content prepended to top of file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": "ModuleEditor class (extends {@link BasicEditor})"
    }
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "Scaffolder",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~Scaffolder",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{Scaffolder}",
    "description": "Class to create scaffolders when creating folders, and copying files/templates",
    "examples": [
      "import {Scaffolder} from './utils';\nconst scaffolder = new Scaffolder();\nawait scaffolder\n    .target('/path/to/copy/files')\n    .copy('foo.js')\n    .copy('bar.js')\n    .commit();"
    ],
    "lineNumber": 260,
    "interface": false
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.js~Scaffolder#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Scaffolding options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.sourceDirectory",
        "description": "Source directory for template files"
      }
    ]
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "source",
    "memberof": "src/utils.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.js~Scaffolder#source",
    "access": "public",
    "description": "Set source directory",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Scaffolder} Chaining OK"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Source directory of template files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Scaffolder"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "sourceDirectory",
    "memberof": "src/utils.js~Scaffolder",
    "static": false,
    "longname": "src/utils.js~Scaffolder#sourceDirectory",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "target",
    "memberof": "src/utils.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.js~Scaffolder#target",
    "access": "public",
    "description": "Set target directory",
    "lineNumber": 287,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Scaffolder} Chaining OK"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Target directory of template files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Scaffolder"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "targetDirectory",
    "memberof": "src/utils.js~Scaffolder",
    "static": false,
    "longname": "src/utils.js~Scaffolder#targetDirectory",
    "access": "public",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "copy",
    "memberof": "src/utils.js~Scaffolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.js~Scaffolder#copy",
    "access": "public",
    "description": "Copy a file",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Scaffolder} Chaining OK"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path string of file to be copied"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Scaffolder"
      ],
      "spread": false,
      "description": "Chaining OK"
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "commit",
    "memberof": "src/utils.js~Scaffolder",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils.js~Scaffolder#commit",
    "access": "public",
    "description": "Write changes to disk",
    "lineNumber": 308,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when queue is empty"
    },
    "params": []
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "BabelConfigModuleEditor",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~BabelConfigModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{BabelConfigModuleEditor}",
    "description": "Create and edit a Babel.js configuration file with a fluent API",
    "examples": [
      "<caption>Extend module.exports content and prepend text to the top of the file</caption>\nconst cfg = new BabelConfigModuleEditor();\nawait cfg\n    .create()\n    .extend({\n        presets: [`'@babel/preset-env'`]\n    })\n    .prepend(`const {existsSync} = require('fs-extra');`)\n    .commit();"
    ],
    "lineNumber": 327,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "EslintConfigModuleEditor",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~EslintConfigModuleEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{EslintConfigModuleEditor}",
    "description": "Create and edit an ESLint configuration file with a fluent API",
    "examples": [
      "const cfg = new EslintConfigModuleEditor();\nawait cfg.create().commit();"
    ],
    "lineNumber": 343,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "PackageJsonEditor",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~PackageJsonEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{PackageJsonEditor}",
    "description": "Create and edit a package.json manifest file with a fluent API",
    "examples": [
      "<caption>Create a new package.json</caption>\nconst pkg = new PackageJsonEditor();\nawait pkg.create().commit();",
      "<caption>Create a new package.json and read its contents (chaining OK)</caption>\nconst pkg = new PackageJsonEditor();\nconst contents = pkg.create().read();",
      "<caption>Extend a package.json</caption>\nconst script = {test: 'jest --coverage'};\nawait pkg.extend({script}).commit();",
      "<caption>Create and extend a package.json without writing to disk (chaining OK)</caption>\nconst script = {\n    lint: 'eslint index.js -c ./.eslintrc.js'\n};\nawait pkg\n    .create(false)\n    .extend({script}, false)\n    .commit();"
    ],
    "lineNumber": 374,
    "type": {
      "nullable": null,
      "types": [
        "JsonEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "PostcssConfigEditor",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~PostcssConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{PostcssConfigEditor}",
    "description": "Create and edit an PostCSS configuration file with a fluent API",
    "examples": [
      "const cfg = new PostcssConfigEditor();\nawait cfg.create().commit();"
    ],
    "lineNumber": 388,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "WebpackConfigEditor",
    "memberof": "src/utils.js",
    "static": true,
    "longname": "src/utils.js~WebpackConfigEditor",
    "access": "public",
    "export": true,
    "importPath": "tomo-cli/src/utils.js",
    "importStyle": "{WebpackConfigEditor}",
    "description": "Create and edit a Webpack configuration file with a fluent API",
    "examples": [
      "const cfg = new WebpackConfigEditor();\nawait cfg.create().commit();"
    ],
    "lineNumber": 406,
    "type": {
      "nullable": null,
      "types": [
        "ModuleEditor"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "index",
    "content": "# tomo-cli [![Build Status](https://img.shields.io/travis/jhwohlgemuth/tomo-cli.svg?logo=travis&style=for-the-badge)](https://travis-ci.org/jhwohlgemuth/tomo-cli) [![codecov](https://img.shields.io/codecov/c/github/jhwohlgemuth/tomo-cli.svg?logo=codecov&style=for-the-badge)](https://codecov.io/gh/jhwohlgemuth/tomo-cli)\n\n> A friendly command line tool designed to help create sustainable software using web technology\n\n## Install\n\n```\n$ npm install --global tomo-cli\n```\n\n\n## Usage\n\n```js\n$ tomo --help\n\n  Usage\n    tomo [command] [term] [options]\n\n  Options\n\n    --source-directory, -d  Directory for source code [Default: ./src]\n    --assets-directory,     Directory for assets [Default: ./assets]\n    --use-react, -r         Add React support to workflow [Default: false]\n    --react-version         React version for ESLint configuration [Default: '16.8']\n    --ignore-warnings, -i   Ignore warning messages [Default: false]\n    --skip-install, -s      Skip npm installations [Default: false]\n\n  Examples\n    $ tomo\n```\n\n\n## License\n\nMIT © [Jason Wohlgemuth](http://omaha.js.org)\n",
    "longname": "/home/vagrant/dev/tomo-cli/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"tomo-cli\",\n    \"version\": \"0.0.0\",\n    \"description\": \"A friendly command line tool designed to help create sustainable software using web technology\",\n    \"license\": \"MIT\",\n    \"bin\": {\n        \"tomo\": \"dist/index.js\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/jhwohlgemuth/tomo-cli.git\"\n    },\n    \"author\": \"Jason Wohlgemuth <jhwohlgemuth@gmail.com> (omaha.js.org)\",\n    \"engines\": {\n        \"node\": \">=6\"\n    },\n    \"scripts\": {\n        \"copy:assets\": \"cpy '**/*.(html|hbs|css)' '**/[.]*' '../dist/' --cwd=src --parents --recursive\",\n        \"dev\": \"stmux [ \\\"npm run build:watch\\\" : \\\"npm run lint:watch\\\" ]\",\n        \"prebuild\": \"npm run build:clean\",\n        \"build\": \"babel src --out-dir dist --ignore __tests__\",\n        \"postbuild\": \"npm run copy:assets\",\n        \"build:clean\": \"rm -frd ./dist\",\n        \"build:watch\": \"watch 'npm run build' ./src\",\n        \"build:docs\": \"esdoc -c ./esdoc.conf.json\",\n        \"test\": \"jest .*.test.js --coverage\",\n        \"test:e2e\": \"jest .*.e2e.js\",\n        \"test:watch\": \"npm test -- --watchAll\",\n        \"open:coverage\": \"opn ./coverage/lcov-report/index.html\",\n        \"open:docs\": \"opn ./docs/index.html\",\n        \"lint\": \"eslint . -c ./.eslintrc.js --fix\",\n        \"lint:watch\": \"watch 'npm run lint' ./src\",\n        \"lint:tests\": \"eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore\",\n        \"lint:tests:watch\": \"watch 'npm run lint:tests' ./__tests__\",\n        \"lint:config\": \"eslint -c ./.eslintrc.js *.js --fix\",\n        \"lint:docs\": \"eslint src/*.js src/**/*.js --no-eslintrc --rule valid-jsdoc:error --parser babel-eslint\",\n        \"lint:all\": \"npm-run-all lint lint:tests lint:docs\",\n        \"predocs\": \"npm run lint:docs\",\n        \"docs\": \"npm run build:docs\",\n        \"postdocs\": \"npm run open:docs\"\n    },\n    \"jest\": {\n        \"testMatch\": [\n            \"**/__tests__/**/*.(e2e|test).[jt]s?(x)\"\n        ],\n        \"testPathIgnorePatterns\": [\n            \"/__tests__/fixtures\"\n        ]\n    },\n    \"keywords\": [],\n    \"dependencies\": {\n        \"chalk\": \"2.4.2\",\n        \"delay\": \"4.2.0\",\n        \"execa\": \"1.0.0\",\n        \"figures\": \"3.0.0\",\n        \"fs-extra\": \"7.0.1\",\n        \"ink\": \"2.1.1\",\n        \"ink-big-text\": \"1.0.1\",\n        \"ink-box\": \"1.0.0\",\n        \"ink-select-input\": \"3.1.0\",\n        \"ink-spinner\": \"3.0.1\",\n        \"lodash\": \"4.17.11\",\n        \"mem-fs\": \"1.1.3\",\n        \"mem-fs-editor\": \"5.1.0\",\n        \"meow\": \"5.0.0\",\n        \"p-queue\": \"5.0.0\",\n        \"prettier\": \"1.17.0\",\n        \"prop-types\": \"15.7.2\",\n        \"react\": \"16.8.6\",\n        \"some-module\": \"0.0.3\",\n        \"string-similarity\": \"3.0.0\",\n        \"update-notifier\": \"2.5.0\",\n        \"xterm\": \"3.12.2\"\n    },\n    \"devDependencies\": {\n        \"@babel/cli\": \"^7.4.3\",\n        \"@babel/core\": \"^7.4.3\",\n        \"@babel/plugin-proposal-class-properties\": \"^7.4.0\",\n        \"@babel/plugin-proposal-export-default-from\": \"^7.2.0\",\n        \"@babel/plugin-proposal-optional-chaining\": \"^7.2.0\",\n        \"@babel/plugin-transform-runtime\": \"^7.4.3\",\n        \"@babel/preset-env\": \"^7.4.3\",\n        \"@babel/preset-react\": \"7.0.0\",\n        \"@babel/runtime\": \"^7.4.3\",\n        \"babel-eslint\": \"^10.0.1\",\n        \"babel-jest\": \"24.7.1\",\n        \"cpy-cli\": \"2.0.0\",\n        \"directory-tree\": \"2.2.1\",\n        \"esdoc\": \"^1.1.0\",\n        \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n        \"esdoc-jsx-plugin\": \"^1.0.0\",\n        \"esdoc-standard-plugin\": \"^1.0.0\",\n        \"eslint\": \"^5.16.0\",\n        \"eslint-config-omaha-prime-grade\": \"^11.0.0\",\n        \"eslint-plugin-react\": \"7.12.4\",\n        \"ink-testing-library\": \"1.0.1\",\n        \"jest\": \"24.7.1\",\n        \"npm-run-all\": \"4.1.5\",\n        \"opn-cli\": \"4.1.0\",\n        \"rimraf\": \"2.6.3\",\n        \"stmux\": \"1.6.1\",\n        \"watch\": \"^1.0.2\"\n    },\n    \"bugs\": {\n        \"url\": \"https://github.com/jhwohlgemuth/tomo-cli/issues\"\n    },\n    \"homepage\": \"https://github.com/jhwohlgemuth/tomo-cli#readme\",\n    \"script\": {\n        \"lint\": \"eslint . -c ./.eslintrc.js --fix\",\n        \"lint:watch\": \"watch 'npm run lint' undefined\",\n        \"lint:tests\": \"eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore\"\n    }\n}\n",
    "longname": "/home/vagrant/dev/tomo-cli/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]