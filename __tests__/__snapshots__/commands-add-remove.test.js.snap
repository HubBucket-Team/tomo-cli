// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`"Add" commands add-a11y 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"lint:aria\\": \\"pa11y ./dist/index.html\\"
    }
}
"
`;

exports[`"Add" commands add-babel (with React) 1`] = `
"{
    name: tomo-test,
    children: [
        {
            name: babel.config.js,
            size: 387,
            type: file
        }
    ],
    size: 387,
    type: directory
}
"
`;

exports[`"Add" commands add-babel (with React) 2`] = `
"module.exports = {
    plugins: [
        '@babel/plugin-transform-runtime',
        '@babel/plugin-proposal-class-properties',
        '@babel/plugin-proposal-export-default-from',
        '@babel/plugin-proposal-optional-chaining',
        'react-hot-loader/babel'
    ],
    presets: [
        '@babel/preset-env',
        'babel-preset-minify',
        '@babel/preset-react'
    ]
};"
`;

exports[`"Add" commands add-babel 1`] = `
"{
    name: tomo-test,
    children: [
        {
            name: babel.config.js,
            size: 322,
            type: file
        }
    ],
    size: 322,
    type: directory
}
"
`;

exports[`"Add" commands add-babel 2`] = `
"module.exports = {
    plugins: [
        '@babel/plugin-transform-runtime',
        '@babel/plugin-proposal-class-properties',
        '@babel/plugin-proposal-export-default-from',
        '@babel/plugin-proposal-optional-chaining'
    ],
    presets: [
        '@babel/preset-env',
        'babel-preset-minify'
    ]
};"
`;

exports[`"Add" commands add-browsersync 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": []
}
"
`;

exports[`"Add" commands add-browsersync 2`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": []
}
"
`;

exports[`"Add" commands add-browsersync 3`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"copy\\": \\"npm-run-all --parallel copy:assets copy:index\\",
        \\"copy:assets\\": \\"cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive\\",
        \\"copy:index\\": \\"cpy './assets/index.html' ./dist\\",
        \\"watch:assets\\": \\"watch 'npm run copy' ./assets\\",
        \\"prebuild\\": \\"del-cli dist/assets\\",
        \\"build\\": \\"webpack\\",
        \\"postbuild\\": \\"npm run copy\\",
        \\"build:watch\\": \\"watch 'npm run build' src\\",
        \\"build:dashboard\\": \\"webpack-dashboard -- webpack-dev-server --config ./webpack.config.js\\",
        \\"build:css\\": \\"postcss ./assets/css/style.css --dir ./dist\\",
        \\"build:css:watch\\": \\"npm run build:css -- --watch\\",
        \\"prestart\\": \\"npm run build\\",
        \\"start\\": \\"npm-run-all --parallel build:watch build:css:watch serve\\",
        \\"serve\\": \\"browser-sync start --server ./dist --files ./dist\\"
    }
}
"
`;

exports[`"Add" commands add-electron --use-parcel 1`] = `
"{
    \\"name\\": \\"tomo-native-app\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"Native Desktop application built with Electron\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"main\\": \\"index.js\\",
    \\"scripts\\": {
        \\"electron:build\\": \\"npm-run-all build build:css\\",
        \\"preelectron:start\\": \\"npm run electron:build\\",
        \\"electron:start\\": \\"electron index\\",
        \\"electron:dev\\": \\"npm run electron:start -- --enable-logging\\",
        \\"dev\\": \\"npm-run-all --parallel build:watch electron:dev\\"
    }
}
"
`;

exports[`"Add" commands add-electron 1`] = `
"{
    \\"name\\": \\"tomo-native-app\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"Native Desktop application built with Electron\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"main\\": \\"index.js\\",
    \\"scripts\\": {
        \\"electron:build\\": \\"npm-run-all build build:css\\",
        \\"preelectron:start\\": \\"npm run electron:build\\",
        \\"electron:start\\": \\"electron index\\",
        \\"electron:dev\\": \\"npm run electron:start -- --enable-logging\\",
        \\"dev\\": \\"npm-run-all electron:build --parallel build:watch build:css:watch electron:dev\\"
    }
}
"
`;

exports[`"Add" commands add-electron 2`] = `
"{
    name: tomo-test,
    children: [
        {
            name: bin,
            children: [
                {
                    name: preload.js,
                    size: 314,
                    type: file
                }
            ],
            size: 314,
            type: directory
        },
        {
            name: index.js,
            size: 2194,
            type: file
        },
        {
            name: package.json,
            size: 539,
            type: file
        }
    ],
    size: 3047,
    type: directory
}
"
`;

exports[`"Add" commands add-esdoc (with React) 1`] = `
"{
    name: tomo-test,
    children: [
        {
            name: esdoc.conf.json,
            size: 417,
            type: file
        }
    ],
    size: 417,
    type: directory
}
"
`;

exports[`"Add" commands add-esdoc (with React) 2`] = `
"{
    \\"source\\": \\"./src\\",
    \\"destination\\": \\"./docs\\",
    \\"plugins\\": [
        {
            \\"name\\": \\"esdoc-standard-plugin\\"
        },
        {
            \\"name\\": \\"esdoc-ecmascript-proposal-plugin\\",
            \\"option\\": {
                \\"all\\": true
            }
        },
        {
            \\"name\\": \\"esdoc-jsx-plugin\\",
            \\"options\\": {
                \\"enable\\": true
            }
        }
    ]
}
"
`;

exports[`"Add" commands add-esdoc 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": []
}
"
`;

exports[`"Add" commands add-esdoc 2`] = `
"{
    name: tomo-test,
    children: [
        {
            name: esdoc.conf.json,
            size: 286,
            type: file
        },
        {
            name: package.json,
            size: 517,
            type: file
        }
    ],
    size: 803,
    type: directory
}
"
`;

exports[`"Add" commands add-esdoc 3`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"lint:docs\\": \\"eslint . --no-eslintrc --rule valid-jsdoc:error --parser babel-eslint\\",
        \\"build:docs\\": \\"jsdoc src -r --destination ./docs\\",
        \\"open:docs\\": \\"open-cli ./docs/index.html\\",
        \\"preesdoc\\": \\"npm run lint:docs\\",
        \\"esdoc\\": \\"npm run build:docs\\",
        \\"postesdoc\\": \\"npm run open:docs\\"
    }
}
"
`;

exports[`"Add" commands add-esdoc 4`] = `
"{
    \\"source\\": \\"./src\\",
    \\"destination\\": \\"./docs\\",
    \\"plugins\\": [
        {
            \\"name\\": \\"esdoc-standard-plugin\\"
        },
        {
            \\"name\\": \\"esdoc-ecmascript-proposal-plugin\\",
            \\"option\\": {
                \\"all\\": true
            }
        }
    ]
}
"
`;

exports[`"Add" commands add-eslint (with React) 1`] = `
"{
    name: tomo-test,
    children: [
        {
            name: .eslintignore,
            size: 36,
            type: file
        },
        {
            name: .eslintrc.js,
            size: 432,
            type: file
        }
    ],
    size: 468,
    type: directory
}
"
`;

exports[`"Add" commands add-eslint (with React) 2`] = `
"module.exports = {
    env: {
        es6: true,
        jest: true
    },
    extends: [
        'omaha-prime-grade',
        'plugin:react/recommended',
        'plugin:jsx-a11y/recommended'
    ],
    parser: 'babel-eslint',
    parserOptions: {
        ecmaFeatures: {
            jsx: true
        }
    },
    plugins: [
        'jsx-a11y'
    ],
    settings: {
        react: {
            version: '16.2'
        }
    }
};"
`;

exports[`"Add" commands add-eslint 1`] = `
"{
    name: tomo-test,
    children: [
        {
            name: .eslintignore,
            size: 36,
            type: file
        },
        {
            name: .eslintrc.js,
            size: 154,
            type: file
        }
    ],
    size: 190,
    type: directory
}
"
`;

exports[`"Add" commands add-eslint 2`] = `
"module.exports = {
    env: {
        es6: true,
        jest: true
    },
    extends: [
        'omaha-prime-grade'
    ],
    parser: 'babel-eslint'
};"
`;

exports[`"Add" commands add-jest --browser 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": []
}
"
`;

exports[`"Add" commands add-jest --browser 2`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 168,
            type: file
        }
    ],
    size: 168,
    type: directory
}
"
`;

exports[`"Add" commands add-jest --browser 3`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"jest\\": {
        \\"testMatch\\": [
            \\"**/__tests__/**/*.(e2e|test).[jt]s?(x)\\"
        ],
        \\"setupFilesAfterEnv\\": [
            \\"<rootDir>/__tests__/setup.js\\"
        ],
        \\"watchPlugins\\": [
            \\"jest-watch-typeahead/filename\\",
            \\"jest-watch-typeahead/testname\\"
        ]
    },
    \\"scripts\\": {
        \\"test\\": \\"jest .*.test.js --coverage\\",
        \\"test:watch\\": \\"npm test -- --watchAll\\"
    }
}
"
`;

exports[`"Add" commands add-jest --browser 4`] = `
"{
    name: tomo-test,
    children: [
        {
            name: __tests__,
            children: [
                {
                    name: example.test.js,
                    size: 337,
                    type: file
                },
                {
                    name: setup.js,
                    size: 370,
                    type: file
                }
            ],
            size: 707,
            type: directory
        },
        {
            name: package.json,
            size: 604,
            type: file
        }
    ],
    size: 1311,
    type: directory
}
"
`;

exports[`"Add" commands add-jest 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": []
}
"
`;

exports[`"Add" commands add-jest 2`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 168,
            type: file
        }
    ],
    size: 168,
    type: directory
}
"
`;

exports[`"Add" commands add-jest 3`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"jest\\": {
        \\"testMatch\\": [
            \\"**/__tests__/**/*.(e2e|test).[jt]s?(x)\\"
        ],
        \\"watchPlugins\\": [
            \\"jest-watch-typeahead/filename\\",
            \\"jest-watch-typeahead/testname\\"
        ]
    },
    \\"scripts\\": {
        \\"test\\": \\"jest .*.test.js --coverage\\",
        \\"test:watch\\": \\"npm test -- --watchAll\\"
    }
}
"
`;

exports[`"Add" commands add-jest 4`] = `
"{
    name: tomo-test,
    children: [
        {
            name: __tests__,
            children: [
                {
                    name: example.test.js,
                    size: 337,
                    type: file
                }
            ],
            size: 337,
            type: directory
        },
        {
            name: package.json,
            size: 518,
            type: file
        }
    ],
    size: 855,
    type: directory
}
"
`;

exports[`"Add" commands add-makefile 1`] = `
"{
    name: tomo-test,
    children: [
        {
            name: Makefile,
            size: 26,
            type: file
        }
    ],
    size: 26,
    type: directory
}
"
`;

exports[`"Add" commands add-makefile 2`] = `
"{
    name: tomo-test,
    children: [
        {
            name: .eslintignore,
            size: 36,
            type: file
        },
        {
            name: .eslintrc.js,
            size: 455,
            type: file
        },
        {
            name: Makefile,
            size: 1591,
            type: file
        },
        {
            name: __tests__,
            children: [
                {
                    name: example.test.js,
                    size: 337,
                    type: file
                },
                {
                    name: setup.js,
                    size: 370,
                    type: file
                }
            ],
            size: 707,
            type: directory
        },
        {
            name: assets,
            children: [
                {
                    name: css,
                    children: [
                        {
                            name: style.css,
                            size: 238,
                            type: file
                        }
                    ],
                    size: 238,
                    type: directory
                },
                {
                    name: fonts,
                    children: [
                        {
                            name: .gitkeep,
                            size: 0,
                            type: file
                        }
                    ],
                    size: 0,
                    type: directory
                },
                {
                    name: images,
                    children: [
                        {
                            name: .gitkeep,
                            size: 0,
                            type: file
                        }
                    ],
                    size: 0,
                    type: directory
                },
                {
                    name: index.html,
                    size: 1131,
                    type: file
                },
                {
                    name: library,
                    children: [
                        {
                            name: .gitkeep,
                            size: 0,
                            type: file
                        }
                    ],
                    size: 0,
                    type: directory
                },
                {
                    name: workers,
                    children: [
                        {
                            name: .gitkeep,
                            size: 0,
                            type: file
                        }
                    ],
                    size: 0,
                    type: directory
                }
            ],
            size: 1369,
            type: directory
        },
        {
            name: babel.config.js,
            size: 387,
            type: file
        },
        {
            name: package.json,
            size: 1807,
            type: file
        },
        {
            name: postcss.config.js,
            size: 509,
            type: file
        },
        {
            name: src,
            children: [
                {
                    name: components,
                    children: [
                        {
                            name: app.js,
                            size: 1265,
                            type: file
                        }
                    ],
                    size: 1265,
                    type: directory
                },
                {
                    name: main.js,
                    size: 199,
                    type: file
                },
                {
                    name: plugins,
                    children: [
                        {
                            name: mn.radio.logging.js,
                            size: 3980,
                            type: file
                        },
                        {
                            name: mn.redux.state.js,
                            size: 2039,
                            type: file
                        }
                    ],
                    size: 6019,
                    type: directory
                },
                {
                    name: shims,
                    children: [
                        {
                            name: mn.renderer.shim.js,
                            size: 510,
                            type: file
                        }
                    ],
                    size: 510,
                    type: directory
                }
            ],
            size: 7993,
            type: directory
        },
        {
            name: webpack.config.js,
            size: 1044,
            type: file
        }
    ],
    size: 15898,
    type: directory
}
"
`;

exports[`"Add" commands add-makefile 3`] = `"# Makefile built with tomo"`;

exports[`"Add" commands add-makefile 4`] = `
"# Makefile built from /path/to/package.json

build: ## Task description
	del-cli dist/assets
	webpack
	$(MAKE) copy

build-watch: ## Task description
	watch 'make build' ./src

lint: ## Task description
	eslint . -c ./.eslintrc.js --fix

lint-watch: ## Task description
	watch 'make lint' ./src

lint-tests: ## Task description
	eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore

build-css: ## Task description
	postcss ./assets/css/style.css --dir ./dist

build-css-watch: ## Task description
	postcss ./assets/css/style.css --dir ./dist --watch

lint-aria: ## Task description
	pa11y ./dist/index.html

test: ## Task description
	jest .*.test.js --coverage

test-watch: ## Task description
	jest .*.test.js --coverage --watchAll

copy: ## Task description
	npm-run-all --parallel copy:assets copy:index

copy-assets: ## Task description
	cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive

copy-index: ## Task description
	cpy './assets/index.html' ./dist

watch-assets: ## Task description
	watch 'make copy' ./assets

build-dashboard: ## Task description
	webpack-dashboard -- webpack-dev-server --config ./webpack.config.js

dev: ## Task description
	stmux [ 'make build-dashboard' : 'make lint-watch' ]

start: ## Task description
	$(MAKE) build
	npm-run-all --parallel build:watch build:css:watch serve

serve: ## Task description
	browser-sync start --server ./dist --files ./dist

help: ## Show this help
	@fgrep -h \\"##\\" $(MAKEFILE_LIST) | fgrep -v fgrep | sed -e 's/\\\\$$//' | sed -e 's/##/\\\\n    /'"
`;

exports[`"Add" commands add-marionette 1`] = `
"{
    name: tomo-test,
    children: [
        {
            name: assets,
            children: [
                {
                    name: css,
                    children: [
                        {
                            name: style.css,
                            size: 238,
                            type: file
                        }
                    ],
                    size: 238,
                    type: directory
                },
                {
                    name: fonts,
                    children: [
                        {
                            name: .gitkeep,
                            size: 0,
                            type: file
                        }
                    ],
                    size: 0,
                    type: directory
                },
                {
                    name: images,
                    children: [
                        {
                            name: .gitkeep,
                            size: 0,
                            type: file
                        }
                    ],
                    size: 0,
                    type: directory
                },
                {
                    name: index.html,
                    size: 1131,
                    type: file
                },
                {
                    name: library,
                    children: [
                        {
                            name: .gitkeep,
                            size: 0,
                            type: file
                        }
                    ],
                    size: 0,
                    type: directory
                },
                {
                    name: workers,
                    children: [
                        {
                            name: .gitkeep,
                            size: 0,
                            type: file
                        }
                    ],
                    size: 0,
                    type: directory
                }
            ],
            size: 1369,
            type: directory
        },
        {
            name: src,
            children: [
                {
                    name: components,
                    children: [
                        {
                            name: app.js,
                            size: 1265,
                            type: file
                        }
                    ],
                    size: 1265,
                    type: directory
                },
                {
                    name: main.js,
                    size: 199,
                    type: file
                },
                {
                    name: plugins,
                    children: [
                        {
                            name: mn.radio.logging.js,
                            size: 3980,
                            type: file
                        },
                        {
                            name: mn.redux.state.js,
                            size: 2039,
                            type: file
                        }
                    ],
                    size: 6019,
                    type: directory
                },
                {
                    name: shims,
                    children: [
                        {
                            name: mn.renderer.shim.js,
                            size: 510,
                            type: file
                        }
                    ],
                    size: 510,
                    type: directory
                }
            ],
            size: 7993,
            type: directory
        }
    ],
    size: 9362,
    type: directory
}
"
`;

exports[`"Add" commands add-parcel 1`] = `
"module.exports = {
    content: [
        './assets/index.html'
    ]
};"
`;

exports[`"Add" commands add-parcel 2`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"lint\\": \\"eslint . -c ./.eslintrc.js --fix\\",
        \\"lint:watch\\": \\"watch 'npm run lint' ./src\\",
        \\"lint:tests\\": \\"eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore\\",
        \\"clean:build\\": \\"del-cli ./dist\\",
        \\"prebuild\\": \\"npm run clean:build\\",
        \\"build\\": \\"parcel build --out-dir ./dist --public-url ./ ./assets/index.html\\",
        \\"prebuild:watch\\": \\"npm run clean:build\\",
        \\"build:watch\\": \\"parcel watch --out-dir ./dist --public-url ./ ./assets/index.html\\",
        \\"start\\": \\"parcel ./assets/index.html --out-dir ./dist --open\\",
        \\"dev\\": \\"stmux [ \\\\\\"npm run build:watch\\\\\\" : \\\\\\"npm run lint:watch\\\\\\" ]\\"
    }
}
"
`;

exports[`"Add" commands add-postcss 1`] = `
"module.exports = {
    map: true,
    parser: require('postcss-safe-parser'),
    plugins: [
        require('stylelint')({config: {extends: 'stylelint-config-recommended'}}),
        require('uncss').postcssPlugin({html: ['./dist/index.html']}),
        require('postcss-import')(),
        require('postcss-preset-env')({stage: 0}),
        require('postcss-normalize')({browsers: 'last 2 versions'}),
        require('cssnano')(),
        require('postcss-reporter')({clearReportedMessages: true})
    ]
};"
`;

exports[`"Add" commands add-postcss 2`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"build:css\\": \\"postcss ./assets/css/style.css --dir ./dist\\",
        \\"build:css:watch\\": \\"npm run build:css -- --watch\\"
    }
}
"
`;

exports[`"Add" commands add-rollup (with React) 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"lint\\": \\"eslint . -c ./.eslintrc.js --fix\\",
        \\"lint:watch\\": \\"watch 'npm run lint' ./src\\",
        \\"lint:tests\\": \\"eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore\\",
        \\"copy\\": \\"npm-run-all --parallel copy:assets copy:index\\",
        \\"copy:assets\\": \\"cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive\\",
        \\"copy:index\\": \\"cpy './assets/index.html' ./dist\\",
        \\"watch:assets\\": \\"watch 'npm run copy' ./assets\\",
        \\"prebuild\\": \\"del-cli dist/assets\\",
        \\"build\\": \\"rollup -c\\",
        \\"postbuild\\": \\"npm run copy\\",
        \\"build:watch\\": \\"watch 'npm run build' ./src\\",
        \\"dev\\": \\"stmux [ \\\\\\"npm run build:watch\\\\\\" : \\\\\\"npm run lint:watch\\\\\\" ]\\"
    }
}
"
`;

exports[`"Add" commands add-rollup (with React) 2`] = `
"/* eslint-disable max-len */
import babel from 'rollup-plugin-babel';
import commonjs from 'rollup-plugin-commonjs';
import resolve from 'rollup-plugin-node-resolve';
import replace from 'rollup-plugin-replace';
import {terser} from 'rollup-plugin-terser';

export default {
    input: './src/main.js',
    output: {
        file: './dist/bundle.min.js',
        format: 'iife',
        sourceMap: 'inline'
    },
    plugins: [
        babel({exclude: 'node_modules/**', runtimeHelpers: true}),
        commonjs(),
        resolve({browser: true}),
        replace({'process.env.NODE_ENV': JSON.stringify('production')}),
        terser()
    ]
};"
`;

exports[`"Add" commands add-rollup 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"lint\\": \\"eslint . -c ./.eslintrc.js --fix\\",
        \\"lint:watch\\": \\"watch 'npm run lint' ./src\\",
        \\"lint:tests\\": \\"eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore\\",
        \\"copy\\": \\"npm-run-all --parallel copy:assets copy:index\\",
        \\"copy:assets\\": \\"cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive\\",
        \\"copy:index\\": \\"cpy './assets/index.html' ./dist\\",
        \\"watch:assets\\": \\"watch 'npm run copy' ./assets\\",
        \\"prebuild\\": \\"del-cli dist/assets\\",
        \\"build\\": \\"rollup -c\\",
        \\"postbuild\\": \\"npm run copy\\",
        \\"build:watch\\": \\"watch 'npm run build' ./src\\",
        \\"dev\\": \\"stmux [ \\\\\\"npm run build:watch\\\\\\" : \\\\\\"npm run lint:watch\\\\\\" ]\\"
    }
}
"
`;

exports[`"Add" commands add-rollup 2`] = `
"/* eslint-disable max-len */
import babel from 'rollup-plugin-babel';
import commonjs from 'rollup-plugin-commonjs';
import resolve from 'rollup-plugin-node-resolve';
import replace from 'rollup-plugin-replace';
import {terser} from 'rollup-plugin-terser';

export default {
    input: './src/main.js',
    output: {
        file: './dist/bundle.min.js',
        format: 'iife',
        sourceMap: 'inline'
    },
    plugins: [
        babel({exclude: 'node_modules/**', runtimeHelpers: true}),
        commonjs({namedExports: {'./node_modules/backbone/backbone.js': ['Model', 'history'],'./node_modules/backbone.marionette/lib/backbone.marionette.js': ['Application', 'View', 'MnObject']}}),
        resolve({browser: true}),
        replace({'process.env.NODE_ENV': JSON.stringify('production')}),
        terser()
    ]
};"
`;

exports[`"Add" commands add-webpack (with React) 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": []
}
"
`;

exports[`"Add" commands add-webpack (with React) 2`] = `
"module.exports = {
    env: {
        es6: true,
        jest: true,
        browser: true
    },
    extends: [
        'omaha-prime-grade',
        'plugin:react/recommended',
        'plugin:jsx-a11y/recommended'
    ],
    parser: 'babel-eslint',
    parserOptions: {
        ecmaFeatures: {
            jsx: true
        }
    },
    plugins: [
        'jsx-a11y'
    ],
    settings: {
        react: {
            version: 'undefined'
        }
    }
};"
`;

exports[`"Add" commands add-webpack (with React) 3`] = `
"{
    name: tomo-test,
    children: [
        {
            name: .eslintignore,
            size: 36,
            type: file
        },
        {
            name: .eslintrc.js,
            size: 460,
            type: file
        },
        {
            name: babel.config.js,
            size: 387,
            type: file
        },
        {
            name: package.json,
            size: 1002,
            type: file
        },
        {
            name: webpack.config.js,
            size: 1048,
            type: file
        }
    ],
    size: 2933,
    type: directory
}
"
`;

exports[`"Add" commands add-webpack (with React) 4`] = `
"/* eslint-env node */
const {resolve} = require('path');
const DashboardPlugin = require('webpack-dashboard/plugin');
const TerserPlugin = require('terser-webpack-plugin');

module.exports = {
    mode: 'development',
    entry: {
        app: 'src/main.js'
    },
    output: {
        path: resolve('./dist'),
        filename: 'bundle.min.js'
    },
    module: {
        rules: [
            {
                test: /.js?$/,
                exclude: /node_modules/,
                loader: 'babel-loader',
                query: {
                    presets: [
                        '@babel/env'
                    ]
                }
            }
        ]
    },
    plugins: [
        new DashboardPlugin()
    ],
    devServer: {
        contentBase: './dist',
        compress: true,
        watchContentBase: true
    },
    optimization: {
        minimize: true,
        minimizer: [new TerserPlugin()]
    },
    resolve: {
        modules: [resolve(__dirname, 'src'), 'node_modules'],
        extensions: ['.js', '.jsx']
    }
};"
`;

exports[`"Add" commands add-webpack (with React) 5`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"build\\": \\"webpack\\",
        \\"build:watch\\": \\"watch 'npm run build' src\\",
        \\"lint\\": \\"eslint . -c ./.eslintrc.js --fix\\",
        \\"lint:watch\\": \\"watch 'npm run lint' src\\",
        \\"lint:tests\\": \\"eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore\\",
        \\"copy\\": \\"npm-run-all --parallel copy:assets copy:index\\",
        \\"copy:assets\\": \\"cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive\\",
        \\"copy:index\\": \\"cpy './assets/index.html' ./dist\\",
        \\"watch:assets\\": \\"watch 'npm run copy' ./assets\\",
        \\"prebuild\\": \\"del-cli dist/assets\\",
        \\"postbuild\\": \\"npm run copy\\",
        \\"build:dashboard\\": \\"webpack-dashboard -- webpack-dev-server --config ./webpack.config.js\\",
        \\"dev\\": \\"stmux [ \\\\\\"npm run build:dashboard\\\\\\" : \\\\\\"npm run lint:watch\\\\\\" ]\\"
    }
}
"
`;

exports[`"Add" commands add-webpack 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": []
}
"
`;

exports[`"Add" commands add-webpack 2`] = `
"module.exports = {
    env: {
        es6: true,
        jest: true,
        browser: true
    },
    extends: [
        'omaha-prime-grade',
        'plugin:react/recommended',
        'plugin:jsx-a11y/recommended'
    ],
    parser: 'babel-eslint',
    parserOptions: {
        ecmaFeatures: {
            jsx: true
        }
    },
    plugins: [
        'jsx-a11y'
    ],
    settings: {
        react: {
            version: 'undefined'
        }
    }
};"
`;

exports[`"Add" commands add-webpack 3`] = `
"{
    name: tomo-test,
    children: [
        {
            name: .eslintignore,
            size: 36,
            type: file
        },
        {
            name: .eslintrc.js,
            size: 460,
            type: file
        },
        {
            name: babel.config.js,
            size: 387,
            type: file
        },
        {
            name: package.json,
            size: 1002,
            type: file
        },
        {
            name: webpack.config.js,
            size: 1040,
            type: file
        }
    ],
    size: 2925,
    type: directory
}
"
`;

exports[`"Add" commands add-webpack 4`] = `
"/* eslint-env node */
const {resolve} = require('path');
const DashboardPlugin = require('webpack-dashboard/plugin');
const TerserPlugin = require('terser-webpack-plugin');

module.exports = {
    mode: 'development',
    entry: {
        app: 'src/main.js'
    },
    output: {
        path: resolve('./dist'),
        filename: 'bundle.min.js'
    },
    module: {
        rules: [
            {
                test: /.js?$/,
                exclude: /node_modules/,
                loader: 'babel-loader',
                query: {
                    presets: [
                        '@babel/env'
                    ]
                }
            }
        ]
    },
    plugins: [
        new DashboardPlugin()
    ],
    devServer: {
        contentBase: './dist',
        compress: true,
        watchContentBase: true
    },
    optimization: {
        minimize: true,
        minimizer: [new TerserPlugin()]
    },
    resolve: {
        modules: [resolve(__dirname, 'src'), 'node_modules'],
        extensions: ['.js']
    }
};"
`;

exports[`"Add" commands add-webpack 5`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"build\\": \\"webpack\\",
        \\"build:watch\\": \\"watch 'npm run build' src\\",
        \\"lint\\": \\"eslint . -c ./.eslintrc.js --fix\\",
        \\"lint:watch\\": \\"watch 'npm run lint' src\\",
        \\"lint:tests\\": \\"eslint __tests__/**/*.js -c ./.eslintrc.js --fix --no-ignore\\",
        \\"copy\\": \\"npm-run-all --parallel copy:assets copy:index\\",
        \\"copy:assets\\": \\"cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive\\",
        \\"copy:index\\": \\"cpy './assets/index.html' ./dist\\",
        \\"watch:assets\\": \\"watch 'npm run copy' ./assets\\",
        \\"prebuild\\": \\"del-cli dist/assets\\",
        \\"postbuild\\": \\"npm run copy\\",
        \\"build:dashboard\\": \\"webpack-dashboard -- webpack-dev-server --config ./webpack.config.js\\",
        \\"dev\\": \\"stmux [ \\\\\\"npm run build:dashboard\\\\\\" : \\\\\\"npm run lint:watch\\\\\\" ]\\"
    }
}
"
`;

exports[`"Remove" commands remove a11y 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"lint:aria\\": \\"pa11y ./dist/index.html\\"
    }
}
"
`;

exports[`"Remove" commands remove a11y 2`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {}
}
"
`;

exports[`"Remove" commands remove browsersync 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"copy\\": \\"npm-run-all --parallel copy:assets copy:index\\",
        \\"copy:assets\\": \\"cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive\\",
        \\"copy:index\\": \\"cpy './assets/index.html' ./dist\\",
        \\"watch:assets\\": \\"watch 'npm run copy' ./assets\\",
        \\"prebuild\\": \\"del-cli dist/assets\\",
        \\"build\\": \\"webpack\\",
        \\"postbuild\\": \\"npm run copy\\",
        \\"build:watch\\": \\"watch 'npm run build' src\\",
        \\"build:dashboard\\": \\"webpack-dashboard -- webpack-dev-server --config ./webpack.config.js\\",
        \\"build:css\\": \\"postcss ./assets/css/style.css --dir ./dist\\",
        \\"build:css:watch\\": \\"npm run build:css -- --watch\\",
        \\"prestart\\": \\"npm run build\\",
        \\"start\\": \\"npm-run-all --parallel build:watch build:css:watch serve\\",
        \\"serve\\": \\"browser-sync start --server ./dist --files ./dist\\"
    }
}
"
`;

exports[`"Remove" commands remove browsersync 2`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"copy\\": \\"npm-run-all --parallel copy:assets copy:index\\",
        \\"copy:assets\\": \\"cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive\\",
        \\"copy:index\\": \\"cpy './assets/index.html' ./dist\\",
        \\"watch:assets\\": \\"watch 'npm run copy' ./assets\\",
        \\"prebuild\\": \\"del-cli dist/assets\\",
        \\"build\\": \\"webpack\\",
        \\"postbuild\\": \\"npm run copy\\",
        \\"build:watch\\": \\"watch 'npm run build' src\\",
        \\"build:dashboard\\": \\"webpack-dashboard -- webpack-dev-server --config ./webpack.config.js\\",
        \\"build:css\\": \\"postcss ./assets/css/style.css --dir ./dist\\",
        \\"build:css:watch\\": \\"npm run build:css -- --watch\\"
    }
}
"
`;

exports[`"Remove" commands remove parcel 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"clean:build\\": \\"del-cli ./dist\\",
        \\"prebuild\\": \\"npm run clean:build\\",
        \\"build\\": \\"parcel build --out-dir ./dist --public-url ./ ./assets/index.html\\",
        \\"prebuild:watch\\": \\"npm run clean:build\\",
        \\"build:watch\\": \\"parcel watch --out-dir ./dist --public-url ./ ./assets/index.html\\",
        \\"start\\": \\"parcel ./assets/index.html --out-dir ./dist --open\\"
    }
}
"
`;

exports[`"Remove" commands remove parcel 2`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 573,
            type: file
        },
        {
            name: purgecss.config.js,
            size: 72,
            type: file
        }
    ],
    size: 645,
    type: directory
}
"
`;

exports[`"Remove" commands remove parcel 3`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {}
}
"
`;

exports[`"Remove" commands remove parcel 4`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 187,
            type: file
        }
    ],
    size: 187,
    type: directory
}
"
`;

exports[`"Remove" commands remove postcss 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"build:css\\": \\"postcss ./assets/css/style.css --dir ./dist\\",
        \\"build:css:watch\\": \\"npm run build:css -- --watch\\"
    }
}
"
`;

exports[`"Remove" commands remove postcss 2`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 318,
            type: file
        },
        {
            name: postcss.config.js,
            size: 509,
            type: file
        }
    ],
    size: 827,
    type: directory
}
"
`;

exports[`"Remove" commands remove postcss 3`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {}
}
"
`;

exports[`"Remove" commands remove postcss 4`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 187,
            type: file
        }
    ],
    size: 187,
    type: directory
}
"
`;

exports[`"Remove" commands remove rollup 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"copy\\": \\"npm-run-all --parallel copy:assets copy:index\\",
        \\"copy:assets\\": \\"cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive\\",
        \\"copy:index\\": \\"cpy './assets/index.html' ./dist\\",
        \\"watch:assets\\": \\"watch 'npm run copy' ./assets\\",
        \\"prebuild\\": \\"del-cli dist/assets\\",
        \\"build\\": \\"rollup -c\\",
        \\"postbuild\\": \\"npm run copy\\",
        \\"build:watch\\": \\"watch 'npm run build' src\\"
    }
}
"
`;

exports[`"Remove" commands remove rollup 2`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 636,
            type: file
        },
        {
            name: rollup.config.js,
            size: 646,
            type: file
        }
    ],
    size: 1282,
    type: directory
}
"
`;

exports[`"Remove" commands remove rollup 3`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {}
}
"
`;

exports[`"Remove" commands remove rollup 4`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 187,
            type: file
        }
    ],
    size: 187,
    type: directory
}
"
`;

exports[`"Remove" commands remove webpack 1`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 733,
            type: file
        },
        {
            name: webpack.config.js,
            size: 1040,
            type: file
        }
    ],
    size: 1773,
    type: directory
}
"
`;

exports[`"Remove" commands remove webpack 2`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"copy\\": \\"npm-run-all --parallel copy:assets copy:index\\",
        \\"copy:assets\\": \\"cpy './assets/!(css)/**/*.*' './assets/**/[.]*' ./dist --parents --recursive\\",
        \\"copy:index\\": \\"cpy './assets/index.html' ./dist\\",
        \\"watch:assets\\": \\"watch 'npm run copy' ./assets\\",
        \\"prebuild\\": \\"del-cli dist/assets\\",
        \\"build\\": \\"webpack\\",
        \\"postbuild\\": \\"npm run copy\\",
        \\"build:watch\\": \\"watch 'npm run build' src\\",
        \\"build:dashboard\\": \\"webpack-dashboard -- webpack-dev-server --config ./webpack.config.js\\"
    }
}
"
`;

exports[`"Remove" commands remove webpack 3`] = `
"{
    name: tomo-test,
    children: [
        {
            name: package.json,
            size: 187,
            type: file
        }
    ],
    size: 187,
    type: directory
}
"
`;

exports[`"Remove" commands remove webpack 4`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {}
}
"
`;

exports[`Add Reason with Webpack 1`] = `
"{
    \\"name\\": \\"my-project\\",
    \\"version\\": \\"0.0.0\\",
    \\"description\\": \\"A super cool app/server/tool/library/widget/thingy\\",
    \\"license\\": \\"MIT\\",
    \\"keywords\\": [],
    \\"scripts\\": {
        \\"build:reason\\": \\"bsb -make-world -clean-world\\",
        \\"watch:reason\\": \\"npm run build:reason -- -w\\"
    }
}
"
`;

exports[`Add Reason with Webpack 2`] = `
"{
    \\"bs-dependencies\\": [
        \\"reason-react\\"
    ],
    \\"bsc-flags\\": [
        \\"-bs-super-errors\\"
    ],
    \\"namespace\\": true,
    \\"package-specs\\": [
        {
            \\"module\\": \\"es6\\",
            \\"in-source\\": true
        }
    ],
    \\"ppx-flags\\": [],
    \\"reason\\": {
        \\"react-jsx\\": 3
    },
    \\"refmt\\": 3,
    \\"sources\\": [
        {
            \\"dir\\": \\"src\\",
            \\"subdirs\\": true
        }
    ],
    \\"suffix\\": \\".bs.js\\",
    \\"name\\": \\"my-project\\"
}
"
`;

exports[`Add Reason with Webpack 3`] = `
"{
    name: tomo-test,
    children: [
        {
            name: bsconfig.json,
            size: 474,
            type: file
        },
        {
            name: package.json,
            size: 301,
            type: file
        },
        {
            name: src,
            children: [
                {
                    name: components,
                    children: [
                        {
                            name: App.re,
                            size: 116,
                            type: file
                        },
                        {
                            name: Example.re,
                            size: 126,
                            type: file
                        }
                    ],
                    size: 242,
                    type: directory
                }
            ],
            size: 242,
            type: directory
        }
    ],
    size: 1017,
    type: directory
}
"
`;
